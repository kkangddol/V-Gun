// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Struct.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Struct_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Struct_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Struct_2eproto;
namespace Protocol {
class PartsInfo;
struct PartsInfoDefaultTypeInternal;
extern PartsInfoDefaultTypeInternal _PartsInfo_default_instance_;
class PartsList;
struct PartsListDefaultTypeInternal;
extern PartsListDefaultTypeInternal _PartsList_default_instance_;
class Player;
struct PlayerDefaultTypeInternal;
extern PlayerDefaultTypeInternal _Player_default_instance_;
class PlayerInfo;
struct PlayerInfoDefaultTypeInternal;
extern PlayerInfoDefaultTypeInternal _PlayerInfo_default_instance_;
class PlayersTransform;
struct PlayersTransformDefaultTypeInternal;
extern PlayersTransformDefaultTypeInternal _PlayersTransform_default_instance_;
class RoomInfo;
struct RoomInfoDefaultTypeInternal;
extern RoomInfoDefaultTypeInternal _RoomInfo_default_instance_;
class RoundInfo;
struct RoundInfoDefaultTypeInternal;
extern RoundInfoDefaultTypeInternal _RoundInfo_default_instance_;
class Stats;
struct StatsDefaultTypeInternal;
extern StatsDefaultTypeInternal _Stats_default_instance_;
class Transform;
struct TransformDefaultTypeInternal;
extern TransformDefaultTypeInternal _Transform_default_instance_;
class Transform_Position;
struct Transform_PositionDefaultTypeInternal;
extern Transform_PositionDefaultTypeInternal _Transform_Position_default_instance_;
class Transform_Quaternion;
struct Transform_QuaternionDefaultTypeInternal;
extern Transform_QuaternionDefaultTypeInternal _Transform_Quaternion_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::PartsInfo* Arena::CreateMaybeMessage<::Protocol::PartsInfo>(Arena*);
template<> ::Protocol::PartsList* Arena::CreateMaybeMessage<::Protocol::PartsList>(Arena*);
template<> ::Protocol::Player* Arena::CreateMaybeMessage<::Protocol::Player>(Arena*);
template<> ::Protocol::PlayerInfo* Arena::CreateMaybeMessage<::Protocol::PlayerInfo>(Arena*);
template<> ::Protocol::PlayersTransform* Arena::CreateMaybeMessage<::Protocol::PlayersTransform>(Arena*);
template<> ::Protocol::RoomInfo* Arena::CreateMaybeMessage<::Protocol::RoomInfo>(Arena*);
template<> ::Protocol::RoundInfo* Arena::CreateMaybeMessage<::Protocol::RoundInfo>(Arena*);
template<> ::Protocol::Stats* Arena::CreateMaybeMessage<::Protocol::Stats>(Arena*);
template<> ::Protocol::Transform* Arena::CreateMaybeMessage<::Protocol::Transform>(Arena*);
template<> ::Protocol::Transform_Position* Arena::CreateMaybeMessage<::Protocol::Transform_Position>(Arena*);
template<> ::Protocol::Transform_Quaternion* Arena::CreateMaybeMessage<::Protocol::Transform_Quaternion>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class Player final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.Player) */ {
 public:
  inline Player() : Player(nullptr) {}
  ~Player() override;
  explicit constexpr Player(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Player(const Player& from);
  Player(Player&& from) noexcept
    : Player() {
    *this = ::std::move(from);
  }

  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline Player& operator=(Player&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Player& default_instance() {
    return *internal_default_instance();
  }
  static inline const Player* internal_default_instance() {
    return reinterpret_cast<const Player*>(
               &_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Player& a, Player& b) {
    a.Swap(&b);
  }
  inline void Swap(Player* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Player* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Player* New() const final {
    return new Player();
  }

  Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Player>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Player& from);
  void MergeFrom(const Player& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Player* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.Player";
  }
  protected:
  explicit Player(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kIndexFieldNumber = 2,
  };
  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 index = 2;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.Player)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class RoomInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.RoomInfo) */ {
 public:
  inline RoomInfo() : RoomInfo(nullptr) {}
  ~RoomInfo() override;
  explicit constexpr RoomInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoomInfo(const RoomInfo& from);
  RoomInfo(RoomInfo&& from) noexcept
    : RoomInfo() {
    *this = ::std::move(from);
  }

  inline RoomInfo& operator=(const RoomInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomInfo& operator=(RoomInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoomInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoomInfo* internal_default_instance() {
    return reinterpret_cast<const RoomInfo*>(
               &_RoomInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RoomInfo& a, RoomInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoomInfo* New() const final {
    return new RoomInfo();
  }

  RoomInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoomInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoomInfo& from);
  void MergeFrom(const RoomInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.RoomInfo";
  }
  protected:
  explicit RoomInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
    kRoomCodeFieldNumber = 2,
    kRoundKillFieldNumber = 3,
    kRoundTimeFieldNumber = 4,
  };
  // .Protocol.RoomState state = 1;
  void clear_state();
  ::Protocol::RoomState state() const;
  void set_state(::Protocol::RoomState value);
  private:
  ::Protocol::RoomState _internal_state() const;
  void _internal_set_state(::Protocol::RoomState value);
  public:

  // uint32 roomCode = 2;
  void clear_roomcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 roomcode() const;
  void set_roomcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_roomcode() const;
  void _internal_set_roomcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 roundKill = 3;
  void clear_roundkill();
  ::PROTOBUF_NAMESPACE_ID::uint32 roundkill() const;
  void set_roundkill(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_roundkill() const;
  void _internal_set_roundkill(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 roundTime = 4;
  void clear_roundtime();
  ::PROTOBUF_NAMESPACE_ID::uint32 roundtime() const;
  void set_roundtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_roundtime() const;
  void _internal_set_roundtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.RoomInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int state_;
  ::PROTOBUF_NAMESPACE_ID::uint32 roomcode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 roundkill_;
  ::PROTOBUF_NAMESPACE_ID::uint32 roundtime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class RoundInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.RoundInfo) */ {
 public:
  inline RoundInfo() : RoundInfo(nullptr) {}
  ~RoundInfo() override;
  explicit constexpr RoundInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoundInfo(const RoundInfo& from);
  RoundInfo(RoundInfo&& from) noexcept
    : RoundInfo() {
    *this = ::std::move(from);
  }

  inline RoundInfo& operator=(const RoundInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoundInfo& operator=(RoundInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoundInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoundInfo* internal_default_instance() {
    return reinterpret_cast<const RoundInfo*>(
               &_RoundInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RoundInfo& a, RoundInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RoundInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoundInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoundInfo* New() const final {
    return new RoundInfo();
  }

  RoundInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoundInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoundInfo& from);
  void MergeFrom(const RoundInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoundInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.RoundInfo";
  }
  protected:
  explicit RoundInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
    kTimeFieldNumber = 2,
  };
  // .Protocol.RoundState state = 1;
  void clear_state();
  ::Protocol::RoundState state() const;
  void set_state(::Protocol::RoundState value);
  private:
  ::Protocol::RoundState _internal_state() const;
  void _internal_set_state(::Protocol::RoundState value);
  public:

  // uint32 time = 2;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.RoundInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int state_;
  ::PROTOBUF_NAMESPACE_ID::uint32 time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class Stats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.Stats) */ {
 public:
  inline Stats() : Stats(nullptr) {}
  ~Stats() override;
  explicit constexpr Stats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Stats(const Stats& from);
  Stats(Stats&& from) noexcept
    : Stats() {
    *this = ::std::move(from);
  }

  inline Stats& operator=(const Stats& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stats& operator=(Stats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Stats& default_instance() {
    return *internal_default_instance();
  }
  static inline const Stats* internal_default_instance() {
    return reinterpret_cast<const Stats*>(
               &_Stats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Stats& a, Stats& b) {
    a.Swap(&b);
  }
  inline void Swap(Stats* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Stats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Stats* New() const final {
    return new Stats();
  }

  Stats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Stats>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Stats& from);
  void MergeFrom(const Stats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.Stats";
  }
  protected:
  explicit Stats(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVGunFieldNumber = 1,
    kDamageHeadFieldNumber = 2,
    kDamageBodyFieldNumber = 3,
    kDamageLegFieldNumber = 4,
    kFireRateFieldNumber = 5,
    kReloadTimeFieldNumber = 6,
    kMoveSpeedFieldNumber = 7,
    kBulletCapacityFieldNumber = 8,
    kRecoilFieldNumber = 9,
    kDamageFieldNumber = 10,
    kExtraJumpCountFieldNumber = 11,
    kHealthPointFieldNumber = 12,
  };
  // .Protocol.Vgun vGun = 1;
  void clear_vgun();
  ::Protocol::Vgun vgun() const;
  void set_vgun(::Protocol::Vgun value);
  private:
  ::Protocol::Vgun _internal_vgun() const;
  void _internal_set_vgun(::Protocol::Vgun value);
  public:

  // uint32 damageHead = 2;
  void clear_damagehead();
  ::PROTOBUF_NAMESPACE_ID::uint32 damagehead() const;
  void set_damagehead(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_damagehead() const;
  void _internal_set_damagehead(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 damageBody = 3;
  void clear_damagebody();
  ::PROTOBUF_NAMESPACE_ID::uint32 damagebody() const;
  void set_damagebody(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_damagebody() const;
  void _internal_set_damagebody(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 damageLeg = 4;
  void clear_damageleg();
  ::PROTOBUF_NAMESPACE_ID::uint32 damageleg() const;
  void set_damageleg(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_damageleg() const;
  void _internal_set_damageleg(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float fireRate = 5;
  void clear_firerate();
  float firerate() const;
  void set_firerate(float value);
  private:
  float _internal_firerate() const;
  void _internal_set_firerate(float value);
  public:

  // float reloadTime = 6;
  void clear_reloadtime();
  float reloadtime() const;
  void set_reloadtime(float value);
  private:
  float _internal_reloadtime() const;
  void _internal_set_reloadtime(float value);
  public:

  // float moveSpeed = 7;
  void clear_movespeed();
  float movespeed() const;
  void set_movespeed(float value);
  private:
  float _internal_movespeed() const;
  void _internal_set_movespeed(float value);
  public:

  // uint32 bulletCapacity = 8;
  void clear_bulletcapacity();
  ::PROTOBUF_NAMESPACE_ID::uint32 bulletcapacity() const;
  void set_bulletcapacity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bulletcapacity() const;
  void _internal_set_bulletcapacity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 recoil = 9;
  void clear_recoil();
  ::PROTOBUF_NAMESPACE_ID::uint32 recoil() const;
  void set_recoil(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_recoil() const;
  void _internal_set_recoil(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 damage = 10;
  void clear_damage();
  ::PROTOBUF_NAMESPACE_ID::uint32 damage() const;
  void set_damage(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_damage() const;
  void _internal_set_damage(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 extraJumpCount = 11;
  void clear_extrajumpcount();
  ::PROTOBUF_NAMESPACE_ID::int32 extrajumpcount() const;
  void set_extrajumpcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_extrajumpcount() const;
  void _internal_set_extrajumpcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 healthPoint = 12;
  void clear_healthpoint();
  ::PROTOBUF_NAMESPACE_ID::int32 healthpoint() const;
  void set_healthpoint(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_healthpoint() const;
  void _internal_set_healthpoint(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.Stats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int vgun_;
  ::PROTOBUF_NAMESPACE_ID::uint32 damagehead_;
  ::PROTOBUF_NAMESPACE_ID::uint32 damagebody_;
  ::PROTOBUF_NAMESPACE_ID::uint32 damageleg_;
  float firerate_;
  float reloadtime_;
  float movespeed_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bulletcapacity_;
  ::PROTOBUF_NAMESPACE_ID::uint32 recoil_;
  ::PROTOBUF_NAMESPACE_ID::uint32 damage_;
  ::PROTOBUF_NAMESPACE_ID::int32 extrajumpcount_;
  ::PROTOBUF_NAMESPACE_ID::int32 healthpoint_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class PartsInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.PartsInfo) */ {
 public:
  inline PartsInfo() : PartsInfo(nullptr) {}
  ~PartsInfo() override;
  explicit constexpr PartsInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PartsInfo(const PartsInfo& from);
  PartsInfo(PartsInfo&& from) noexcept
    : PartsInfo() {
    *this = ::std::move(from);
  }

  inline PartsInfo& operator=(const PartsInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PartsInfo& operator=(PartsInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PartsInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PartsInfo* internal_default_instance() {
    return reinterpret_cast<const PartsInfo*>(
               &_PartsInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PartsInfo& a, PartsInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PartsInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PartsInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PartsInfo* New() const final {
    return new PartsInfo();
  }

  PartsInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PartsInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PartsInfo& from);
  void MergeFrom(const PartsInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PartsInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.PartsInfo";
  }
  protected:
  explicit PartsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartsFieldNumber = 1,
    kGradeFieldNumber = 2,
  };
  // .Protocol.Parts parts = 1;
  void clear_parts();
  ::Protocol::Parts parts() const;
  void set_parts(::Protocol::Parts value);
  private:
  ::Protocol::Parts _internal_parts() const;
  void _internal_set_parts(::Protocol::Parts value);
  public:

  // uint32 grade = 2;
  void clear_grade();
  ::PROTOBUF_NAMESPACE_ID::uint32 grade() const;
  void set_grade(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_grade() const;
  void _internal_set_grade(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.PartsInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int parts_;
  ::PROTOBUF_NAMESPACE_ID::uint32 grade_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class PartsList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.PartsList) */ {
 public:
  inline PartsList() : PartsList(nullptr) {}
  ~PartsList() override;
  explicit constexpr PartsList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PartsList(const PartsList& from);
  PartsList(PartsList&& from) noexcept
    : PartsList() {
    *this = ::std::move(from);
  }

  inline PartsList& operator=(const PartsList& from) {
    CopyFrom(from);
    return *this;
  }
  inline PartsList& operator=(PartsList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PartsList& default_instance() {
    return *internal_default_instance();
  }
  static inline const PartsList* internal_default_instance() {
    return reinterpret_cast<const PartsList*>(
               &_PartsList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PartsList& a, PartsList& b) {
    a.Swap(&b);
  }
  inline void Swap(PartsList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PartsList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PartsList* New() const final {
    return new PartsList();
  }

  PartsList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PartsList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PartsList& from);
  void MergeFrom(const PartsList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PartsList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.PartsList";
  }
  protected:
  explicit PartsList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartsFieldNumber = 1,
  };
  // repeated .Protocol.PartsInfo parts = 1;
  int parts_size() const;
  private:
  int _internal_parts_size() const;
  public:
  void clear_parts();
  ::Protocol::PartsInfo* mutable_parts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PartsInfo >*
      mutable_parts();
  private:
  const ::Protocol::PartsInfo& _internal_parts(int index) const;
  ::Protocol::PartsInfo* _internal_add_parts();
  public:
  const ::Protocol::PartsInfo& parts(int index) const;
  ::Protocol::PartsInfo* add_parts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PartsInfo >&
      parts() const;

  // @@protoc_insertion_point(class_scope:Protocol.PartsList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PartsInfo > parts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class PlayerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.PlayerInfo) */ {
 public:
  inline PlayerInfo() : PlayerInfo(nullptr) {}
  ~PlayerInfo() override;
  explicit constexpr PlayerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerInfo(const PlayerInfo& from);
  PlayerInfo(PlayerInfo&& from) noexcept
    : PlayerInfo() {
    *this = ::std::move(from);
  }

  inline PlayerInfo& operator=(const PlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerInfo& operator=(PlayerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerInfo* internal_default_instance() {
    return reinterpret_cast<const PlayerInfo*>(
               &_PlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PlayerInfo& a, PlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerInfo* New() const final {
    return new PlayerInfo();
  }

  PlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerInfo& from);
  void MergeFrom(const PlayerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.PlayerInfo";
  }
  protected:
  explicit PlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatsFieldNumber = 3,
    kPartsListFieldNumber = 4,
    kIdFieldNumber = 1,
    kIndexFieldNumber = 2,
    kGoldFieldNumber = 5,
    kCurrentHealthPointFieldNumber = 6,
    kIsDieFieldNumber = 7,
    kKillFieldNumber = 20,
    kDeathFieldNumber = 30,
    kRoundRankFieldNumber = 40,
    kTotalGoldFieldNumber = 50,
  };
  // .Protocol.Stats stats = 3;
  bool has_stats() const;
  private:
  bool _internal_has_stats() const;
  public:
  void clear_stats();
  const ::Protocol::Stats& stats() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::Stats* release_stats();
  ::Protocol::Stats* mutable_stats();
  void set_allocated_stats(::Protocol::Stats* stats);
  private:
  const ::Protocol::Stats& _internal_stats() const;
  ::Protocol::Stats* _internal_mutable_stats();
  public:
  void unsafe_arena_set_allocated_stats(
      ::Protocol::Stats* stats);
  ::Protocol::Stats* unsafe_arena_release_stats();

  // .Protocol.PartsList partsList = 4;
  bool has_partslist() const;
  private:
  bool _internal_has_partslist() const;
  public:
  void clear_partslist();
  const ::Protocol::PartsList& partslist() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::PartsList* release_partslist();
  ::Protocol::PartsList* mutable_partslist();
  void set_allocated_partslist(::Protocol::PartsList* partslist);
  private:
  const ::Protocol::PartsList& _internal_partslist() const;
  ::Protocol::PartsList* _internal_mutable_partslist();
  public:
  void unsafe_arena_set_allocated_partslist(
      ::Protocol::PartsList* partslist);
  ::Protocol::PartsList* unsafe_arena_release_partslist();

  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 index = 2;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 gold = 5;
  void clear_gold();
  ::PROTOBUF_NAMESPACE_ID::int32 gold() const;
  void set_gold(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gold() const;
  void _internal_set_gold(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 currentHealthPoint = 6;
  void clear_currenthealthpoint();
  ::PROTOBUF_NAMESPACE_ID::int32 currenthealthpoint() const;
  void set_currenthealthpoint(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_currenthealthpoint() const;
  void _internal_set_currenthealthpoint(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool isDie = 7;
  void clear_isdie();
  bool isdie() const;
  void set_isdie(bool value);
  private:
  bool _internal_isdie() const;
  void _internal_set_isdie(bool value);
  public:

  // uint32 kill = 20;
  void clear_kill();
  ::PROTOBUF_NAMESPACE_ID::uint32 kill() const;
  void set_kill(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_kill() const;
  void _internal_set_kill(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 death = 30;
  void clear_death();
  ::PROTOBUF_NAMESPACE_ID::uint32 death() const;
  void set_death(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_death() const;
  void _internal_set_death(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 roundRank = 40;
  void clear_roundrank();
  ::PROTOBUF_NAMESPACE_ID::uint32 roundrank() const;
  void set_roundrank(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_roundrank() const;
  void _internal_set_roundrank(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 totalGold = 50;
  void clear_totalgold();
  ::PROTOBUF_NAMESPACE_ID::int32 totalgold() const;
  void set_totalgold(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_totalgold() const;
  void _internal_set_totalgold(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.PlayerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::Stats* stats_;
  ::Protocol::PartsList* partslist_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_;
  ::PROTOBUF_NAMESPACE_ID::int32 gold_;
  ::PROTOBUF_NAMESPACE_ID::int32 currenthealthpoint_;
  bool isdie_;
  ::PROTOBUF_NAMESPACE_ID::uint32 kill_;
  ::PROTOBUF_NAMESPACE_ID::uint32 death_;
  ::PROTOBUF_NAMESPACE_ID::uint32 roundrank_;
  ::PROTOBUF_NAMESPACE_ID::int32 totalgold_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class Transform_Position final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.Transform.Position) */ {
 public:
  inline Transform_Position() : Transform_Position(nullptr) {}
  ~Transform_Position() override;
  explicit constexpr Transform_Position(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Transform_Position(const Transform_Position& from);
  Transform_Position(Transform_Position&& from) noexcept
    : Transform_Position() {
    *this = ::std::move(from);
  }

  inline Transform_Position& operator=(const Transform_Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transform_Position& operator=(Transform_Position&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Transform_Position& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transform_Position* internal_default_instance() {
    return reinterpret_cast<const Transform_Position*>(
               &_Transform_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Transform_Position& a, Transform_Position& b) {
    a.Swap(&b);
  }
  inline void Swap(Transform_Position* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transform_Position* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transform_Position* New() const final {
    return new Transform_Position();
  }

  Transform_Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transform_Position>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transform_Position& from);
  void MergeFrom(const Transform_Position& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transform_Position* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.Transform.Position";
  }
  protected:
  explicit Transform_Position(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.Transform.Position)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class Transform_Quaternion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.Transform.Quaternion) */ {
 public:
  inline Transform_Quaternion() : Transform_Quaternion(nullptr) {}
  ~Transform_Quaternion() override;
  explicit constexpr Transform_Quaternion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Transform_Quaternion(const Transform_Quaternion& from);
  Transform_Quaternion(Transform_Quaternion&& from) noexcept
    : Transform_Quaternion() {
    *this = ::std::move(from);
  }

  inline Transform_Quaternion& operator=(const Transform_Quaternion& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transform_Quaternion& operator=(Transform_Quaternion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Transform_Quaternion& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transform_Quaternion* internal_default_instance() {
    return reinterpret_cast<const Transform_Quaternion*>(
               &_Transform_Quaternion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Transform_Quaternion& a, Transform_Quaternion& b) {
    a.Swap(&b);
  }
  inline void Swap(Transform_Quaternion* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transform_Quaternion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transform_Quaternion* New() const final {
    return new Transform_Quaternion();
  }

  Transform_Quaternion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transform_Quaternion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transform_Quaternion& from);
  void MergeFrom(const Transform_Quaternion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transform_Quaternion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.Transform.Quaternion";
  }
  protected:
  explicit Transform_Quaternion(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kZFieldNumber = 4,
  };
  // float w = 1;
  void clear_w();
  float w() const;
  void set_w(float value);
  private:
  float _internal_w() const;
  void _internal_set_w(float value);
  public:

  // float x = 2;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 3;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 4;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.Transform.Quaternion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float w_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class Transform final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.Transform) */ {
 public:
  inline Transform() : Transform(nullptr) {}
  ~Transform() override;
  explicit constexpr Transform(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Transform(const Transform& from);
  Transform(Transform&& from) noexcept
    : Transform() {
    *this = ::std::move(from);
  }

  inline Transform& operator=(const Transform& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transform& operator=(Transform&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Transform& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transform* internal_default_instance() {
    return reinterpret_cast<const Transform*>(
               &_Transform_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Transform& a, Transform& b) {
    a.Swap(&b);
  }
  inline void Swap(Transform* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transform* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transform* New() const final {
    return new Transform();
  }

  Transform* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transform>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transform& from);
  void MergeFrom(const Transform& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transform* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.Transform";
  }
  protected:
  explicit Transform(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Transform_Position Position;
  typedef Transform_Quaternion Quaternion;

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kQuaternionFieldNumber = 2,
  };
  // .Protocol.Transform.Position position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::Protocol::Transform_Position& position() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::Transform_Position* release_position();
  ::Protocol::Transform_Position* mutable_position();
  void set_allocated_position(::Protocol::Transform_Position* position);
  private:
  const ::Protocol::Transform_Position& _internal_position() const;
  ::Protocol::Transform_Position* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::Protocol::Transform_Position* position);
  ::Protocol::Transform_Position* unsafe_arena_release_position();

  // .Protocol.Transform.Quaternion quaternion = 2;
  bool has_quaternion() const;
  private:
  bool _internal_has_quaternion() const;
  public:
  void clear_quaternion();
  const ::Protocol::Transform_Quaternion& quaternion() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::Transform_Quaternion* release_quaternion();
  ::Protocol::Transform_Quaternion* mutable_quaternion();
  void set_allocated_quaternion(::Protocol::Transform_Quaternion* quaternion);
  private:
  const ::Protocol::Transform_Quaternion& _internal_quaternion() const;
  ::Protocol::Transform_Quaternion* _internal_mutable_quaternion();
  public:
  void unsafe_arena_set_allocated_quaternion(
      ::Protocol::Transform_Quaternion* quaternion);
  ::Protocol::Transform_Quaternion* unsafe_arena_release_quaternion();

  // @@protoc_insertion_point(class_scope:Protocol.Transform)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::Transform_Position* position_;
  ::Protocol::Transform_Quaternion* quaternion_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class PlayersTransform final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.PlayersTransform) */ {
 public:
  inline PlayersTransform() : PlayersTransform(nullptr) {}
  ~PlayersTransform() override;
  explicit constexpr PlayersTransform(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayersTransform(const PlayersTransform& from);
  PlayersTransform(PlayersTransform&& from) noexcept
    : PlayersTransform() {
    *this = ::std::move(from);
  }

  inline PlayersTransform& operator=(const PlayersTransform& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayersTransform& operator=(PlayersTransform&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayersTransform& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayersTransform* internal_default_instance() {
    return reinterpret_cast<const PlayersTransform*>(
               &_PlayersTransform_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PlayersTransform& a, PlayersTransform& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayersTransform* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayersTransform* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayersTransform* New() const final {
    return new PlayersTransform();
  }

  PlayersTransform* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayersTransform>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayersTransform& from);
  void MergeFrom(const PlayersTransform& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayersTransform* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.PlayersTransform";
  }
  protected:
  explicit PlayersTransform(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransformFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // .Protocol.Transform transform = 2;
  bool has_transform() const;
  private:
  bool _internal_has_transform() const;
  public:
  void clear_transform();
  const ::Protocol::Transform& transform() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::Transform* release_transform();
  ::Protocol::Transform* mutable_transform();
  void set_allocated_transform(::Protocol::Transform* transform);
  private:
  const ::Protocol::Transform& _internal_transform() const;
  ::Protocol::Transform* _internal_mutable_transform();
  public:
  void unsafe_arena_set_allocated_transform(
      ::Protocol::Transform* transform);
  ::Protocol::Transform* unsafe_arena_release_transform();

  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.PlayersTransform)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::Transform* transform_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Player

// uint64 id = 1;
inline void Player::clear_id() {
  id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Player::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Player::id() const {
  // @@protoc_insertion_point(field_get:Protocol.Player.id)
  return _internal_id();
}
inline void Player::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void Player::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.Player.id)
}

// uint32 index = 2;
inline void Player::clear_index() {
  index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Player::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Player::index() const {
  // @@protoc_insertion_point(field_get:Protocol.Player.index)
  return _internal_index();
}
inline void Player::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  index_ = value;
}
inline void Player::set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:Protocol.Player.index)
}

// -------------------------------------------------------------------

// RoomInfo

// .Protocol.RoomState state = 1;
inline void RoomInfo::clear_state() {
  state_ = 0;
}
inline ::Protocol::RoomState RoomInfo::_internal_state() const {
  return static_cast< ::Protocol::RoomState >(state_);
}
inline ::Protocol::RoomState RoomInfo::state() const {
  // @@protoc_insertion_point(field_get:Protocol.RoomInfo.state)
  return _internal_state();
}
inline void RoomInfo::_internal_set_state(::Protocol::RoomState value) {
  
  state_ = value;
}
inline void RoomInfo::set_state(::Protocol::RoomState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:Protocol.RoomInfo.state)
}

// uint32 roomCode = 2;
inline void RoomInfo::clear_roomcode() {
  roomcode_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoomInfo::_internal_roomcode() const {
  return roomcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoomInfo::roomcode() const {
  // @@protoc_insertion_point(field_get:Protocol.RoomInfo.roomCode)
  return _internal_roomcode();
}
inline void RoomInfo::_internal_set_roomcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  roomcode_ = value;
}
inline void RoomInfo::set_roomcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_roomcode(value);
  // @@protoc_insertion_point(field_set:Protocol.RoomInfo.roomCode)
}

// uint32 roundKill = 3;
inline void RoomInfo::clear_roundkill() {
  roundkill_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoomInfo::_internal_roundkill() const {
  return roundkill_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoomInfo::roundkill() const {
  // @@protoc_insertion_point(field_get:Protocol.RoomInfo.roundKill)
  return _internal_roundkill();
}
inline void RoomInfo::_internal_set_roundkill(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  roundkill_ = value;
}
inline void RoomInfo::set_roundkill(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_roundkill(value);
  // @@protoc_insertion_point(field_set:Protocol.RoomInfo.roundKill)
}

// uint32 roundTime = 4;
inline void RoomInfo::clear_roundtime() {
  roundtime_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoomInfo::_internal_roundtime() const {
  return roundtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoomInfo::roundtime() const {
  // @@protoc_insertion_point(field_get:Protocol.RoomInfo.roundTime)
  return _internal_roundtime();
}
inline void RoomInfo::_internal_set_roundtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  roundtime_ = value;
}
inline void RoomInfo::set_roundtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_roundtime(value);
  // @@protoc_insertion_point(field_set:Protocol.RoomInfo.roundTime)
}

// -------------------------------------------------------------------

// RoundInfo

// .Protocol.RoundState state = 1;
inline void RoundInfo::clear_state() {
  state_ = 0;
}
inline ::Protocol::RoundState RoundInfo::_internal_state() const {
  return static_cast< ::Protocol::RoundState >(state_);
}
inline ::Protocol::RoundState RoundInfo::state() const {
  // @@protoc_insertion_point(field_get:Protocol.RoundInfo.state)
  return _internal_state();
}
inline void RoundInfo::_internal_set_state(::Protocol::RoundState value) {
  
  state_ = value;
}
inline void RoundInfo::set_state(::Protocol::RoundState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:Protocol.RoundInfo.state)
}

// uint32 time = 2;
inline void RoundInfo::clear_time() {
  time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoundInfo::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoundInfo::time() const {
  // @@protoc_insertion_point(field_get:Protocol.RoundInfo.time)
  return _internal_time();
}
inline void RoundInfo::_internal_set_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  time_ = value;
}
inline void RoundInfo::set_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:Protocol.RoundInfo.time)
}

// -------------------------------------------------------------------

// Stats

// .Protocol.Vgun vGun = 1;
inline void Stats::clear_vgun() {
  vgun_ = 0;
}
inline ::Protocol::Vgun Stats::_internal_vgun() const {
  return static_cast< ::Protocol::Vgun >(vgun_);
}
inline ::Protocol::Vgun Stats::vgun() const {
  // @@protoc_insertion_point(field_get:Protocol.Stats.vGun)
  return _internal_vgun();
}
inline void Stats::_internal_set_vgun(::Protocol::Vgun value) {
  
  vgun_ = value;
}
inline void Stats::set_vgun(::Protocol::Vgun value) {
  _internal_set_vgun(value);
  // @@protoc_insertion_point(field_set:Protocol.Stats.vGun)
}

// uint32 damageHead = 2;
inline void Stats::clear_damagehead() {
  damagehead_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Stats::_internal_damagehead() const {
  return damagehead_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Stats::damagehead() const {
  // @@protoc_insertion_point(field_get:Protocol.Stats.damageHead)
  return _internal_damagehead();
}
inline void Stats::_internal_set_damagehead(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  damagehead_ = value;
}
inline void Stats::set_damagehead(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_damagehead(value);
  // @@protoc_insertion_point(field_set:Protocol.Stats.damageHead)
}

// uint32 damageBody = 3;
inline void Stats::clear_damagebody() {
  damagebody_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Stats::_internal_damagebody() const {
  return damagebody_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Stats::damagebody() const {
  // @@protoc_insertion_point(field_get:Protocol.Stats.damageBody)
  return _internal_damagebody();
}
inline void Stats::_internal_set_damagebody(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  damagebody_ = value;
}
inline void Stats::set_damagebody(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_damagebody(value);
  // @@protoc_insertion_point(field_set:Protocol.Stats.damageBody)
}

// uint32 damageLeg = 4;
inline void Stats::clear_damageleg() {
  damageleg_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Stats::_internal_damageleg() const {
  return damageleg_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Stats::damageleg() const {
  // @@protoc_insertion_point(field_get:Protocol.Stats.damageLeg)
  return _internal_damageleg();
}
inline void Stats::_internal_set_damageleg(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  damageleg_ = value;
}
inline void Stats::set_damageleg(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_damageleg(value);
  // @@protoc_insertion_point(field_set:Protocol.Stats.damageLeg)
}

// float fireRate = 5;
inline void Stats::clear_firerate() {
  firerate_ = 0;
}
inline float Stats::_internal_firerate() const {
  return firerate_;
}
inline float Stats::firerate() const {
  // @@protoc_insertion_point(field_get:Protocol.Stats.fireRate)
  return _internal_firerate();
}
inline void Stats::_internal_set_firerate(float value) {
  
  firerate_ = value;
}
inline void Stats::set_firerate(float value) {
  _internal_set_firerate(value);
  // @@protoc_insertion_point(field_set:Protocol.Stats.fireRate)
}

// float reloadTime = 6;
inline void Stats::clear_reloadtime() {
  reloadtime_ = 0;
}
inline float Stats::_internal_reloadtime() const {
  return reloadtime_;
}
inline float Stats::reloadtime() const {
  // @@protoc_insertion_point(field_get:Protocol.Stats.reloadTime)
  return _internal_reloadtime();
}
inline void Stats::_internal_set_reloadtime(float value) {
  
  reloadtime_ = value;
}
inline void Stats::set_reloadtime(float value) {
  _internal_set_reloadtime(value);
  // @@protoc_insertion_point(field_set:Protocol.Stats.reloadTime)
}

// float moveSpeed = 7;
inline void Stats::clear_movespeed() {
  movespeed_ = 0;
}
inline float Stats::_internal_movespeed() const {
  return movespeed_;
}
inline float Stats::movespeed() const {
  // @@protoc_insertion_point(field_get:Protocol.Stats.moveSpeed)
  return _internal_movespeed();
}
inline void Stats::_internal_set_movespeed(float value) {
  
  movespeed_ = value;
}
inline void Stats::set_movespeed(float value) {
  _internal_set_movespeed(value);
  // @@protoc_insertion_point(field_set:Protocol.Stats.moveSpeed)
}

// uint32 bulletCapacity = 8;
inline void Stats::clear_bulletcapacity() {
  bulletcapacity_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Stats::_internal_bulletcapacity() const {
  return bulletcapacity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Stats::bulletcapacity() const {
  // @@protoc_insertion_point(field_get:Protocol.Stats.bulletCapacity)
  return _internal_bulletcapacity();
}
inline void Stats::_internal_set_bulletcapacity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  bulletcapacity_ = value;
}
inline void Stats::set_bulletcapacity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bulletcapacity(value);
  // @@protoc_insertion_point(field_set:Protocol.Stats.bulletCapacity)
}

// uint32 recoil = 9;
inline void Stats::clear_recoil() {
  recoil_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Stats::_internal_recoil() const {
  return recoil_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Stats::recoil() const {
  // @@protoc_insertion_point(field_get:Protocol.Stats.recoil)
  return _internal_recoil();
}
inline void Stats::_internal_set_recoil(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  recoil_ = value;
}
inline void Stats::set_recoil(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_recoil(value);
  // @@protoc_insertion_point(field_set:Protocol.Stats.recoil)
}

// uint32 damage = 10;
inline void Stats::clear_damage() {
  damage_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Stats::_internal_damage() const {
  return damage_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Stats::damage() const {
  // @@protoc_insertion_point(field_get:Protocol.Stats.damage)
  return _internal_damage();
}
inline void Stats::_internal_set_damage(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  damage_ = value;
}
inline void Stats::set_damage(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_damage(value);
  // @@protoc_insertion_point(field_set:Protocol.Stats.damage)
}

// int32 extraJumpCount = 11;
inline void Stats::clear_extrajumpcount() {
  extrajumpcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Stats::_internal_extrajumpcount() const {
  return extrajumpcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Stats::extrajumpcount() const {
  // @@protoc_insertion_point(field_get:Protocol.Stats.extraJumpCount)
  return _internal_extrajumpcount();
}
inline void Stats::_internal_set_extrajumpcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  extrajumpcount_ = value;
}
inline void Stats::set_extrajumpcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_extrajumpcount(value);
  // @@protoc_insertion_point(field_set:Protocol.Stats.extraJumpCount)
}

// int32 healthPoint = 12;
inline void Stats::clear_healthpoint() {
  healthpoint_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Stats::_internal_healthpoint() const {
  return healthpoint_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Stats::healthpoint() const {
  // @@protoc_insertion_point(field_get:Protocol.Stats.healthPoint)
  return _internal_healthpoint();
}
inline void Stats::_internal_set_healthpoint(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  healthpoint_ = value;
}
inline void Stats::set_healthpoint(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_healthpoint(value);
  // @@protoc_insertion_point(field_set:Protocol.Stats.healthPoint)
}

// -------------------------------------------------------------------

// PartsInfo

// .Protocol.Parts parts = 1;
inline void PartsInfo::clear_parts() {
  parts_ = 0;
}
inline ::Protocol::Parts PartsInfo::_internal_parts() const {
  return static_cast< ::Protocol::Parts >(parts_);
}
inline ::Protocol::Parts PartsInfo::parts() const {
  // @@protoc_insertion_point(field_get:Protocol.PartsInfo.parts)
  return _internal_parts();
}
inline void PartsInfo::_internal_set_parts(::Protocol::Parts value) {
  
  parts_ = value;
}
inline void PartsInfo::set_parts(::Protocol::Parts value) {
  _internal_set_parts(value);
  // @@protoc_insertion_point(field_set:Protocol.PartsInfo.parts)
}

// uint32 grade = 2;
inline void PartsInfo::clear_grade() {
  grade_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PartsInfo::_internal_grade() const {
  return grade_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PartsInfo::grade() const {
  // @@protoc_insertion_point(field_get:Protocol.PartsInfo.grade)
  return _internal_grade();
}
inline void PartsInfo::_internal_set_grade(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  grade_ = value;
}
inline void PartsInfo::set_grade(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_grade(value);
  // @@protoc_insertion_point(field_set:Protocol.PartsInfo.grade)
}

// -------------------------------------------------------------------

// PartsList

// repeated .Protocol.PartsInfo parts = 1;
inline int PartsList::_internal_parts_size() const {
  return parts_.size();
}
inline int PartsList::parts_size() const {
  return _internal_parts_size();
}
inline void PartsList::clear_parts() {
  parts_.Clear();
}
inline ::Protocol::PartsInfo* PartsList::mutable_parts(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.PartsList.parts)
  return parts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PartsInfo >*
PartsList::mutable_parts() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.PartsList.parts)
  return &parts_;
}
inline const ::Protocol::PartsInfo& PartsList::_internal_parts(int index) const {
  return parts_.Get(index);
}
inline const ::Protocol::PartsInfo& PartsList::parts(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.PartsList.parts)
  return _internal_parts(index);
}
inline ::Protocol::PartsInfo* PartsList::_internal_add_parts() {
  return parts_.Add();
}
inline ::Protocol::PartsInfo* PartsList::add_parts() {
  // @@protoc_insertion_point(field_add:Protocol.PartsList.parts)
  return _internal_add_parts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PartsInfo >&
PartsList::parts() const {
  // @@protoc_insertion_point(field_list:Protocol.PartsList.parts)
  return parts_;
}

// -------------------------------------------------------------------

// PlayerInfo

// uint64 id = 1;
inline void PlayerInfo::clear_id() {
  id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PlayerInfo::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PlayerInfo::id() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerInfo.id)
  return _internal_id();
}
inline void PlayerInfo::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void PlayerInfo::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.PlayerInfo.id)
}

// uint32 index = 2;
inline void PlayerInfo::clear_index() {
  index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerInfo::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerInfo::index() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerInfo.index)
  return _internal_index();
}
inline void PlayerInfo::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  index_ = value;
}
inline void PlayerInfo::set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:Protocol.PlayerInfo.index)
}

// .Protocol.Stats stats = 3;
inline bool PlayerInfo::_internal_has_stats() const {
  return this != internal_default_instance() && stats_ != nullptr;
}
inline bool PlayerInfo::has_stats() const {
  return _internal_has_stats();
}
inline void PlayerInfo::clear_stats() {
  if (GetArenaForAllocation() == nullptr && stats_ != nullptr) {
    delete stats_;
  }
  stats_ = nullptr;
}
inline const ::Protocol::Stats& PlayerInfo::_internal_stats() const {
  const ::Protocol::Stats* p = stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Stats&>(
      ::Protocol::_Stats_default_instance_);
}
inline const ::Protocol::Stats& PlayerInfo::stats() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerInfo.stats)
  return _internal_stats();
}
inline void PlayerInfo::unsafe_arena_set_allocated_stats(
    ::Protocol::Stats* stats) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stats_);
  }
  stats_ = stats;
  if (stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.PlayerInfo.stats)
}
inline ::Protocol::Stats* PlayerInfo::release_stats() {
  
  ::Protocol::Stats* temp = stats_;
  stats_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::Stats* PlayerInfo::unsafe_arena_release_stats() {
  // @@protoc_insertion_point(field_release:Protocol.PlayerInfo.stats)
  
  ::Protocol::Stats* temp = stats_;
  stats_ = nullptr;
  return temp;
}
inline ::Protocol::Stats* PlayerInfo::_internal_mutable_stats() {
  
  if (stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Stats>(GetArenaForAllocation());
    stats_ = p;
  }
  return stats_;
}
inline ::Protocol::Stats* PlayerInfo::mutable_stats() {
  // @@protoc_insertion_point(field_mutable:Protocol.PlayerInfo.stats)
  return _internal_mutable_stats();
}
inline void PlayerInfo::set_allocated_stats(::Protocol::Stats* stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete stats_;
  }
  if (stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Protocol::Stats>::GetOwningArena(stats);
    if (message_arena != submessage_arena) {
      stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stats, submessage_arena);
    }
    
  } else {
    
  }
  stats_ = stats;
  // @@protoc_insertion_point(field_set_allocated:Protocol.PlayerInfo.stats)
}

// .Protocol.PartsList partsList = 4;
inline bool PlayerInfo::_internal_has_partslist() const {
  return this != internal_default_instance() && partslist_ != nullptr;
}
inline bool PlayerInfo::has_partslist() const {
  return _internal_has_partslist();
}
inline void PlayerInfo::clear_partslist() {
  if (GetArenaForAllocation() == nullptr && partslist_ != nullptr) {
    delete partslist_;
  }
  partslist_ = nullptr;
}
inline const ::Protocol::PartsList& PlayerInfo::_internal_partslist() const {
  const ::Protocol::PartsList* p = partslist_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PartsList&>(
      ::Protocol::_PartsList_default_instance_);
}
inline const ::Protocol::PartsList& PlayerInfo::partslist() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerInfo.partsList)
  return _internal_partslist();
}
inline void PlayerInfo::unsafe_arena_set_allocated_partslist(
    ::Protocol::PartsList* partslist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(partslist_);
  }
  partslist_ = partslist;
  if (partslist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.PlayerInfo.partsList)
}
inline ::Protocol::PartsList* PlayerInfo::release_partslist() {
  
  ::Protocol::PartsList* temp = partslist_;
  partslist_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::PartsList* PlayerInfo::unsafe_arena_release_partslist() {
  // @@protoc_insertion_point(field_release:Protocol.PlayerInfo.partsList)
  
  ::Protocol::PartsList* temp = partslist_;
  partslist_ = nullptr;
  return temp;
}
inline ::Protocol::PartsList* PlayerInfo::_internal_mutable_partslist() {
  
  if (partslist_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PartsList>(GetArenaForAllocation());
    partslist_ = p;
  }
  return partslist_;
}
inline ::Protocol::PartsList* PlayerInfo::mutable_partslist() {
  // @@protoc_insertion_point(field_mutable:Protocol.PlayerInfo.partsList)
  return _internal_mutable_partslist();
}
inline void PlayerInfo::set_allocated_partslist(::Protocol::PartsList* partslist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete partslist_;
  }
  if (partslist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Protocol::PartsList>::GetOwningArena(partslist);
    if (message_arena != submessage_arena) {
      partslist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, partslist, submessage_arena);
    }
    
  } else {
    
  }
  partslist_ = partslist;
  // @@protoc_insertion_point(field_set_allocated:Protocol.PlayerInfo.partsList)
}

// int32 gold = 5;
inline void PlayerInfo::clear_gold() {
  gold_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::_internal_gold() const {
  return gold_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::gold() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerInfo.gold)
  return _internal_gold();
}
inline void PlayerInfo::_internal_set_gold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gold_ = value;
}
inline void PlayerInfo::set_gold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gold(value);
  // @@protoc_insertion_point(field_set:Protocol.PlayerInfo.gold)
}

// int32 currentHealthPoint = 6;
inline void PlayerInfo::clear_currenthealthpoint() {
  currenthealthpoint_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::_internal_currenthealthpoint() const {
  return currenthealthpoint_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::currenthealthpoint() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerInfo.currentHealthPoint)
  return _internal_currenthealthpoint();
}
inline void PlayerInfo::_internal_set_currenthealthpoint(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  currenthealthpoint_ = value;
}
inline void PlayerInfo::set_currenthealthpoint(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_currenthealthpoint(value);
  // @@protoc_insertion_point(field_set:Protocol.PlayerInfo.currentHealthPoint)
}

// bool isDie = 7;
inline void PlayerInfo::clear_isdie() {
  isdie_ = false;
}
inline bool PlayerInfo::_internal_isdie() const {
  return isdie_;
}
inline bool PlayerInfo::isdie() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerInfo.isDie)
  return _internal_isdie();
}
inline void PlayerInfo::_internal_set_isdie(bool value) {
  
  isdie_ = value;
}
inline void PlayerInfo::set_isdie(bool value) {
  _internal_set_isdie(value);
  // @@protoc_insertion_point(field_set:Protocol.PlayerInfo.isDie)
}

// uint32 kill = 20;
inline void PlayerInfo::clear_kill() {
  kill_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerInfo::_internal_kill() const {
  return kill_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerInfo::kill() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerInfo.kill)
  return _internal_kill();
}
inline void PlayerInfo::_internal_set_kill(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  kill_ = value;
}
inline void PlayerInfo::set_kill(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_kill(value);
  // @@protoc_insertion_point(field_set:Protocol.PlayerInfo.kill)
}

// uint32 death = 30;
inline void PlayerInfo::clear_death() {
  death_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerInfo::_internal_death() const {
  return death_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerInfo::death() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerInfo.death)
  return _internal_death();
}
inline void PlayerInfo::_internal_set_death(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  death_ = value;
}
inline void PlayerInfo::set_death(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_death(value);
  // @@protoc_insertion_point(field_set:Protocol.PlayerInfo.death)
}

// uint32 roundRank = 40;
inline void PlayerInfo::clear_roundrank() {
  roundrank_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerInfo::_internal_roundrank() const {
  return roundrank_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerInfo::roundrank() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerInfo.roundRank)
  return _internal_roundrank();
}
inline void PlayerInfo::_internal_set_roundrank(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  roundrank_ = value;
}
inline void PlayerInfo::set_roundrank(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_roundrank(value);
  // @@protoc_insertion_point(field_set:Protocol.PlayerInfo.roundRank)
}

// int32 totalGold = 50;
inline void PlayerInfo::clear_totalgold() {
  totalgold_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::_internal_totalgold() const {
  return totalgold_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::totalgold() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerInfo.totalGold)
  return _internal_totalgold();
}
inline void PlayerInfo::_internal_set_totalgold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  totalgold_ = value;
}
inline void PlayerInfo::set_totalgold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_totalgold(value);
  // @@protoc_insertion_point(field_set:Protocol.PlayerInfo.totalGold)
}

// -------------------------------------------------------------------

// Transform_Position

// float x = 1;
inline void Transform_Position::clear_x() {
  x_ = 0;
}
inline float Transform_Position::_internal_x() const {
  return x_;
}
inline float Transform_Position::x() const {
  // @@protoc_insertion_point(field_get:Protocol.Transform.Position.x)
  return _internal_x();
}
inline void Transform_Position::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Transform_Position::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Protocol.Transform.Position.x)
}

// float y = 2;
inline void Transform_Position::clear_y() {
  y_ = 0;
}
inline float Transform_Position::_internal_y() const {
  return y_;
}
inline float Transform_Position::y() const {
  // @@protoc_insertion_point(field_get:Protocol.Transform.Position.y)
  return _internal_y();
}
inline void Transform_Position::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Transform_Position::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Protocol.Transform.Position.y)
}

// float z = 3;
inline void Transform_Position::clear_z() {
  z_ = 0;
}
inline float Transform_Position::_internal_z() const {
  return z_;
}
inline float Transform_Position::z() const {
  // @@protoc_insertion_point(field_get:Protocol.Transform.Position.z)
  return _internal_z();
}
inline void Transform_Position::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Transform_Position::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Protocol.Transform.Position.z)
}

// -------------------------------------------------------------------

// Transform_Quaternion

// float w = 1;
inline void Transform_Quaternion::clear_w() {
  w_ = 0;
}
inline float Transform_Quaternion::_internal_w() const {
  return w_;
}
inline float Transform_Quaternion::w() const {
  // @@protoc_insertion_point(field_get:Protocol.Transform.Quaternion.w)
  return _internal_w();
}
inline void Transform_Quaternion::_internal_set_w(float value) {
  
  w_ = value;
}
inline void Transform_Quaternion::set_w(float value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:Protocol.Transform.Quaternion.w)
}

// float x = 2;
inline void Transform_Quaternion::clear_x() {
  x_ = 0;
}
inline float Transform_Quaternion::_internal_x() const {
  return x_;
}
inline float Transform_Quaternion::x() const {
  // @@protoc_insertion_point(field_get:Protocol.Transform.Quaternion.x)
  return _internal_x();
}
inline void Transform_Quaternion::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Transform_Quaternion::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Protocol.Transform.Quaternion.x)
}

// float y = 3;
inline void Transform_Quaternion::clear_y() {
  y_ = 0;
}
inline float Transform_Quaternion::_internal_y() const {
  return y_;
}
inline float Transform_Quaternion::y() const {
  // @@protoc_insertion_point(field_get:Protocol.Transform.Quaternion.y)
  return _internal_y();
}
inline void Transform_Quaternion::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Transform_Quaternion::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Protocol.Transform.Quaternion.y)
}

// float z = 4;
inline void Transform_Quaternion::clear_z() {
  z_ = 0;
}
inline float Transform_Quaternion::_internal_z() const {
  return z_;
}
inline float Transform_Quaternion::z() const {
  // @@protoc_insertion_point(field_get:Protocol.Transform.Quaternion.z)
  return _internal_z();
}
inline void Transform_Quaternion::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Transform_Quaternion::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Protocol.Transform.Quaternion.z)
}

// -------------------------------------------------------------------

// Transform

// .Protocol.Transform.Position position = 1;
inline bool Transform::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool Transform::has_position() const {
  return _internal_has_position();
}
inline void Transform::clear_position() {
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::Protocol::Transform_Position& Transform::_internal_position() const {
  const ::Protocol::Transform_Position* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Transform_Position&>(
      ::Protocol::_Transform_Position_default_instance_);
}
inline const ::Protocol::Transform_Position& Transform::position() const {
  // @@protoc_insertion_point(field_get:Protocol.Transform.position)
  return _internal_position();
}
inline void Transform::unsafe_arena_set_allocated_position(
    ::Protocol::Transform_Position* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.Transform.position)
}
inline ::Protocol::Transform_Position* Transform::release_position() {
  
  ::Protocol::Transform_Position* temp = position_;
  position_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::Transform_Position* Transform::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:Protocol.Transform.position)
  
  ::Protocol::Transform_Position* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::Protocol::Transform_Position* Transform::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Transform_Position>(GetArenaForAllocation());
    position_ = p;
  }
  return position_;
}
inline ::Protocol::Transform_Position* Transform::mutable_position() {
  // @@protoc_insertion_point(field_mutable:Protocol.Transform.position)
  return _internal_mutable_position();
}
inline void Transform::set_allocated_position(::Protocol::Transform_Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Protocol::Transform_Position>::GetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:Protocol.Transform.position)
}

// .Protocol.Transform.Quaternion quaternion = 2;
inline bool Transform::_internal_has_quaternion() const {
  return this != internal_default_instance() && quaternion_ != nullptr;
}
inline bool Transform::has_quaternion() const {
  return _internal_has_quaternion();
}
inline void Transform::clear_quaternion() {
  if (GetArenaForAllocation() == nullptr && quaternion_ != nullptr) {
    delete quaternion_;
  }
  quaternion_ = nullptr;
}
inline const ::Protocol::Transform_Quaternion& Transform::_internal_quaternion() const {
  const ::Protocol::Transform_Quaternion* p = quaternion_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Transform_Quaternion&>(
      ::Protocol::_Transform_Quaternion_default_instance_);
}
inline const ::Protocol::Transform_Quaternion& Transform::quaternion() const {
  // @@protoc_insertion_point(field_get:Protocol.Transform.quaternion)
  return _internal_quaternion();
}
inline void Transform::unsafe_arena_set_allocated_quaternion(
    ::Protocol::Transform_Quaternion* quaternion) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(quaternion_);
  }
  quaternion_ = quaternion;
  if (quaternion) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.Transform.quaternion)
}
inline ::Protocol::Transform_Quaternion* Transform::release_quaternion() {
  
  ::Protocol::Transform_Quaternion* temp = quaternion_;
  quaternion_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::Transform_Quaternion* Transform::unsafe_arena_release_quaternion() {
  // @@protoc_insertion_point(field_release:Protocol.Transform.quaternion)
  
  ::Protocol::Transform_Quaternion* temp = quaternion_;
  quaternion_ = nullptr;
  return temp;
}
inline ::Protocol::Transform_Quaternion* Transform::_internal_mutable_quaternion() {
  
  if (quaternion_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Transform_Quaternion>(GetArenaForAllocation());
    quaternion_ = p;
  }
  return quaternion_;
}
inline ::Protocol::Transform_Quaternion* Transform::mutable_quaternion() {
  // @@protoc_insertion_point(field_mutable:Protocol.Transform.quaternion)
  return _internal_mutable_quaternion();
}
inline void Transform::set_allocated_quaternion(::Protocol::Transform_Quaternion* quaternion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete quaternion_;
  }
  if (quaternion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Protocol::Transform_Quaternion>::GetOwningArena(quaternion);
    if (message_arena != submessage_arena) {
      quaternion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, quaternion, submessage_arena);
    }
    
  } else {
    
  }
  quaternion_ = quaternion;
  // @@protoc_insertion_point(field_set_allocated:Protocol.Transform.quaternion)
}

// -------------------------------------------------------------------

// PlayersTransform

// uint64 id = 1;
inline void PlayersTransform::clear_id() {
  id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PlayersTransform::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PlayersTransform::id() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayersTransform.id)
  return _internal_id();
}
inline void PlayersTransform::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void PlayersTransform::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.PlayersTransform.id)
}

// .Protocol.Transform transform = 2;
inline bool PlayersTransform::_internal_has_transform() const {
  return this != internal_default_instance() && transform_ != nullptr;
}
inline bool PlayersTransform::has_transform() const {
  return _internal_has_transform();
}
inline void PlayersTransform::clear_transform() {
  if (GetArenaForAllocation() == nullptr && transform_ != nullptr) {
    delete transform_;
  }
  transform_ = nullptr;
}
inline const ::Protocol::Transform& PlayersTransform::_internal_transform() const {
  const ::Protocol::Transform* p = transform_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Transform&>(
      ::Protocol::_Transform_default_instance_);
}
inline const ::Protocol::Transform& PlayersTransform::transform() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayersTransform.transform)
  return _internal_transform();
}
inline void PlayersTransform::unsafe_arena_set_allocated_transform(
    ::Protocol::Transform* transform) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transform_);
  }
  transform_ = transform;
  if (transform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.PlayersTransform.transform)
}
inline ::Protocol::Transform* PlayersTransform::release_transform() {
  
  ::Protocol::Transform* temp = transform_;
  transform_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::Transform* PlayersTransform::unsafe_arena_release_transform() {
  // @@protoc_insertion_point(field_release:Protocol.PlayersTransform.transform)
  
  ::Protocol::Transform* temp = transform_;
  transform_ = nullptr;
  return temp;
}
inline ::Protocol::Transform* PlayersTransform::_internal_mutable_transform() {
  
  if (transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Transform>(GetArenaForAllocation());
    transform_ = p;
  }
  return transform_;
}
inline ::Protocol::Transform* PlayersTransform::mutable_transform() {
  // @@protoc_insertion_point(field_mutable:Protocol.PlayersTransform.transform)
  return _internal_mutable_transform();
}
inline void PlayersTransform::set_allocated_transform(::Protocol::Transform* transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete transform_;
  }
  if (transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Protocol::Transform>::GetOwningArena(transform);
    if (message_arena != submessage_arena) {
      transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transform, submessage_arena);
    }
    
  } else {
    
  }
  transform_ = transform;
  // @@protoc_insertion_point(field_set_allocated:Protocol.PlayersTransform.transform)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto
