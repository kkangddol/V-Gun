// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
#include "Struct.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Protocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Protocol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[33]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Protocol_2eproto;
namespace Protocol {
class C_ATTACK_PLAYER;
struct C_ATTACK_PLAYERDefaultTypeInternal;
extern C_ATTACK_PLAYERDefaultTypeInternal _C_ATTACK_PLAYER_default_instance_;
class C_CHAT;
struct C_CHATDefaultTypeInternal;
extern C_CHATDefaultTypeInternal _C_CHAT_default_instance_;
class C_CREATE_ROOM;
struct C_CREATE_ROOMDefaultTypeInternal;
extern C_CREATE_ROOMDefaultTypeInternal _C_CREATE_ROOM_default_instance_;
class C_ENTER_ROOM;
struct C_ENTER_ROOMDefaultTypeInternal;
extern C_ENTER_ROOMDefaultTypeInternal _C_ENTER_ROOM_default_instance_;
class C_LEAVE_ROOM;
struct C_LEAVE_ROOMDefaultTypeInternal;
extern C_LEAVE_ROOMDefaultTypeInternal _C_LEAVE_ROOM_default_instance_;
class C_LOAD_COMPLETE;
struct C_LOAD_COMPLETEDefaultTypeInternal;
extern C_LOAD_COMPLETEDefaultTypeInternal _C_LOAD_COMPLETE_default_instance_;
class C_LOGIN;
struct C_LOGINDefaultTypeInternal;
extern C_LOGINDefaultTypeInternal _C_LOGIN_default_instance_;
class C_PLAYER_ANIM_STATE;
struct C_PLAYER_ANIM_STATEDefaultTypeInternal;
extern C_PLAYER_ANIM_STATEDefaultTypeInternal _C_PLAYER_ANIM_STATE_default_instance_;
class C_PLAYER_TRANSFORM;
struct C_PLAYER_TRANSFORMDefaultTypeInternal;
extern C_PLAYER_TRANSFORMDefaultTypeInternal _C_PLAYER_TRANSFORM_default_instance_;
class C_REROLL_PARTS;
struct C_REROLL_PARTSDefaultTypeInternal;
extern C_REROLL_PARTSDefaultTypeInternal _C_REROLL_PARTS_default_instance_;
class C_RESPAWN_CLICK;
struct C_RESPAWN_CLICKDefaultTypeInternal;
extern C_RESPAWN_CLICKDefaultTypeInternal _C_RESPAWN_CLICK_default_instance_;
class C_ROOM_SETTING;
struct C_ROOM_SETTINGDefaultTypeInternal;
extern C_ROOM_SETTINGDefaultTypeInternal _C_ROOM_SETTING_default_instance_;
class C_ROOM_START;
struct C_ROOM_STARTDefaultTypeInternal;
extern C_ROOM_STARTDefaultTypeInternal _C_ROOM_START_default_instance_;
class C_SELECT_PARTS;
struct C_SELECT_PARTSDefaultTypeInternal;
extern C_SELECT_PARTSDefaultTypeInternal _C_SELECT_PARTS_default_instance_;
class S_ANOTHER_ENTER_ROOM;
struct S_ANOTHER_ENTER_ROOMDefaultTypeInternal;
extern S_ANOTHER_ENTER_ROOMDefaultTypeInternal _S_ANOTHER_ENTER_ROOM_default_instance_;
class S_ANOTHER_LEAVE_ROOM;
struct S_ANOTHER_LEAVE_ROOMDefaultTypeInternal;
extern S_ANOTHER_LEAVE_ROOMDefaultTypeInternal _S_ANOTHER_LEAVE_ROOM_default_instance_;
class S_ATTACKED_PLAYER;
struct S_ATTACKED_PLAYERDefaultTypeInternal;
extern S_ATTACKED_PLAYERDefaultTypeInternal _S_ATTACKED_PLAYER_default_instance_;
class S_CHAT;
struct S_CHATDefaultTypeInternal;
extern S_CHATDefaultTypeInternal _S_CHAT_default_instance_;
class S_CREATE_ROOM;
struct S_CREATE_ROOMDefaultTypeInternal;
extern S_CREATE_ROOMDefaultTypeInternal _S_CREATE_ROOM_default_instance_;
class S_DEATH_PLAYER;
struct S_DEATH_PLAYERDefaultTypeInternal;
extern S_DEATH_PLAYERDefaultTypeInternal _S_DEATH_PLAYER_default_instance_;
class S_END_GAME;
struct S_END_GAMEDefaultTypeInternal;
extern S_END_GAMEDefaultTypeInternal _S_END_GAME_default_instance_;
class S_ENTER_ROOM;
struct S_ENTER_ROOMDefaultTypeInternal;
extern S_ENTER_ROOMDefaultTypeInternal _S_ENTER_ROOM_default_instance_;
class S_LOGIN;
struct S_LOGINDefaultTypeInternal;
extern S_LOGINDefaultTypeInternal _S_LOGIN_default_instance_;
class S_PLAYERS_TRANSFORM;
struct S_PLAYERS_TRANSFORMDefaultTypeInternal;
extern S_PLAYERS_TRANSFORMDefaultTypeInternal _S_PLAYERS_TRANSFORM_default_instance_;
class S_PLAYER_ANIM_STATE;
struct S_PLAYER_ANIM_STATEDefaultTypeInternal;
extern S_PLAYER_ANIM_STATEDefaultTypeInternal _S_PLAYER_ANIM_STATE_default_instance_;
class S_RESULT_START;
struct S_RESULT_STARTDefaultTypeInternal;
extern S_RESULT_STARTDefaultTypeInternal _S_RESULT_START_default_instance_;
class S_ROOM_SETTING;
struct S_ROOM_SETTINGDefaultTypeInternal;
extern S_ROOM_SETTINGDefaultTypeInternal _S_ROOM_SETTING_default_instance_;
class S_ROOM_START;
struct S_ROOM_STARTDefaultTypeInternal;
extern S_ROOM_STARTDefaultTypeInternal _S_ROOM_START_default_instance_;
class S_ROUND_START;
struct S_ROUND_STARTDefaultTypeInternal;
extern S_ROUND_STARTDefaultTypeInternal _S_ROUND_START_default_instance_;
class S_SELECT_PARTS;
struct S_SELECT_PARTSDefaultTypeInternal;
extern S_SELECT_PARTSDefaultTypeInternal _S_SELECT_PARTS_default_instance_;
class S_SELECT_PARTS_LIST;
struct S_SELECT_PARTS_LISTDefaultTypeInternal;
extern S_SELECT_PARTS_LISTDefaultTypeInternal _S_SELECT_PARTS_LIST_default_instance_;
class S_SHOP_START;
struct S_SHOP_STARTDefaultTypeInternal;
extern S_SHOP_STARTDefaultTypeInternal _S_SHOP_START_default_instance_;
class S_SPAWN_POINT;
struct S_SPAWN_POINTDefaultTypeInternal;
extern S_SPAWN_POINTDefaultTypeInternal _S_SPAWN_POINT_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::C_ATTACK_PLAYER* Arena::CreateMaybeMessage<::Protocol::C_ATTACK_PLAYER>(Arena*);
template<> ::Protocol::C_CHAT* Arena::CreateMaybeMessage<::Protocol::C_CHAT>(Arena*);
template<> ::Protocol::C_CREATE_ROOM* Arena::CreateMaybeMessage<::Protocol::C_CREATE_ROOM>(Arena*);
template<> ::Protocol::C_ENTER_ROOM* Arena::CreateMaybeMessage<::Protocol::C_ENTER_ROOM>(Arena*);
template<> ::Protocol::C_LEAVE_ROOM* Arena::CreateMaybeMessage<::Protocol::C_LEAVE_ROOM>(Arena*);
template<> ::Protocol::C_LOAD_COMPLETE* Arena::CreateMaybeMessage<::Protocol::C_LOAD_COMPLETE>(Arena*);
template<> ::Protocol::C_LOGIN* Arena::CreateMaybeMessage<::Protocol::C_LOGIN>(Arena*);
template<> ::Protocol::C_PLAYER_ANIM_STATE* Arena::CreateMaybeMessage<::Protocol::C_PLAYER_ANIM_STATE>(Arena*);
template<> ::Protocol::C_PLAYER_TRANSFORM* Arena::CreateMaybeMessage<::Protocol::C_PLAYER_TRANSFORM>(Arena*);
template<> ::Protocol::C_REROLL_PARTS* Arena::CreateMaybeMessage<::Protocol::C_REROLL_PARTS>(Arena*);
template<> ::Protocol::C_RESPAWN_CLICK* Arena::CreateMaybeMessage<::Protocol::C_RESPAWN_CLICK>(Arena*);
template<> ::Protocol::C_ROOM_SETTING* Arena::CreateMaybeMessage<::Protocol::C_ROOM_SETTING>(Arena*);
template<> ::Protocol::C_ROOM_START* Arena::CreateMaybeMessage<::Protocol::C_ROOM_START>(Arena*);
template<> ::Protocol::C_SELECT_PARTS* Arena::CreateMaybeMessage<::Protocol::C_SELECT_PARTS>(Arena*);
template<> ::Protocol::S_ANOTHER_ENTER_ROOM* Arena::CreateMaybeMessage<::Protocol::S_ANOTHER_ENTER_ROOM>(Arena*);
template<> ::Protocol::S_ANOTHER_LEAVE_ROOM* Arena::CreateMaybeMessage<::Protocol::S_ANOTHER_LEAVE_ROOM>(Arena*);
template<> ::Protocol::S_ATTACKED_PLAYER* Arena::CreateMaybeMessage<::Protocol::S_ATTACKED_PLAYER>(Arena*);
template<> ::Protocol::S_CHAT* Arena::CreateMaybeMessage<::Protocol::S_CHAT>(Arena*);
template<> ::Protocol::S_CREATE_ROOM* Arena::CreateMaybeMessage<::Protocol::S_CREATE_ROOM>(Arena*);
template<> ::Protocol::S_DEATH_PLAYER* Arena::CreateMaybeMessage<::Protocol::S_DEATH_PLAYER>(Arena*);
template<> ::Protocol::S_END_GAME* Arena::CreateMaybeMessage<::Protocol::S_END_GAME>(Arena*);
template<> ::Protocol::S_ENTER_ROOM* Arena::CreateMaybeMessage<::Protocol::S_ENTER_ROOM>(Arena*);
template<> ::Protocol::S_LOGIN* Arena::CreateMaybeMessage<::Protocol::S_LOGIN>(Arena*);
template<> ::Protocol::S_PLAYERS_TRANSFORM* Arena::CreateMaybeMessage<::Protocol::S_PLAYERS_TRANSFORM>(Arena*);
template<> ::Protocol::S_PLAYER_ANIM_STATE* Arena::CreateMaybeMessage<::Protocol::S_PLAYER_ANIM_STATE>(Arena*);
template<> ::Protocol::S_RESULT_START* Arena::CreateMaybeMessage<::Protocol::S_RESULT_START>(Arena*);
template<> ::Protocol::S_ROOM_SETTING* Arena::CreateMaybeMessage<::Protocol::S_ROOM_SETTING>(Arena*);
template<> ::Protocol::S_ROOM_START* Arena::CreateMaybeMessage<::Protocol::S_ROOM_START>(Arena*);
template<> ::Protocol::S_ROUND_START* Arena::CreateMaybeMessage<::Protocol::S_ROUND_START>(Arena*);
template<> ::Protocol::S_SELECT_PARTS* Arena::CreateMaybeMessage<::Protocol::S_SELECT_PARTS>(Arena*);
template<> ::Protocol::S_SELECT_PARTS_LIST* Arena::CreateMaybeMessage<::Protocol::S_SELECT_PARTS_LIST>(Arena*);
template<> ::Protocol::S_SHOP_START* Arena::CreateMaybeMessage<::Protocol::S_SHOP_START>(Arena*);
template<> ::Protocol::S_SPAWN_POINT* Arena::CreateMaybeMessage<::Protocol::S_SPAWN_POINT>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class C_LOGIN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_LOGIN) */ {
 public:
  inline C_LOGIN() : C_LOGIN(nullptr) {}
  ~C_LOGIN() override;
  explicit constexpr C_LOGIN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_LOGIN(const C_LOGIN& from);
  C_LOGIN(C_LOGIN&& from) noexcept
    : C_LOGIN() {
    *this = ::std::move(from);
  }

  inline C_LOGIN& operator=(const C_LOGIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_LOGIN& operator=(C_LOGIN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_LOGIN& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_LOGIN* internal_default_instance() {
    return reinterpret_cast<const C_LOGIN*>(
               &_C_LOGIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(C_LOGIN& a, C_LOGIN& b) {
    a.Swap(&b);
  }
  inline void Swap(C_LOGIN* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_LOGIN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_LOGIN* New() const final {
    return new C_LOGIN();
  }

  C_LOGIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_LOGIN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_LOGIN& from);
  void MergeFrom(const C_LOGIN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_LOGIN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_LOGIN";
  }
  protected:
  explicit C_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.C_LOGIN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_LOGIN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_LOGIN) */ {
 public:
  inline S_LOGIN() : S_LOGIN(nullptr) {}
  ~S_LOGIN() override;
  explicit constexpr S_LOGIN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_LOGIN(const S_LOGIN& from);
  S_LOGIN(S_LOGIN&& from) noexcept
    : S_LOGIN() {
    *this = ::std::move(from);
  }

  inline S_LOGIN& operator=(const S_LOGIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_LOGIN& operator=(S_LOGIN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_LOGIN& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_LOGIN* internal_default_instance() {
    return reinterpret_cast<const S_LOGIN*>(
               &_S_LOGIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(S_LOGIN& a, S_LOGIN& b) {
    a.Swap(&b);
  }
  inline void Swap(S_LOGIN* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_LOGIN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_LOGIN* New() const final {
    return new S_LOGIN();
  }

  S_LOGIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_LOGIN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_LOGIN& from);
  void MergeFrom(const S_LOGIN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_LOGIN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_LOGIN";
  }
  protected:
  explicit S_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // .Protocol.Player player = 2;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::Protocol::Player& player() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::Player* release_player();
  ::Protocol::Player* mutable_player();
  void set_allocated_player(::Protocol::Player* player);
  private:
  const ::Protocol::Player& _internal_player() const;
  ::Protocol::Player* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::Protocol::Player* player);
  ::Protocol::Player* unsafe_arena_release_player();

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_LOGIN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::Player* player_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_CREATE_ROOM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_CREATE_ROOM) */ {
 public:
  inline C_CREATE_ROOM() : C_CREATE_ROOM(nullptr) {}
  ~C_CREATE_ROOM() override;
  explicit constexpr C_CREATE_ROOM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_CREATE_ROOM(const C_CREATE_ROOM& from);
  C_CREATE_ROOM(C_CREATE_ROOM&& from) noexcept
    : C_CREATE_ROOM() {
    *this = ::std::move(from);
  }

  inline C_CREATE_ROOM& operator=(const C_CREATE_ROOM& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_CREATE_ROOM& operator=(C_CREATE_ROOM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_CREATE_ROOM& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_CREATE_ROOM* internal_default_instance() {
    return reinterpret_cast<const C_CREATE_ROOM*>(
               &_C_CREATE_ROOM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(C_CREATE_ROOM& a, C_CREATE_ROOM& b) {
    a.Swap(&b);
  }
  inline void Swap(C_CREATE_ROOM* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_CREATE_ROOM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_CREATE_ROOM* New() const final {
    return new C_CREATE_ROOM();
  }

  C_CREATE_ROOM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_CREATE_ROOM>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_CREATE_ROOM& from);
  void MergeFrom(const C_CREATE_ROOM& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_CREATE_ROOM* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_CREATE_ROOM";
  }
  protected:
  explicit C_CREATE_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.C_CREATE_ROOM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_CREATE_ROOM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_CREATE_ROOM) */ {
 public:
  inline S_CREATE_ROOM() : S_CREATE_ROOM(nullptr) {}
  ~S_CREATE_ROOM() override;
  explicit constexpr S_CREATE_ROOM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_CREATE_ROOM(const S_CREATE_ROOM& from);
  S_CREATE_ROOM(S_CREATE_ROOM&& from) noexcept
    : S_CREATE_ROOM() {
    *this = ::std::move(from);
  }

  inline S_CREATE_ROOM& operator=(const S_CREATE_ROOM& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_CREATE_ROOM& operator=(S_CREATE_ROOM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_CREATE_ROOM& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_CREATE_ROOM* internal_default_instance() {
    return reinterpret_cast<const S_CREATE_ROOM*>(
               &_S_CREATE_ROOM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(S_CREATE_ROOM& a, S_CREATE_ROOM& b) {
    a.Swap(&b);
  }
  inline void Swap(S_CREATE_ROOM* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_CREATE_ROOM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_CREATE_ROOM* New() const final {
    return new S_CREATE_ROOM();
  }

  S_CREATE_ROOM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_CREATE_ROOM>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_CREATE_ROOM& from);
  void MergeFrom(const S_CREATE_ROOM& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_CREATE_ROOM* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_CREATE_ROOM";
  }
  protected:
  explicit S_CREATE_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomInfoFieldNumber = 3,
    kPlayerFieldNumber = 4,
    kSuccessFieldNumber = 1,
    kReasonFieldNumber = 2,
  };
  // .Protocol.RoomInfo roomInfo = 3;
  bool has_roominfo() const;
  private:
  bool _internal_has_roominfo() const;
  public:
  void clear_roominfo();
  const ::Protocol::RoomInfo& roominfo() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::RoomInfo* release_roominfo();
  ::Protocol::RoomInfo* mutable_roominfo();
  void set_allocated_roominfo(::Protocol::RoomInfo* roominfo);
  private:
  const ::Protocol::RoomInfo& _internal_roominfo() const;
  ::Protocol::RoomInfo* _internal_mutable_roominfo();
  public:
  void unsafe_arena_set_allocated_roominfo(
      ::Protocol::RoomInfo* roominfo);
  ::Protocol::RoomInfo* unsafe_arena_release_roominfo();

  // .Protocol.Player player = 4;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::Protocol::Player& player() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::Player* release_player();
  ::Protocol::Player* mutable_player();
  void set_allocated_player(::Protocol::Player* player);
  private:
  const ::Protocol::Player& _internal_player() const;
  ::Protocol::Player* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::Protocol::Player* player);
  ::Protocol::Player* unsafe_arena_release_player();

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // .Protocol.RoomFailReason reason = 2;
  void clear_reason();
  ::Protocol::RoomFailReason reason() const;
  void set_reason(::Protocol::RoomFailReason value);
  private:
  ::Protocol::RoomFailReason _internal_reason() const;
  void _internal_set_reason(::Protocol::RoomFailReason value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_CREATE_ROOM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::RoomInfo* roominfo_;
  ::Protocol::Player* player_;
  bool success_;
  int reason_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_ENTER_ROOM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_ENTER_ROOM) */ {
 public:
  inline C_ENTER_ROOM() : C_ENTER_ROOM(nullptr) {}
  ~C_ENTER_ROOM() override;
  explicit constexpr C_ENTER_ROOM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_ENTER_ROOM(const C_ENTER_ROOM& from);
  C_ENTER_ROOM(C_ENTER_ROOM&& from) noexcept
    : C_ENTER_ROOM() {
    *this = ::std::move(from);
  }

  inline C_ENTER_ROOM& operator=(const C_ENTER_ROOM& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_ENTER_ROOM& operator=(C_ENTER_ROOM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_ENTER_ROOM& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_ENTER_ROOM* internal_default_instance() {
    return reinterpret_cast<const C_ENTER_ROOM*>(
               &_C_ENTER_ROOM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(C_ENTER_ROOM& a, C_ENTER_ROOM& b) {
    a.Swap(&b);
  }
  inline void Swap(C_ENTER_ROOM* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_ENTER_ROOM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_ENTER_ROOM* New() const final {
    return new C_ENTER_ROOM();
  }

  C_ENTER_ROOM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_ENTER_ROOM>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_ENTER_ROOM& from);
  void MergeFrom(const C_ENTER_ROOM& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_ENTER_ROOM* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_ENTER_ROOM";
  }
  protected:
  explicit C_ENTER_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomCodeFieldNumber = 1,
  };
  // uint32 roomCode = 1;
  void clear_roomcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 roomcode() const;
  void set_roomcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_roomcode() const;
  void _internal_set_roomcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_ENTER_ROOM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 roomcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_ENTER_ROOM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_ENTER_ROOM) */ {
 public:
  inline S_ENTER_ROOM() : S_ENTER_ROOM(nullptr) {}
  ~S_ENTER_ROOM() override;
  explicit constexpr S_ENTER_ROOM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ENTER_ROOM(const S_ENTER_ROOM& from);
  S_ENTER_ROOM(S_ENTER_ROOM&& from) noexcept
    : S_ENTER_ROOM() {
    *this = ::std::move(from);
  }

  inline S_ENTER_ROOM& operator=(const S_ENTER_ROOM& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ENTER_ROOM& operator=(S_ENTER_ROOM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ENTER_ROOM& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ENTER_ROOM* internal_default_instance() {
    return reinterpret_cast<const S_ENTER_ROOM*>(
               &_S_ENTER_ROOM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(S_ENTER_ROOM& a, S_ENTER_ROOM& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ENTER_ROOM* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ENTER_ROOM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_ENTER_ROOM* New() const final {
    return new S_ENTER_ROOM();
  }

  S_ENTER_ROOM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_ENTER_ROOM>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_ENTER_ROOM& from);
  void MergeFrom(const S_ENTER_ROOM& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ENTER_ROOM* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_ENTER_ROOM";
  }
  protected:
  explicit S_ENTER_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 4,
    kRoomInfoFieldNumber = 3,
    kSuccessFieldNumber = 1,
    kReasonFieldNumber = 2,
  };
  // repeated .Protocol.Player players = 4;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::Protocol::Player* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Player >*
      mutable_players();
  private:
  const ::Protocol::Player& _internal_players(int index) const;
  ::Protocol::Player* _internal_add_players();
  public:
  const ::Protocol::Player& players(int index) const;
  ::Protocol::Player* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Player >&
      players() const;

  // .Protocol.RoomInfo roomInfo = 3;
  bool has_roominfo() const;
  private:
  bool _internal_has_roominfo() const;
  public:
  void clear_roominfo();
  const ::Protocol::RoomInfo& roominfo() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::RoomInfo* release_roominfo();
  ::Protocol::RoomInfo* mutable_roominfo();
  void set_allocated_roominfo(::Protocol::RoomInfo* roominfo);
  private:
  const ::Protocol::RoomInfo& _internal_roominfo() const;
  ::Protocol::RoomInfo* _internal_mutable_roominfo();
  public:
  void unsafe_arena_set_allocated_roominfo(
      ::Protocol::RoomInfo* roominfo);
  ::Protocol::RoomInfo* unsafe_arena_release_roominfo();

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // .Protocol.RoomFailReason reason = 2;
  void clear_reason();
  ::Protocol::RoomFailReason reason() const;
  void set_reason(::Protocol::RoomFailReason value);
  private:
  ::Protocol::RoomFailReason _internal_reason() const;
  void _internal_set_reason(::Protocol::RoomFailReason value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_ENTER_ROOM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Player > players_;
  ::Protocol::RoomInfo* roominfo_;
  bool success_;
  int reason_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_ANOTHER_ENTER_ROOM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_ANOTHER_ENTER_ROOM) */ {
 public:
  inline S_ANOTHER_ENTER_ROOM() : S_ANOTHER_ENTER_ROOM(nullptr) {}
  ~S_ANOTHER_ENTER_ROOM() override;
  explicit constexpr S_ANOTHER_ENTER_ROOM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ANOTHER_ENTER_ROOM(const S_ANOTHER_ENTER_ROOM& from);
  S_ANOTHER_ENTER_ROOM(S_ANOTHER_ENTER_ROOM&& from) noexcept
    : S_ANOTHER_ENTER_ROOM() {
    *this = ::std::move(from);
  }

  inline S_ANOTHER_ENTER_ROOM& operator=(const S_ANOTHER_ENTER_ROOM& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ANOTHER_ENTER_ROOM& operator=(S_ANOTHER_ENTER_ROOM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ANOTHER_ENTER_ROOM& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ANOTHER_ENTER_ROOM* internal_default_instance() {
    return reinterpret_cast<const S_ANOTHER_ENTER_ROOM*>(
               &_S_ANOTHER_ENTER_ROOM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(S_ANOTHER_ENTER_ROOM& a, S_ANOTHER_ENTER_ROOM& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ANOTHER_ENTER_ROOM* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ANOTHER_ENTER_ROOM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_ANOTHER_ENTER_ROOM* New() const final {
    return new S_ANOTHER_ENTER_ROOM();
  }

  S_ANOTHER_ENTER_ROOM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_ANOTHER_ENTER_ROOM>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_ANOTHER_ENTER_ROOM& from);
  void MergeFrom(const S_ANOTHER_ENTER_ROOM& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ANOTHER_ENTER_ROOM* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_ANOTHER_ENTER_ROOM";
  }
  protected:
  explicit S_ANOTHER_ENTER_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 1,
  };
  // .Protocol.Player player = 1;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::Protocol::Player& player() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::Player* release_player();
  ::Protocol::Player* mutable_player();
  void set_allocated_player(::Protocol::Player* player);
  private:
  const ::Protocol::Player& _internal_player() const;
  ::Protocol::Player* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::Protocol::Player* player);
  ::Protocol::Player* unsafe_arena_release_player();

  // @@protoc_insertion_point(class_scope:Protocol.S_ANOTHER_ENTER_ROOM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::Player* player_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_LEAVE_ROOM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_LEAVE_ROOM) */ {
 public:
  inline C_LEAVE_ROOM() : C_LEAVE_ROOM(nullptr) {}
  ~C_LEAVE_ROOM() override;
  explicit constexpr C_LEAVE_ROOM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_LEAVE_ROOM(const C_LEAVE_ROOM& from);
  C_LEAVE_ROOM(C_LEAVE_ROOM&& from) noexcept
    : C_LEAVE_ROOM() {
    *this = ::std::move(from);
  }

  inline C_LEAVE_ROOM& operator=(const C_LEAVE_ROOM& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_LEAVE_ROOM& operator=(C_LEAVE_ROOM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_LEAVE_ROOM& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_LEAVE_ROOM* internal_default_instance() {
    return reinterpret_cast<const C_LEAVE_ROOM*>(
               &_C_LEAVE_ROOM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(C_LEAVE_ROOM& a, C_LEAVE_ROOM& b) {
    a.Swap(&b);
  }
  inline void Swap(C_LEAVE_ROOM* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_LEAVE_ROOM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_LEAVE_ROOM* New() const final {
    return new C_LEAVE_ROOM();
  }

  C_LEAVE_ROOM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_LEAVE_ROOM>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_LEAVE_ROOM& from);
  void MergeFrom(const C_LEAVE_ROOM& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_LEAVE_ROOM* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_LEAVE_ROOM";
  }
  protected:
  explicit C_LEAVE_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.C_LEAVE_ROOM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_ANOTHER_LEAVE_ROOM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_ANOTHER_LEAVE_ROOM) */ {
 public:
  inline S_ANOTHER_LEAVE_ROOM() : S_ANOTHER_LEAVE_ROOM(nullptr) {}
  ~S_ANOTHER_LEAVE_ROOM() override;
  explicit constexpr S_ANOTHER_LEAVE_ROOM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ANOTHER_LEAVE_ROOM(const S_ANOTHER_LEAVE_ROOM& from);
  S_ANOTHER_LEAVE_ROOM(S_ANOTHER_LEAVE_ROOM&& from) noexcept
    : S_ANOTHER_LEAVE_ROOM() {
    *this = ::std::move(from);
  }

  inline S_ANOTHER_LEAVE_ROOM& operator=(const S_ANOTHER_LEAVE_ROOM& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ANOTHER_LEAVE_ROOM& operator=(S_ANOTHER_LEAVE_ROOM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ANOTHER_LEAVE_ROOM& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ANOTHER_LEAVE_ROOM* internal_default_instance() {
    return reinterpret_cast<const S_ANOTHER_LEAVE_ROOM*>(
               &_S_ANOTHER_LEAVE_ROOM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(S_ANOTHER_LEAVE_ROOM& a, S_ANOTHER_LEAVE_ROOM& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ANOTHER_LEAVE_ROOM* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ANOTHER_LEAVE_ROOM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_ANOTHER_LEAVE_ROOM* New() const final {
    return new S_ANOTHER_LEAVE_ROOM();
  }

  S_ANOTHER_LEAVE_ROOM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_ANOTHER_LEAVE_ROOM>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_ANOTHER_LEAVE_ROOM& from);
  void MergeFrom(const S_ANOTHER_LEAVE_ROOM& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ANOTHER_LEAVE_ROOM* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_ANOTHER_LEAVE_ROOM";
  }
  protected:
  explicit S_ANOTHER_LEAVE_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 1,
    kHostIdFieldNumber = 2,
  };
  // .Protocol.Player player = 1;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::Protocol::Player& player() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::Player* release_player();
  ::Protocol::Player* mutable_player();
  void set_allocated_player(::Protocol::Player* player);
  private:
  const ::Protocol::Player& _internal_player() const;
  ::Protocol::Player* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::Protocol::Player* player);
  ::Protocol::Player* unsafe_arena_release_player();

  // uint64 hostId = 2;
  void clear_hostid();
  ::PROTOBUF_NAMESPACE_ID::uint64 hostid() const;
  void set_hostid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_hostid() const;
  void _internal_set_hostid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_ANOTHER_LEAVE_ROOM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::Player* player_;
  ::PROTOBUF_NAMESPACE_ID::uint64 hostid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_ROOM_SETTING final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_ROOM_SETTING) */ {
 public:
  inline C_ROOM_SETTING() : C_ROOM_SETTING(nullptr) {}
  ~C_ROOM_SETTING() override;
  explicit constexpr C_ROOM_SETTING(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_ROOM_SETTING(const C_ROOM_SETTING& from);
  C_ROOM_SETTING(C_ROOM_SETTING&& from) noexcept
    : C_ROOM_SETTING() {
    *this = ::std::move(from);
  }

  inline C_ROOM_SETTING& operator=(const C_ROOM_SETTING& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_ROOM_SETTING& operator=(C_ROOM_SETTING&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_ROOM_SETTING& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_ROOM_SETTING* internal_default_instance() {
    return reinterpret_cast<const C_ROOM_SETTING*>(
               &_C_ROOM_SETTING_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(C_ROOM_SETTING& a, C_ROOM_SETTING& b) {
    a.Swap(&b);
  }
  inline void Swap(C_ROOM_SETTING* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_ROOM_SETTING* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_ROOM_SETTING* New() const final {
    return new C_ROOM_SETTING();
  }

  C_ROOM_SETTING* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_ROOM_SETTING>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_ROOM_SETTING& from);
  void MergeFrom(const C_ROOM_SETTING& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_ROOM_SETTING* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_ROOM_SETTING";
  }
  protected:
  explicit C_ROOM_SETTING(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomInfoFieldNumber = 1,
  };
  // .Protocol.RoomInfo roomInfo = 1;
  bool has_roominfo() const;
  private:
  bool _internal_has_roominfo() const;
  public:
  void clear_roominfo();
  const ::Protocol::RoomInfo& roominfo() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::RoomInfo* release_roominfo();
  ::Protocol::RoomInfo* mutable_roominfo();
  void set_allocated_roominfo(::Protocol::RoomInfo* roominfo);
  private:
  const ::Protocol::RoomInfo& _internal_roominfo() const;
  ::Protocol::RoomInfo* _internal_mutable_roominfo();
  public:
  void unsafe_arena_set_allocated_roominfo(
      ::Protocol::RoomInfo* roominfo);
  ::Protocol::RoomInfo* unsafe_arena_release_roominfo();

  // @@protoc_insertion_point(class_scope:Protocol.C_ROOM_SETTING)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::RoomInfo* roominfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_ROOM_SETTING final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_ROOM_SETTING) */ {
 public:
  inline S_ROOM_SETTING() : S_ROOM_SETTING(nullptr) {}
  ~S_ROOM_SETTING() override;
  explicit constexpr S_ROOM_SETTING(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ROOM_SETTING(const S_ROOM_SETTING& from);
  S_ROOM_SETTING(S_ROOM_SETTING&& from) noexcept
    : S_ROOM_SETTING() {
    *this = ::std::move(from);
  }

  inline S_ROOM_SETTING& operator=(const S_ROOM_SETTING& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ROOM_SETTING& operator=(S_ROOM_SETTING&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ROOM_SETTING& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ROOM_SETTING* internal_default_instance() {
    return reinterpret_cast<const S_ROOM_SETTING*>(
               &_S_ROOM_SETTING_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(S_ROOM_SETTING& a, S_ROOM_SETTING& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ROOM_SETTING* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ROOM_SETTING* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_ROOM_SETTING* New() const final {
    return new S_ROOM_SETTING();
  }

  S_ROOM_SETTING* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_ROOM_SETTING>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_ROOM_SETTING& from);
  void MergeFrom(const S_ROOM_SETTING& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ROOM_SETTING* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_ROOM_SETTING";
  }
  protected:
  explicit S_ROOM_SETTING(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomInfoFieldNumber = 1,
  };
  // .Protocol.RoomInfo roomInfo = 1;
  bool has_roominfo() const;
  private:
  bool _internal_has_roominfo() const;
  public:
  void clear_roominfo();
  const ::Protocol::RoomInfo& roominfo() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::RoomInfo* release_roominfo();
  ::Protocol::RoomInfo* mutable_roominfo();
  void set_allocated_roominfo(::Protocol::RoomInfo* roominfo);
  private:
  const ::Protocol::RoomInfo& _internal_roominfo() const;
  ::Protocol::RoomInfo* _internal_mutable_roominfo();
  public:
  void unsafe_arena_set_allocated_roominfo(
      ::Protocol::RoomInfo* roominfo);
  ::Protocol::RoomInfo* unsafe_arena_release_roominfo();

  // @@protoc_insertion_point(class_scope:Protocol.S_ROOM_SETTING)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::RoomInfo* roominfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_ROOM_START final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_ROOM_START) */ {
 public:
  inline C_ROOM_START() : C_ROOM_START(nullptr) {}
  ~C_ROOM_START() override;
  explicit constexpr C_ROOM_START(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_ROOM_START(const C_ROOM_START& from);
  C_ROOM_START(C_ROOM_START&& from) noexcept
    : C_ROOM_START() {
    *this = ::std::move(from);
  }

  inline C_ROOM_START& operator=(const C_ROOM_START& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_ROOM_START& operator=(C_ROOM_START&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_ROOM_START& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_ROOM_START* internal_default_instance() {
    return reinterpret_cast<const C_ROOM_START*>(
               &_C_ROOM_START_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(C_ROOM_START& a, C_ROOM_START& b) {
    a.Swap(&b);
  }
  inline void Swap(C_ROOM_START* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_ROOM_START* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_ROOM_START* New() const final {
    return new C_ROOM_START();
  }

  C_ROOM_START* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_ROOM_START>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_ROOM_START& from);
  void MergeFrom(const C_ROOM_START& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_ROOM_START* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_ROOM_START";
  }
  protected:
  explicit C_ROOM_START(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.C_ROOM_START)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_ROOM_START final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_ROOM_START) */ {
 public:
  inline S_ROOM_START() : S_ROOM_START(nullptr) {}
  ~S_ROOM_START() override;
  explicit constexpr S_ROOM_START(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ROOM_START(const S_ROOM_START& from);
  S_ROOM_START(S_ROOM_START&& from) noexcept
    : S_ROOM_START() {
    *this = ::std::move(from);
  }

  inline S_ROOM_START& operator=(const S_ROOM_START& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ROOM_START& operator=(S_ROOM_START&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ROOM_START& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ROOM_START* internal_default_instance() {
    return reinterpret_cast<const S_ROOM_START*>(
               &_S_ROOM_START_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(S_ROOM_START& a, S_ROOM_START& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ROOM_START* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ROOM_START* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_ROOM_START* New() const final {
    return new S_ROOM_START();
  }

  S_ROOM_START* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_ROOM_START>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_ROOM_START& from);
  void MergeFrom(const S_ROOM_START& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ROOM_START* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_ROOM_START";
  }
  protected:
  explicit S_ROOM_START(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 3,
    kSpawnPointFieldNumber = 4,
    kRoomInfoFieldNumber = 1,
    kRoundInfoFieldNumber = 2,
  };
  // repeated .Protocol.PlayerInfo players = 3;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::Protocol::PlayerInfo* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PlayerInfo >*
      mutable_players();
  private:
  const ::Protocol::PlayerInfo& _internal_players(int index) const;
  ::Protocol::PlayerInfo* _internal_add_players();
  public:
  const ::Protocol::PlayerInfo& players(int index) const;
  ::Protocol::PlayerInfo* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PlayerInfo >&
      players() const;

  // repeated uint32 spawnPoint = 4;
  int spawnpoint_size() const;
  private:
  int _internal_spawnpoint_size() const;
  public:
  void clear_spawnpoint();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_spawnpoint(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_spawnpoint() const;
  void _internal_add_spawnpoint(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_spawnpoint();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 spawnpoint(int index) const;
  void set_spawnpoint(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_spawnpoint(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      spawnpoint() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_spawnpoint();

  // .Protocol.RoomInfo roomInfo = 1;
  bool has_roominfo() const;
  private:
  bool _internal_has_roominfo() const;
  public:
  void clear_roominfo();
  const ::Protocol::RoomInfo& roominfo() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::RoomInfo* release_roominfo();
  ::Protocol::RoomInfo* mutable_roominfo();
  void set_allocated_roominfo(::Protocol::RoomInfo* roominfo);
  private:
  const ::Protocol::RoomInfo& _internal_roominfo() const;
  ::Protocol::RoomInfo* _internal_mutable_roominfo();
  public:
  void unsafe_arena_set_allocated_roominfo(
      ::Protocol::RoomInfo* roominfo);
  ::Protocol::RoomInfo* unsafe_arena_release_roominfo();

  // .Protocol.RoundInfo roundInfo = 2;
  bool has_roundinfo() const;
  private:
  bool _internal_has_roundinfo() const;
  public:
  void clear_roundinfo();
  const ::Protocol::RoundInfo& roundinfo() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::RoundInfo* release_roundinfo();
  ::Protocol::RoundInfo* mutable_roundinfo();
  void set_allocated_roundinfo(::Protocol::RoundInfo* roundinfo);
  private:
  const ::Protocol::RoundInfo& _internal_roundinfo() const;
  ::Protocol::RoundInfo* _internal_mutable_roundinfo();
  public:
  void unsafe_arena_set_allocated_roundinfo(
      ::Protocol::RoundInfo* roundinfo);
  ::Protocol::RoundInfo* unsafe_arena_release_roundinfo();

  // @@protoc_insertion_point(class_scope:Protocol.S_ROOM_START)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PlayerInfo > players_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > spawnpoint_;
  mutable std::atomic<int> _spawnpoint_cached_byte_size_;
  ::Protocol::RoomInfo* roominfo_;
  ::Protocol::RoundInfo* roundinfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_LOAD_COMPLETE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_LOAD_COMPLETE) */ {
 public:
  inline C_LOAD_COMPLETE() : C_LOAD_COMPLETE(nullptr) {}
  ~C_LOAD_COMPLETE() override;
  explicit constexpr C_LOAD_COMPLETE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_LOAD_COMPLETE(const C_LOAD_COMPLETE& from);
  C_LOAD_COMPLETE(C_LOAD_COMPLETE&& from) noexcept
    : C_LOAD_COMPLETE() {
    *this = ::std::move(from);
  }

  inline C_LOAD_COMPLETE& operator=(const C_LOAD_COMPLETE& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_LOAD_COMPLETE& operator=(C_LOAD_COMPLETE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_LOAD_COMPLETE& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_LOAD_COMPLETE* internal_default_instance() {
    return reinterpret_cast<const C_LOAD_COMPLETE*>(
               &_C_LOAD_COMPLETE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(C_LOAD_COMPLETE& a, C_LOAD_COMPLETE& b) {
    a.Swap(&b);
  }
  inline void Swap(C_LOAD_COMPLETE* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_LOAD_COMPLETE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_LOAD_COMPLETE* New() const final {
    return new C_LOAD_COMPLETE();
  }

  C_LOAD_COMPLETE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_LOAD_COMPLETE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_LOAD_COMPLETE& from);
  void MergeFrom(const C_LOAD_COMPLETE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_LOAD_COMPLETE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_LOAD_COMPLETE";
  }
  protected:
  explicit C_LOAD_COMPLETE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.C_LOAD_COMPLETE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_ROUND_START final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_ROUND_START) */ {
 public:
  inline S_ROUND_START() : S_ROUND_START(nullptr) {}
  ~S_ROUND_START() override;
  explicit constexpr S_ROUND_START(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ROUND_START(const S_ROUND_START& from);
  S_ROUND_START(S_ROUND_START&& from) noexcept
    : S_ROUND_START() {
    *this = ::std::move(from);
  }

  inline S_ROUND_START& operator=(const S_ROUND_START& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ROUND_START& operator=(S_ROUND_START&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ROUND_START& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ROUND_START* internal_default_instance() {
    return reinterpret_cast<const S_ROUND_START*>(
               &_S_ROUND_START_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(S_ROUND_START& a, S_ROUND_START& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ROUND_START* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ROUND_START* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_ROUND_START* New() const final {
    return new S_ROUND_START();
  }

  S_ROUND_START* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_ROUND_START>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_ROUND_START& from);
  void MergeFrom(const S_ROUND_START& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ROUND_START* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_ROUND_START";
  }
  protected:
  explicit S_ROUND_START(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 2,
    kRoundInfoFieldNumber = 1,
  };
  // repeated .Protocol.PlayerInfo players = 2;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::Protocol::PlayerInfo* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PlayerInfo >*
      mutable_players();
  private:
  const ::Protocol::PlayerInfo& _internal_players(int index) const;
  ::Protocol::PlayerInfo* _internal_add_players();
  public:
  const ::Protocol::PlayerInfo& players(int index) const;
  ::Protocol::PlayerInfo* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PlayerInfo >&
      players() const;

  // .Protocol.RoundInfo roundInfo = 1;
  bool has_roundinfo() const;
  private:
  bool _internal_has_roundinfo() const;
  public:
  void clear_roundinfo();
  const ::Protocol::RoundInfo& roundinfo() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::RoundInfo* release_roundinfo();
  ::Protocol::RoundInfo* mutable_roundinfo();
  void set_allocated_roundinfo(::Protocol::RoundInfo* roundinfo);
  private:
  const ::Protocol::RoundInfo& _internal_roundinfo() const;
  ::Protocol::RoundInfo* _internal_mutable_roundinfo();
  public:
  void unsafe_arena_set_allocated_roundinfo(
      ::Protocol::RoundInfo* roundinfo);
  ::Protocol::RoundInfo* unsafe_arena_release_roundinfo();

  // @@protoc_insertion_point(class_scope:Protocol.S_ROUND_START)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PlayerInfo > players_;
  ::Protocol::RoundInfo* roundinfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_SHOP_START final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_SHOP_START) */ {
 public:
  inline S_SHOP_START() : S_SHOP_START(nullptr) {}
  ~S_SHOP_START() override;
  explicit constexpr S_SHOP_START(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_SHOP_START(const S_SHOP_START& from);
  S_SHOP_START(S_SHOP_START&& from) noexcept
    : S_SHOP_START() {
    *this = ::std::move(from);
  }

  inline S_SHOP_START& operator=(const S_SHOP_START& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_SHOP_START& operator=(S_SHOP_START&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_SHOP_START& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_SHOP_START* internal_default_instance() {
    return reinterpret_cast<const S_SHOP_START*>(
               &_S_SHOP_START_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(S_SHOP_START& a, S_SHOP_START& b) {
    a.Swap(&b);
  }
  inline void Swap(S_SHOP_START* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_SHOP_START* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_SHOP_START* New() const final {
    return new S_SHOP_START();
  }

  S_SHOP_START* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_SHOP_START>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_SHOP_START& from);
  void MergeFrom(const S_SHOP_START& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_SHOP_START* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_SHOP_START";
  }
  protected:
  explicit S_SHOP_START(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartsListFieldNumber = 4,
    kRoundInfoFieldNumber = 1,
    kPlayerFieldNumber = 2,
    kPlayerInfoFieldNumber = 3,
  };
  // repeated .Protocol.PartsInfo partsList = 4;
  int partslist_size() const;
  private:
  int _internal_partslist_size() const;
  public:
  void clear_partslist();
  ::Protocol::PartsInfo* mutable_partslist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PartsInfo >*
      mutable_partslist();
  private:
  const ::Protocol::PartsInfo& _internal_partslist(int index) const;
  ::Protocol::PartsInfo* _internal_add_partslist();
  public:
  const ::Protocol::PartsInfo& partslist(int index) const;
  ::Protocol::PartsInfo* add_partslist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PartsInfo >&
      partslist() const;

  // .Protocol.RoundInfo roundInfo = 1;
  bool has_roundinfo() const;
  private:
  bool _internal_has_roundinfo() const;
  public:
  void clear_roundinfo();
  const ::Protocol::RoundInfo& roundinfo() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::RoundInfo* release_roundinfo();
  ::Protocol::RoundInfo* mutable_roundinfo();
  void set_allocated_roundinfo(::Protocol::RoundInfo* roundinfo);
  private:
  const ::Protocol::RoundInfo& _internal_roundinfo() const;
  ::Protocol::RoundInfo* _internal_mutable_roundinfo();
  public:
  void unsafe_arena_set_allocated_roundinfo(
      ::Protocol::RoundInfo* roundinfo);
  ::Protocol::RoundInfo* unsafe_arena_release_roundinfo();

  // .Protocol.Player player = 2;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::Protocol::Player& player() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::Player* release_player();
  ::Protocol::Player* mutable_player();
  void set_allocated_player(::Protocol::Player* player);
  private:
  const ::Protocol::Player& _internal_player() const;
  ::Protocol::Player* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::Protocol::Player* player);
  ::Protocol::Player* unsafe_arena_release_player();

  // .Protocol.PlayerInfo playerInfo = 3;
  bool has_playerinfo() const;
  private:
  bool _internal_has_playerinfo() const;
  public:
  void clear_playerinfo();
  const ::Protocol::PlayerInfo& playerinfo() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::PlayerInfo* release_playerinfo();
  ::Protocol::PlayerInfo* mutable_playerinfo();
  void set_allocated_playerinfo(::Protocol::PlayerInfo* playerinfo);
  private:
  const ::Protocol::PlayerInfo& _internal_playerinfo() const;
  ::Protocol::PlayerInfo* _internal_mutable_playerinfo();
  public:
  void unsafe_arena_set_allocated_playerinfo(
      ::Protocol::PlayerInfo* playerinfo);
  ::Protocol::PlayerInfo* unsafe_arena_release_playerinfo();

  // @@protoc_insertion_point(class_scope:Protocol.S_SHOP_START)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PartsInfo > partslist_;
  ::Protocol::RoundInfo* roundinfo_;
  ::Protocol::Player* player_;
  ::Protocol::PlayerInfo* playerinfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_END_GAME final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_END_GAME) */ {
 public:
  inline S_END_GAME() : S_END_GAME(nullptr) {}
  ~S_END_GAME() override;
  explicit constexpr S_END_GAME(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_END_GAME(const S_END_GAME& from);
  S_END_GAME(S_END_GAME&& from) noexcept
    : S_END_GAME() {
    *this = ::std::move(from);
  }

  inline S_END_GAME& operator=(const S_END_GAME& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_END_GAME& operator=(S_END_GAME&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_END_GAME& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_END_GAME* internal_default_instance() {
    return reinterpret_cast<const S_END_GAME*>(
               &_S_END_GAME_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(S_END_GAME& a, S_END_GAME& b) {
    a.Swap(&b);
  }
  inline void Swap(S_END_GAME* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_END_GAME* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_END_GAME* New() const final {
    return new S_END_GAME();
  }

  S_END_GAME* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_END_GAME>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_END_GAME& from);
  void MergeFrom(const S_END_GAME& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_END_GAME* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_END_GAME";
  }
  protected:
  explicit S_END_GAME(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoundInfoFieldNumber = 1,
  };
  // .Protocol.RoundInfo roundInfo = 1;
  bool has_roundinfo() const;
  private:
  bool _internal_has_roundinfo() const;
  public:
  void clear_roundinfo();
  const ::Protocol::RoundInfo& roundinfo() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::RoundInfo* release_roundinfo();
  ::Protocol::RoundInfo* mutable_roundinfo();
  void set_allocated_roundinfo(::Protocol::RoundInfo* roundinfo);
  private:
  const ::Protocol::RoundInfo& _internal_roundinfo() const;
  ::Protocol::RoundInfo* _internal_mutable_roundinfo();
  public:
  void unsafe_arena_set_allocated_roundinfo(
      ::Protocol::RoundInfo* roundinfo);
  ::Protocol::RoundInfo* unsafe_arena_release_roundinfo();

  // @@protoc_insertion_point(class_scope:Protocol.S_END_GAME)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::RoundInfo* roundinfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_RESULT_START final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_RESULT_START) */ {
 public:
  inline S_RESULT_START() : S_RESULT_START(nullptr) {}
  ~S_RESULT_START() override;
  explicit constexpr S_RESULT_START(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_RESULT_START(const S_RESULT_START& from);
  S_RESULT_START(S_RESULT_START&& from) noexcept
    : S_RESULT_START() {
    *this = ::std::move(from);
  }

  inline S_RESULT_START& operator=(const S_RESULT_START& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_RESULT_START& operator=(S_RESULT_START&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_RESULT_START& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_RESULT_START* internal_default_instance() {
    return reinterpret_cast<const S_RESULT_START*>(
               &_S_RESULT_START_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(S_RESULT_START& a, S_RESULT_START& b) {
    a.Swap(&b);
  }
  inline void Swap(S_RESULT_START* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_RESULT_START* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_RESULT_START* New() const final {
    return new S_RESULT_START();
  }

  S_RESULT_START* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_RESULT_START>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_RESULT_START& from);
  void MergeFrom(const S_RESULT_START& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_RESULT_START* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_RESULT_START";
  }
  protected:
  explicit S_RESULT_START(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 2,
    kRoundInfoFieldNumber = 1,
  };
  // repeated .Protocol.PlayerInfo players = 2;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::Protocol::PlayerInfo* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PlayerInfo >*
      mutable_players();
  private:
  const ::Protocol::PlayerInfo& _internal_players(int index) const;
  ::Protocol::PlayerInfo* _internal_add_players();
  public:
  const ::Protocol::PlayerInfo& players(int index) const;
  ::Protocol::PlayerInfo* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PlayerInfo >&
      players() const;

  // .Protocol.RoundInfo roundInfo = 1;
  bool has_roundinfo() const;
  private:
  bool _internal_has_roundinfo() const;
  public:
  void clear_roundinfo();
  const ::Protocol::RoundInfo& roundinfo() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::RoundInfo* release_roundinfo();
  ::Protocol::RoundInfo* mutable_roundinfo();
  void set_allocated_roundinfo(::Protocol::RoundInfo* roundinfo);
  private:
  const ::Protocol::RoundInfo& _internal_roundinfo() const;
  ::Protocol::RoundInfo* _internal_mutable_roundinfo();
  public:
  void unsafe_arena_set_allocated_roundinfo(
      ::Protocol::RoundInfo* roundinfo);
  ::Protocol::RoundInfo* unsafe_arena_release_roundinfo();

  // @@protoc_insertion_point(class_scope:Protocol.S_RESULT_START)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PlayerInfo > players_;
  ::Protocol::RoundInfo* roundinfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_PLAYER_TRANSFORM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_PLAYER_TRANSFORM) */ {
 public:
  inline C_PLAYER_TRANSFORM() : C_PLAYER_TRANSFORM(nullptr) {}
  ~C_PLAYER_TRANSFORM() override;
  explicit constexpr C_PLAYER_TRANSFORM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_PLAYER_TRANSFORM(const C_PLAYER_TRANSFORM& from);
  C_PLAYER_TRANSFORM(C_PLAYER_TRANSFORM&& from) noexcept
    : C_PLAYER_TRANSFORM() {
    *this = ::std::move(from);
  }

  inline C_PLAYER_TRANSFORM& operator=(const C_PLAYER_TRANSFORM& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_PLAYER_TRANSFORM& operator=(C_PLAYER_TRANSFORM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_PLAYER_TRANSFORM& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_PLAYER_TRANSFORM* internal_default_instance() {
    return reinterpret_cast<const C_PLAYER_TRANSFORM*>(
               &_C_PLAYER_TRANSFORM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(C_PLAYER_TRANSFORM& a, C_PLAYER_TRANSFORM& b) {
    a.Swap(&b);
  }
  inline void Swap(C_PLAYER_TRANSFORM* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_PLAYER_TRANSFORM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_PLAYER_TRANSFORM* New() const final {
    return new C_PLAYER_TRANSFORM();
  }

  C_PLAYER_TRANSFORM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_PLAYER_TRANSFORM>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_PLAYER_TRANSFORM& from);
  void MergeFrom(const C_PLAYER_TRANSFORM& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_PLAYER_TRANSFORM* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_PLAYER_TRANSFORM";
  }
  protected:
  explicit C_PLAYER_TRANSFORM(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransformFieldNumber = 1,
  };
  // .Protocol.Transform transform = 1;
  bool has_transform() const;
  private:
  bool _internal_has_transform() const;
  public:
  void clear_transform();
  const ::Protocol::Transform& transform() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::Transform* release_transform();
  ::Protocol::Transform* mutable_transform();
  void set_allocated_transform(::Protocol::Transform* transform);
  private:
  const ::Protocol::Transform& _internal_transform() const;
  ::Protocol::Transform* _internal_mutable_transform();
  public:
  void unsafe_arena_set_allocated_transform(
      ::Protocol::Transform* transform);
  ::Protocol::Transform* unsafe_arena_release_transform();

  // @@protoc_insertion_point(class_scope:Protocol.C_PLAYER_TRANSFORM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::Transform* transform_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_PLAYERS_TRANSFORM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_PLAYERS_TRANSFORM) */ {
 public:
  inline S_PLAYERS_TRANSFORM() : S_PLAYERS_TRANSFORM(nullptr) {}
  ~S_PLAYERS_TRANSFORM() override;
  explicit constexpr S_PLAYERS_TRANSFORM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_PLAYERS_TRANSFORM(const S_PLAYERS_TRANSFORM& from);
  S_PLAYERS_TRANSFORM(S_PLAYERS_TRANSFORM&& from) noexcept
    : S_PLAYERS_TRANSFORM() {
    *this = ::std::move(from);
  }

  inline S_PLAYERS_TRANSFORM& operator=(const S_PLAYERS_TRANSFORM& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_PLAYERS_TRANSFORM& operator=(S_PLAYERS_TRANSFORM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_PLAYERS_TRANSFORM& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_PLAYERS_TRANSFORM* internal_default_instance() {
    return reinterpret_cast<const S_PLAYERS_TRANSFORM*>(
               &_S_PLAYERS_TRANSFORM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(S_PLAYERS_TRANSFORM& a, S_PLAYERS_TRANSFORM& b) {
    a.Swap(&b);
  }
  inline void Swap(S_PLAYERS_TRANSFORM* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_PLAYERS_TRANSFORM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_PLAYERS_TRANSFORM* New() const final {
    return new S_PLAYERS_TRANSFORM();
  }

  S_PLAYERS_TRANSFORM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_PLAYERS_TRANSFORM>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_PLAYERS_TRANSFORM& from);
  void MergeFrom(const S_PLAYERS_TRANSFORM& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_PLAYERS_TRANSFORM* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_PLAYERS_TRANSFORM";
  }
  protected:
  explicit S_PLAYERS_TRANSFORM(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersTransformFieldNumber = 1,
  };
  // repeated .Protocol.PlayersTransform playersTransform = 1;
  int playerstransform_size() const;
  private:
  int _internal_playerstransform_size() const;
  public:
  void clear_playerstransform();
  ::Protocol::PlayersTransform* mutable_playerstransform(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PlayersTransform >*
      mutable_playerstransform();
  private:
  const ::Protocol::PlayersTransform& _internal_playerstransform(int index) const;
  ::Protocol::PlayersTransform* _internal_add_playerstransform();
  public:
  const ::Protocol::PlayersTransform& playerstransform(int index) const;
  ::Protocol::PlayersTransform* add_playerstransform();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PlayersTransform >&
      playerstransform() const;

  // @@protoc_insertion_point(class_scope:Protocol.S_PLAYERS_TRANSFORM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PlayersTransform > playerstransform_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_PLAYER_ANIM_STATE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_PLAYER_ANIM_STATE) */ {
 public:
  inline C_PLAYER_ANIM_STATE() : C_PLAYER_ANIM_STATE(nullptr) {}
  ~C_PLAYER_ANIM_STATE() override;
  explicit constexpr C_PLAYER_ANIM_STATE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_PLAYER_ANIM_STATE(const C_PLAYER_ANIM_STATE& from);
  C_PLAYER_ANIM_STATE(C_PLAYER_ANIM_STATE&& from) noexcept
    : C_PLAYER_ANIM_STATE() {
    *this = ::std::move(from);
  }

  inline C_PLAYER_ANIM_STATE& operator=(const C_PLAYER_ANIM_STATE& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_PLAYER_ANIM_STATE& operator=(C_PLAYER_ANIM_STATE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_PLAYER_ANIM_STATE& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_PLAYER_ANIM_STATE* internal_default_instance() {
    return reinterpret_cast<const C_PLAYER_ANIM_STATE*>(
               &_C_PLAYER_ANIM_STATE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(C_PLAYER_ANIM_STATE& a, C_PLAYER_ANIM_STATE& b) {
    a.Swap(&b);
  }
  inline void Swap(C_PLAYER_ANIM_STATE* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_PLAYER_ANIM_STATE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_PLAYER_ANIM_STATE* New() const final {
    return new C_PLAYER_ANIM_STATE();
  }

  C_PLAYER_ANIM_STATE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_PLAYER_ANIM_STATE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_PLAYER_ANIM_STATE& from);
  void MergeFrom(const C_PLAYER_ANIM_STATE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_PLAYER_ANIM_STATE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_PLAYER_ANIM_STATE";
  }
  protected:
  explicit C_PLAYER_ANIM_STATE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // .Protocol.AnimState state = 1;
  void clear_state();
  ::Protocol::AnimState state() const;
  void set_state(::Protocol::AnimState value);
  private:
  ::Protocol::AnimState _internal_state() const;
  void _internal_set_state(::Protocol::AnimState value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_PLAYER_ANIM_STATE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_PLAYER_ANIM_STATE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_PLAYER_ANIM_STATE) */ {
 public:
  inline S_PLAYER_ANIM_STATE() : S_PLAYER_ANIM_STATE(nullptr) {}
  ~S_PLAYER_ANIM_STATE() override;
  explicit constexpr S_PLAYER_ANIM_STATE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_PLAYER_ANIM_STATE(const S_PLAYER_ANIM_STATE& from);
  S_PLAYER_ANIM_STATE(S_PLAYER_ANIM_STATE&& from) noexcept
    : S_PLAYER_ANIM_STATE() {
    *this = ::std::move(from);
  }

  inline S_PLAYER_ANIM_STATE& operator=(const S_PLAYER_ANIM_STATE& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_PLAYER_ANIM_STATE& operator=(S_PLAYER_ANIM_STATE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_PLAYER_ANIM_STATE& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_PLAYER_ANIM_STATE* internal_default_instance() {
    return reinterpret_cast<const S_PLAYER_ANIM_STATE*>(
               &_S_PLAYER_ANIM_STATE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(S_PLAYER_ANIM_STATE& a, S_PLAYER_ANIM_STATE& b) {
    a.Swap(&b);
  }
  inline void Swap(S_PLAYER_ANIM_STATE* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_PLAYER_ANIM_STATE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_PLAYER_ANIM_STATE* New() const final {
    return new S_PLAYER_ANIM_STATE();
  }

  S_PLAYER_ANIM_STATE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_PLAYER_ANIM_STATE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_PLAYER_ANIM_STATE& from);
  void MergeFrom(const S_PLAYER_ANIM_STATE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_PLAYER_ANIM_STATE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_PLAYER_ANIM_STATE";
  }
  protected:
  explicit S_PLAYER_ANIM_STATE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // .Protocol.Player player = 1;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::Protocol::Player& player() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::Player* release_player();
  ::Protocol::Player* mutable_player();
  void set_allocated_player(::Protocol::Player* player);
  private:
  const ::Protocol::Player& _internal_player() const;
  ::Protocol::Player* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::Protocol::Player* player);
  ::Protocol::Player* unsafe_arena_release_player();

  // .Protocol.AnimState state = 2;
  void clear_state();
  ::Protocol::AnimState state() const;
  void set_state(::Protocol::AnimState value);
  private:
  ::Protocol::AnimState _internal_state() const;
  void _internal_set_state(::Protocol::AnimState value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_PLAYER_ANIM_STATE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::Player* player_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_SELECT_PARTS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_SELECT_PARTS) */ {
 public:
  inline C_SELECT_PARTS() : C_SELECT_PARTS(nullptr) {}
  ~C_SELECT_PARTS() override;
  explicit constexpr C_SELECT_PARTS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_SELECT_PARTS(const C_SELECT_PARTS& from);
  C_SELECT_PARTS(C_SELECT_PARTS&& from) noexcept
    : C_SELECT_PARTS() {
    *this = ::std::move(from);
  }

  inline C_SELECT_PARTS& operator=(const C_SELECT_PARTS& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_SELECT_PARTS& operator=(C_SELECT_PARTS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_SELECT_PARTS& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_SELECT_PARTS* internal_default_instance() {
    return reinterpret_cast<const C_SELECT_PARTS*>(
               &_C_SELECT_PARTS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(C_SELECT_PARTS& a, C_SELECT_PARTS& b) {
    a.Swap(&b);
  }
  inline void Swap(C_SELECT_PARTS* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_SELECT_PARTS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_SELECT_PARTS* New() const final {
    return new C_SELECT_PARTS();
  }

  C_SELECT_PARTS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_SELECT_PARTS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_SELECT_PARTS& from);
  void MergeFrom(const C_SELECT_PARTS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_SELECT_PARTS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_SELECT_PARTS";
  }
  protected:
  explicit C_SELECT_PARTS(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
  };
  // uint32 index = 1;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_SELECT_PARTS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_SELECT_PARTS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_SELECT_PARTS) */ {
 public:
  inline S_SELECT_PARTS() : S_SELECT_PARTS(nullptr) {}
  ~S_SELECT_PARTS() override;
  explicit constexpr S_SELECT_PARTS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_SELECT_PARTS(const S_SELECT_PARTS& from);
  S_SELECT_PARTS(S_SELECT_PARTS&& from) noexcept
    : S_SELECT_PARTS() {
    *this = ::std::move(from);
  }

  inline S_SELECT_PARTS& operator=(const S_SELECT_PARTS& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_SELECT_PARTS& operator=(S_SELECT_PARTS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_SELECT_PARTS& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_SELECT_PARTS* internal_default_instance() {
    return reinterpret_cast<const S_SELECT_PARTS*>(
               &_S_SELECT_PARTS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(S_SELECT_PARTS& a, S_SELECT_PARTS& b) {
    a.Swap(&b);
  }
  inline void Swap(S_SELECT_PARTS* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_SELECT_PARTS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_SELECT_PARTS* New() const final {
    return new S_SELECT_PARTS();
  }

  S_SELECT_PARTS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_SELECT_PARTS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_SELECT_PARTS& from);
  void MergeFrom(const S_SELECT_PARTS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_SELECT_PARTS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_SELECT_PARTS";
  }
  protected:
  explicit S_SELECT_PARTS(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
    kGoldFieldNumber = 2,
    kIndexFieldNumber = 3,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // int32 gold = 2;
  void clear_gold();
  ::PROTOBUF_NAMESPACE_ID::int32 gold() const;
  void set_gold(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gold() const;
  void _internal_set_gold(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 index = 3;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_SELECT_PARTS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool success_;
  ::PROTOBUF_NAMESPACE_ID::int32 gold_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_SELECT_PARTS_LIST final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_SELECT_PARTS_LIST) */ {
 public:
  inline S_SELECT_PARTS_LIST() : S_SELECT_PARTS_LIST(nullptr) {}
  ~S_SELECT_PARTS_LIST() override;
  explicit constexpr S_SELECT_PARTS_LIST(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_SELECT_PARTS_LIST(const S_SELECT_PARTS_LIST& from);
  S_SELECT_PARTS_LIST(S_SELECT_PARTS_LIST&& from) noexcept
    : S_SELECT_PARTS_LIST() {
    *this = ::std::move(from);
  }

  inline S_SELECT_PARTS_LIST& operator=(const S_SELECT_PARTS_LIST& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_SELECT_PARTS_LIST& operator=(S_SELECT_PARTS_LIST&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_SELECT_PARTS_LIST& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_SELECT_PARTS_LIST* internal_default_instance() {
    return reinterpret_cast<const S_SELECT_PARTS_LIST*>(
               &_S_SELECT_PARTS_LIST_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(S_SELECT_PARTS_LIST& a, S_SELECT_PARTS_LIST& b) {
    a.Swap(&b);
  }
  inline void Swap(S_SELECT_PARTS_LIST* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_SELECT_PARTS_LIST* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_SELECT_PARTS_LIST* New() const final {
    return new S_SELECT_PARTS_LIST();
  }

  S_SELECT_PARTS_LIST* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_SELECT_PARTS_LIST>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_SELECT_PARTS_LIST& from);
  void MergeFrom(const S_SELECT_PARTS_LIST& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_SELECT_PARTS_LIST* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_SELECT_PARTS_LIST";
  }
  protected:
  explicit S_SELECT_PARTS_LIST(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartsListFieldNumber = 1,
    kGoldFieldNumber = 2,
  };
  // .Protocol.PartsList partsList = 1;
  bool has_partslist() const;
  private:
  bool _internal_has_partslist() const;
  public:
  void clear_partslist();
  const ::Protocol::PartsList& partslist() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::PartsList* release_partslist();
  ::Protocol::PartsList* mutable_partslist();
  void set_allocated_partslist(::Protocol::PartsList* partslist);
  private:
  const ::Protocol::PartsList& _internal_partslist() const;
  ::Protocol::PartsList* _internal_mutable_partslist();
  public:
  void unsafe_arena_set_allocated_partslist(
      ::Protocol::PartsList* partslist);
  ::Protocol::PartsList* unsafe_arena_release_partslist();

  // int32 gold = 2;
  void clear_gold();
  ::PROTOBUF_NAMESPACE_ID::int32 gold() const;
  void set_gold(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gold() const;
  void _internal_set_gold(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_SELECT_PARTS_LIST)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::PartsList* partslist_;
  ::PROTOBUF_NAMESPACE_ID::int32 gold_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_REROLL_PARTS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_REROLL_PARTS) */ {
 public:
  inline C_REROLL_PARTS() : C_REROLL_PARTS(nullptr) {}
  ~C_REROLL_PARTS() override;
  explicit constexpr C_REROLL_PARTS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_REROLL_PARTS(const C_REROLL_PARTS& from);
  C_REROLL_PARTS(C_REROLL_PARTS&& from) noexcept
    : C_REROLL_PARTS() {
    *this = ::std::move(from);
  }

  inline C_REROLL_PARTS& operator=(const C_REROLL_PARTS& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_REROLL_PARTS& operator=(C_REROLL_PARTS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_REROLL_PARTS& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_REROLL_PARTS* internal_default_instance() {
    return reinterpret_cast<const C_REROLL_PARTS*>(
               &_C_REROLL_PARTS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(C_REROLL_PARTS& a, C_REROLL_PARTS& b) {
    a.Swap(&b);
  }
  inline void Swap(C_REROLL_PARTS* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_REROLL_PARTS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_REROLL_PARTS* New() const final {
    return new C_REROLL_PARTS();
  }

  C_REROLL_PARTS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_REROLL_PARTS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_REROLL_PARTS& from);
  void MergeFrom(const C_REROLL_PARTS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_REROLL_PARTS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_REROLL_PARTS";
  }
  protected:
  explicit C_REROLL_PARTS(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.C_REROLL_PARTS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_RESPAWN_CLICK final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_RESPAWN_CLICK) */ {
 public:
  inline C_RESPAWN_CLICK() : C_RESPAWN_CLICK(nullptr) {}
  ~C_RESPAWN_CLICK() override;
  explicit constexpr C_RESPAWN_CLICK(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_RESPAWN_CLICK(const C_RESPAWN_CLICK& from);
  C_RESPAWN_CLICK(C_RESPAWN_CLICK&& from) noexcept
    : C_RESPAWN_CLICK() {
    *this = ::std::move(from);
  }

  inline C_RESPAWN_CLICK& operator=(const C_RESPAWN_CLICK& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_RESPAWN_CLICK& operator=(C_RESPAWN_CLICK&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_RESPAWN_CLICK& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_RESPAWN_CLICK* internal_default_instance() {
    return reinterpret_cast<const C_RESPAWN_CLICK*>(
               &_C_RESPAWN_CLICK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(C_RESPAWN_CLICK& a, C_RESPAWN_CLICK& b) {
    a.Swap(&b);
  }
  inline void Swap(C_RESPAWN_CLICK* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_RESPAWN_CLICK* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_RESPAWN_CLICK* New() const final {
    return new C_RESPAWN_CLICK();
  }

  C_RESPAWN_CLICK* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_RESPAWN_CLICK>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_RESPAWN_CLICK& from);
  void MergeFrom(const C_RESPAWN_CLICK& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_RESPAWN_CLICK* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_RESPAWN_CLICK";
  }
  protected:
  explicit C_RESPAWN_CLICK(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.C_RESPAWN_CLICK)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_SPAWN_POINT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_SPAWN_POINT) */ {
 public:
  inline S_SPAWN_POINT() : S_SPAWN_POINT(nullptr) {}
  ~S_SPAWN_POINT() override;
  explicit constexpr S_SPAWN_POINT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_SPAWN_POINT(const S_SPAWN_POINT& from);
  S_SPAWN_POINT(S_SPAWN_POINT&& from) noexcept
    : S_SPAWN_POINT() {
    *this = ::std::move(from);
  }

  inline S_SPAWN_POINT& operator=(const S_SPAWN_POINT& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_SPAWN_POINT& operator=(S_SPAWN_POINT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_SPAWN_POINT& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_SPAWN_POINT* internal_default_instance() {
    return reinterpret_cast<const S_SPAWN_POINT*>(
               &_S_SPAWN_POINT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(S_SPAWN_POINT& a, S_SPAWN_POINT& b) {
    a.Swap(&b);
  }
  inline void Swap(S_SPAWN_POINT* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_SPAWN_POINT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_SPAWN_POINT* New() const final {
    return new S_SPAWN_POINT();
  }

  S_SPAWN_POINT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_SPAWN_POINT>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_SPAWN_POINT& from);
  void MergeFrom(const S_SPAWN_POINT& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_SPAWN_POINT* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_SPAWN_POINT";
  }
  protected:
  explicit S_SPAWN_POINT(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 1,
    kPlayerInfoFieldNumber = 4,
    kHealthPointFieldNumber = 2,
    kSpawnPointIndexFieldNumber = 3,
  };
  // .Protocol.Player player = 1;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::Protocol::Player& player() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::Player* release_player();
  ::Protocol::Player* mutable_player();
  void set_allocated_player(::Protocol::Player* player);
  private:
  const ::Protocol::Player& _internal_player() const;
  ::Protocol::Player* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::Protocol::Player* player);
  ::Protocol::Player* unsafe_arena_release_player();

  // .Protocol.PlayerInfo playerInfo = 4;
  bool has_playerinfo() const;
  private:
  bool _internal_has_playerinfo() const;
  public:
  void clear_playerinfo();
  const ::Protocol::PlayerInfo& playerinfo() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::PlayerInfo* release_playerinfo();
  ::Protocol::PlayerInfo* mutable_playerinfo();
  void set_allocated_playerinfo(::Protocol::PlayerInfo* playerinfo);
  private:
  const ::Protocol::PlayerInfo& _internal_playerinfo() const;
  ::Protocol::PlayerInfo* _internal_mutable_playerinfo();
  public:
  void unsafe_arena_set_allocated_playerinfo(
      ::Protocol::PlayerInfo* playerinfo);
  ::Protocol::PlayerInfo* unsafe_arena_release_playerinfo();

  // int32 healthPoint = 2;
  void clear_healthpoint();
  ::PROTOBUF_NAMESPACE_ID::int32 healthpoint() const;
  void set_healthpoint(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_healthpoint() const;
  void _internal_set_healthpoint(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 spawnPointIndex = 3;
  void clear_spawnpointindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 spawnpointindex() const;
  void set_spawnpointindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_spawnpointindex() const;
  void _internal_set_spawnpointindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_SPAWN_POINT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::Player* player_;
  ::Protocol::PlayerInfo* playerinfo_;
  ::PROTOBUF_NAMESPACE_ID::int32 healthpoint_;
  ::PROTOBUF_NAMESPACE_ID::uint32 spawnpointindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_ATTACK_PLAYER final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_ATTACK_PLAYER) */ {
 public:
  inline C_ATTACK_PLAYER() : C_ATTACK_PLAYER(nullptr) {}
  ~C_ATTACK_PLAYER() override;
  explicit constexpr C_ATTACK_PLAYER(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_ATTACK_PLAYER(const C_ATTACK_PLAYER& from);
  C_ATTACK_PLAYER(C_ATTACK_PLAYER&& from) noexcept
    : C_ATTACK_PLAYER() {
    *this = ::std::move(from);
  }

  inline C_ATTACK_PLAYER& operator=(const C_ATTACK_PLAYER& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_ATTACK_PLAYER& operator=(C_ATTACK_PLAYER&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_ATTACK_PLAYER& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_ATTACK_PLAYER* internal_default_instance() {
    return reinterpret_cast<const C_ATTACK_PLAYER*>(
               &_C_ATTACK_PLAYER_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(C_ATTACK_PLAYER& a, C_ATTACK_PLAYER& b) {
    a.Swap(&b);
  }
  inline void Swap(C_ATTACK_PLAYER* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_ATTACK_PLAYER* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_ATTACK_PLAYER* New() const final {
    return new C_ATTACK_PLAYER();
  }

  C_ATTACK_PLAYER* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_ATTACK_PLAYER>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_ATTACK_PLAYER& from);
  void MergeFrom(const C_ATTACK_PLAYER& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_ATTACK_PLAYER* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_ATTACK_PLAYER";
  }
  protected:
  explicit C_ATTACK_PLAYER(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttackedPlayerFieldNumber = 1,
    kTransformFieldNumber = 3,
    kAttackPointFieldNumber = 2,
  };
  // .Protocol.Player attackedPlayer = 1;
  bool has_attackedplayer() const;
  private:
  bool _internal_has_attackedplayer() const;
  public:
  void clear_attackedplayer();
  const ::Protocol::Player& attackedplayer() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::Player* release_attackedplayer();
  ::Protocol::Player* mutable_attackedplayer();
  void set_allocated_attackedplayer(::Protocol::Player* attackedplayer);
  private:
  const ::Protocol::Player& _internal_attackedplayer() const;
  ::Protocol::Player* _internal_mutable_attackedplayer();
  public:
  void unsafe_arena_set_allocated_attackedplayer(
      ::Protocol::Player* attackedplayer);
  ::Protocol::Player* unsafe_arena_release_attackedplayer();

  // .Protocol.Transform transform = 3;
  bool has_transform() const;
  private:
  bool _internal_has_transform() const;
  public:
  void clear_transform();
  const ::Protocol::Transform& transform() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::Transform* release_transform();
  ::Protocol::Transform* mutable_transform();
  void set_allocated_transform(::Protocol::Transform* transform);
  private:
  const ::Protocol::Transform& _internal_transform() const;
  ::Protocol::Transform* _internal_mutable_transform();
  public:
  void unsafe_arena_set_allocated_transform(
      ::Protocol::Transform* transform);
  ::Protocol::Transform* unsafe_arena_release_transform();

  // .Protocol.AttackPoint attackPoint = 2;
  void clear_attackpoint();
  ::Protocol::AttackPoint attackpoint() const;
  void set_attackpoint(::Protocol::AttackPoint value);
  private:
  ::Protocol::AttackPoint _internal_attackpoint() const;
  void _internal_set_attackpoint(::Protocol::AttackPoint value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_ATTACK_PLAYER)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::Player* attackedplayer_;
  ::Protocol::Transform* transform_;
  int attackpoint_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_ATTACKED_PLAYER final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_ATTACKED_PLAYER) */ {
 public:
  inline S_ATTACKED_PLAYER() : S_ATTACKED_PLAYER(nullptr) {}
  ~S_ATTACKED_PLAYER() override;
  explicit constexpr S_ATTACKED_PLAYER(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ATTACKED_PLAYER(const S_ATTACKED_PLAYER& from);
  S_ATTACKED_PLAYER(S_ATTACKED_PLAYER&& from) noexcept
    : S_ATTACKED_PLAYER() {
    *this = ::std::move(from);
  }

  inline S_ATTACKED_PLAYER& operator=(const S_ATTACKED_PLAYER& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ATTACKED_PLAYER& operator=(S_ATTACKED_PLAYER&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ATTACKED_PLAYER& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ATTACKED_PLAYER* internal_default_instance() {
    return reinterpret_cast<const S_ATTACKED_PLAYER*>(
               &_S_ATTACKED_PLAYER_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(S_ATTACKED_PLAYER& a, S_ATTACKED_PLAYER& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ATTACKED_PLAYER* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ATTACKED_PLAYER* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_ATTACKED_PLAYER* New() const final {
    return new S_ATTACKED_PLAYER();
  }

  S_ATTACKED_PLAYER* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_ATTACKED_PLAYER>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_ATTACKED_PLAYER& from);
  void MergeFrom(const S_ATTACKED_PLAYER& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ATTACKED_PLAYER* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_ATTACKED_PLAYER";
  }
  protected:
  explicit S_ATTACKED_PLAYER(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttackPlayerFieldNumber = 1,
    kAttackedPlayerFieldNumber = 2,
    kTransformFieldNumber = 4,
    kAttackPointFieldNumber = 3,
    kAttackedPlayerHealthPointFieldNumber = 5,
  };
  // .Protocol.Player attackPlayer = 1;
  bool has_attackplayer() const;
  private:
  bool _internal_has_attackplayer() const;
  public:
  void clear_attackplayer();
  const ::Protocol::Player& attackplayer() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::Player* release_attackplayer();
  ::Protocol::Player* mutable_attackplayer();
  void set_allocated_attackplayer(::Protocol::Player* attackplayer);
  private:
  const ::Protocol::Player& _internal_attackplayer() const;
  ::Protocol::Player* _internal_mutable_attackplayer();
  public:
  void unsafe_arena_set_allocated_attackplayer(
      ::Protocol::Player* attackplayer);
  ::Protocol::Player* unsafe_arena_release_attackplayer();

  // .Protocol.Player attackedPlayer = 2;
  bool has_attackedplayer() const;
  private:
  bool _internal_has_attackedplayer() const;
  public:
  void clear_attackedplayer();
  const ::Protocol::Player& attackedplayer() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::Player* release_attackedplayer();
  ::Protocol::Player* mutable_attackedplayer();
  void set_allocated_attackedplayer(::Protocol::Player* attackedplayer);
  private:
  const ::Protocol::Player& _internal_attackedplayer() const;
  ::Protocol::Player* _internal_mutable_attackedplayer();
  public:
  void unsafe_arena_set_allocated_attackedplayer(
      ::Protocol::Player* attackedplayer);
  ::Protocol::Player* unsafe_arena_release_attackedplayer();

  // .Protocol.Transform transform = 4;
  bool has_transform() const;
  private:
  bool _internal_has_transform() const;
  public:
  void clear_transform();
  const ::Protocol::Transform& transform() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::Transform* release_transform();
  ::Protocol::Transform* mutable_transform();
  void set_allocated_transform(::Protocol::Transform* transform);
  private:
  const ::Protocol::Transform& _internal_transform() const;
  ::Protocol::Transform* _internal_mutable_transform();
  public:
  void unsafe_arena_set_allocated_transform(
      ::Protocol::Transform* transform);
  ::Protocol::Transform* unsafe_arena_release_transform();

  // .Protocol.AttackPoint attackPoint = 3;
  void clear_attackpoint();
  ::Protocol::AttackPoint attackpoint() const;
  void set_attackpoint(::Protocol::AttackPoint value);
  private:
  ::Protocol::AttackPoint _internal_attackpoint() const;
  void _internal_set_attackpoint(::Protocol::AttackPoint value);
  public:

  // int32 attackedPlayerHealthPoint = 5;
  void clear_attackedplayerhealthpoint();
  ::PROTOBUF_NAMESPACE_ID::int32 attackedplayerhealthpoint() const;
  void set_attackedplayerhealthpoint(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_attackedplayerhealthpoint() const;
  void _internal_set_attackedplayerhealthpoint(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_ATTACKED_PLAYER)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::Player* attackplayer_;
  ::Protocol::Player* attackedplayer_;
  ::Protocol::Transform* transform_;
  int attackpoint_;
  ::PROTOBUF_NAMESPACE_ID::int32 attackedplayerhealthpoint_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_DEATH_PLAYER final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_DEATH_PLAYER) */ {
 public:
  inline S_DEATH_PLAYER() : S_DEATH_PLAYER(nullptr) {}
  ~S_DEATH_PLAYER() override;
  explicit constexpr S_DEATH_PLAYER(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_DEATH_PLAYER(const S_DEATH_PLAYER& from);
  S_DEATH_PLAYER(S_DEATH_PLAYER&& from) noexcept
    : S_DEATH_PLAYER() {
    *this = ::std::move(from);
  }

  inline S_DEATH_PLAYER& operator=(const S_DEATH_PLAYER& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_DEATH_PLAYER& operator=(S_DEATH_PLAYER&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_DEATH_PLAYER& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_DEATH_PLAYER* internal_default_instance() {
    return reinterpret_cast<const S_DEATH_PLAYER*>(
               &_S_DEATH_PLAYER_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(S_DEATH_PLAYER& a, S_DEATH_PLAYER& b) {
    a.Swap(&b);
  }
  inline void Swap(S_DEATH_PLAYER* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_DEATH_PLAYER* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_DEATH_PLAYER* New() const final {
    return new S_DEATH_PLAYER();
  }

  S_DEATH_PLAYER* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_DEATH_PLAYER>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_DEATH_PLAYER& from);
  void MergeFrom(const S_DEATH_PLAYER& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_DEATH_PLAYER* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_DEATH_PLAYER";
  }
  protected:
  explicit S_DEATH_PLAYER(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttackPlayerFieldNumber = 1,
    kAttackedPlayerFieldNumber = 2,
    kTransformFieldNumber = 3,
  };
  // .Protocol.Player attackPlayer = 1;
  bool has_attackplayer() const;
  private:
  bool _internal_has_attackplayer() const;
  public:
  void clear_attackplayer();
  const ::Protocol::Player& attackplayer() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::Player* release_attackplayer();
  ::Protocol::Player* mutable_attackplayer();
  void set_allocated_attackplayer(::Protocol::Player* attackplayer);
  private:
  const ::Protocol::Player& _internal_attackplayer() const;
  ::Protocol::Player* _internal_mutable_attackplayer();
  public:
  void unsafe_arena_set_allocated_attackplayer(
      ::Protocol::Player* attackplayer);
  ::Protocol::Player* unsafe_arena_release_attackplayer();

  // .Protocol.Player attackedPlayer = 2;
  bool has_attackedplayer() const;
  private:
  bool _internal_has_attackedplayer() const;
  public:
  void clear_attackedplayer();
  const ::Protocol::Player& attackedplayer() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::Player* release_attackedplayer();
  ::Protocol::Player* mutable_attackedplayer();
  void set_allocated_attackedplayer(::Protocol::Player* attackedplayer);
  private:
  const ::Protocol::Player& _internal_attackedplayer() const;
  ::Protocol::Player* _internal_mutable_attackedplayer();
  public:
  void unsafe_arena_set_allocated_attackedplayer(
      ::Protocol::Player* attackedplayer);
  ::Protocol::Player* unsafe_arena_release_attackedplayer();

  // .Protocol.Transform transform = 3;
  bool has_transform() const;
  private:
  bool _internal_has_transform() const;
  public:
  void clear_transform();
  const ::Protocol::Transform& transform() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::Transform* release_transform();
  ::Protocol::Transform* mutable_transform();
  void set_allocated_transform(::Protocol::Transform* transform);
  private:
  const ::Protocol::Transform& _internal_transform() const;
  ::Protocol::Transform* _internal_mutable_transform();
  public:
  void unsafe_arena_set_allocated_transform(
      ::Protocol::Transform* transform);
  ::Protocol::Transform* unsafe_arena_release_transform();

  // @@protoc_insertion_point(class_scope:Protocol.S_DEATH_PLAYER)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::Player* attackplayer_;
  ::Protocol::Player* attackedplayer_;
  ::Protocol::Transform* transform_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_CHAT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_CHAT) */ {
 public:
  inline C_CHAT() : C_CHAT(nullptr) {}
  ~C_CHAT() override;
  explicit constexpr C_CHAT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_CHAT(const C_CHAT& from);
  C_CHAT(C_CHAT&& from) noexcept
    : C_CHAT() {
    *this = ::std::move(from);
  }

  inline C_CHAT& operator=(const C_CHAT& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_CHAT& operator=(C_CHAT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_CHAT& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_CHAT* internal_default_instance() {
    return reinterpret_cast<const C_CHAT*>(
               &_C_CHAT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(C_CHAT& a, C_CHAT& b) {
    a.Swap(&b);
  }
  inline void Swap(C_CHAT* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_CHAT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_CHAT* New() const final {
    return new C_CHAT();
  }

  C_CHAT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_CHAT>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_CHAT& from);
  void MergeFrom(const C_CHAT& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_CHAT* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_CHAT";
  }
  protected:
  explicit C_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
  };
  // string msg = 1;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_CHAT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_CHAT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_CHAT) */ {
 public:
  inline S_CHAT() : S_CHAT(nullptr) {}
  ~S_CHAT() override;
  explicit constexpr S_CHAT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_CHAT(const S_CHAT& from);
  S_CHAT(S_CHAT&& from) noexcept
    : S_CHAT() {
    *this = ::std::move(from);
  }

  inline S_CHAT& operator=(const S_CHAT& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_CHAT& operator=(S_CHAT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_CHAT& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_CHAT* internal_default_instance() {
    return reinterpret_cast<const S_CHAT*>(
               &_S_CHAT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(S_CHAT& a, S_CHAT& b) {
    a.Swap(&b);
  }
  inline void Swap(S_CHAT* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_CHAT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_CHAT* New() const final {
    return new S_CHAT();
  }

  S_CHAT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_CHAT>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_CHAT& from);
  void MergeFrom(const S_CHAT& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_CHAT* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_CHAT";
  }
  protected:
  explicit S_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // uint64 playerId = 1;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::uint64 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_CHAT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::uint64 playerid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// C_LOGIN

// -------------------------------------------------------------------

// S_LOGIN

// bool success = 1;
inline void S_LOGIN::clear_success() {
  success_ = false;
}
inline bool S_LOGIN::_internal_success() const {
  return success_;
}
inline bool S_LOGIN::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_LOGIN.success)
  return _internal_success();
}
inline void S_LOGIN::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void S_LOGIN::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_LOGIN.success)
}

// .Protocol.Player player = 2;
inline bool S_LOGIN::_internal_has_player() const {
  return this != internal_default_instance() && player_ != nullptr;
}
inline bool S_LOGIN::has_player() const {
  return _internal_has_player();
}
inline const ::Protocol::Player& S_LOGIN::_internal_player() const {
  const ::Protocol::Player* p = player_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Player&>(
      ::Protocol::_Player_default_instance_);
}
inline const ::Protocol::Player& S_LOGIN::player() const {
  // @@protoc_insertion_point(field_get:Protocol.S_LOGIN.player)
  return _internal_player();
}
inline void S_LOGIN::unsafe_arena_set_allocated_player(
    ::Protocol::Player* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_LOGIN.player)
}
inline ::Protocol::Player* S_LOGIN::release_player() {
  
  ::Protocol::Player* temp = player_;
  player_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::Player* S_LOGIN::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:Protocol.S_LOGIN.player)
  
  ::Protocol::Player* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::Protocol::Player* S_LOGIN::_internal_mutable_player() {
  
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Player>(GetArenaForAllocation());
    player_ = p;
  }
  return player_;
}
inline ::Protocol::Player* S_LOGIN::mutable_player() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_LOGIN.player)
  return _internal_mutable_player();
}
inline void S_LOGIN::set_allocated_player(::Protocol::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player));
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_LOGIN.player)
}

// -------------------------------------------------------------------

// C_CREATE_ROOM

// -------------------------------------------------------------------

// S_CREATE_ROOM

// bool success = 1;
inline void S_CREATE_ROOM::clear_success() {
  success_ = false;
}
inline bool S_CREATE_ROOM::_internal_success() const {
  return success_;
}
inline bool S_CREATE_ROOM::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CREATE_ROOM.success)
  return _internal_success();
}
inline void S_CREATE_ROOM::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void S_CREATE_ROOM::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_CREATE_ROOM.success)
}

// .Protocol.RoomFailReason reason = 2;
inline void S_CREATE_ROOM::clear_reason() {
  reason_ = 0;
}
inline ::Protocol::RoomFailReason S_CREATE_ROOM::_internal_reason() const {
  return static_cast< ::Protocol::RoomFailReason >(reason_);
}
inline ::Protocol::RoomFailReason S_CREATE_ROOM::reason() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CREATE_ROOM.reason)
  return _internal_reason();
}
inline void S_CREATE_ROOM::_internal_set_reason(::Protocol::RoomFailReason value) {
  
  reason_ = value;
}
inline void S_CREATE_ROOM::set_reason(::Protocol::RoomFailReason value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:Protocol.S_CREATE_ROOM.reason)
}

// .Protocol.RoomInfo roomInfo = 3;
inline bool S_CREATE_ROOM::_internal_has_roominfo() const {
  return this != internal_default_instance() && roominfo_ != nullptr;
}
inline bool S_CREATE_ROOM::has_roominfo() const {
  return _internal_has_roominfo();
}
inline const ::Protocol::RoomInfo& S_CREATE_ROOM::_internal_roominfo() const {
  const ::Protocol::RoomInfo* p = roominfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::RoomInfo&>(
      ::Protocol::_RoomInfo_default_instance_);
}
inline const ::Protocol::RoomInfo& S_CREATE_ROOM::roominfo() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CREATE_ROOM.roomInfo)
  return _internal_roominfo();
}
inline void S_CREATE_ROOM::unsafe_arena_set_allocated_roominfo(
    ::Protocol::RoomInfo* roominfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roominfo_);
  }
  roominfo_ = roominfo;
  if (roominfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_CREATE_ROOM.roomInfo)
}
inline ::Protocol::RoomInfo* S_CREATE_ROOM::release_roominfo() {
  
  ::Protocol::RoomInfo* temp = roominfo_;
  roominfo_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::RoomInfo* S_CREATE_ROOM::unsafe_arena_release_roominfo() {
  // @@protoc_insertion_point(field_release:Protocol.S_CREATE_ROOM.roomInfo)
  
  ::Protocol::RoomInfo* temp = roominfo_;
  roominfo_ = nullptr;
  return temp;
}
inline ::Protocol::RoomInfo* S_CREATE_ROOM::_internal_mutable_roominfo() {
  
  if (roominfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::RoomInfo>(GetArenaForAllocation());
    roominfo_ = p;
  }
  return roominfo_;
}
inline ::Protocol::RoomInfo* S_CREATE_ROOM::mutable_roominfo() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_CREATE_ROOM.roomInfo)
  return _internal_mutable_roominfo();
}
inline void S_CREATE_ROOM::set_allocated_roominfo(::Protocol::RoomInfo* roominfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(roominfo_);
  }
  if (roominfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roominfo));
    if (message_arena != submessage_arena) {
      roominfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roominfo, submessage_arena);
    }
    
  } else {
    
  }
  roominfo_ = roominfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_CREATE_ROOM.roomInfo)
}

// .Protocol.Player player = 4;
inline bool S_CREATE_ROOM::_internal_has_player() const {
  return this != internal_default_instance() && player_ != nullptr;
}
inline bool S_CREATE_ROOM::has_player() const {
  return _internal_has_player();
}
inline const ::Protocol::Player& S_CREATE_ROOM::_internal_player() const {
  const ::Protocol::Player* p = player_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Player&>(
      ::Protocol::_Player_default_instance_);
}
inline const ::Protocol::Player& S_CREATE_ROOM::player() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CREATE_ROOM.player)
  return _internal_player();
}
inline void S_CREATE_ROOM::unsafe_arena_set_allocated_player(
    ::Protocol::Player* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_CREATE_ROOM.player)
}
inline ::Protocol::Player* S_CREATE_ROOM::release_player() {
  
  ::Protocol::Player* temp = player_;
  player_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::Player* S_CREATE_ROOM::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:Protocol.S_CREATE_ROOM.player)
  
  ::Protocol::Player* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::Protocol::Player* S_CREATE_ROOM::_internal_mutable_player() {
  
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Player>(GetArenaForAllocation());
    player_ = p;
  }
  return player_;
}
inline ::Protocol::Player* S_CREATE_ROOM::mutable_player() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_CREATE_ROOM.player)
  return _internal_mutable_player();
}
inline void S_CREATE_ROOM::set_allocated_player(::Protocol::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player));
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_CREATE_ROOM.player)
}

// -------------------------------------------------------------------

// C_ENTER_ROOM

// uint32 roomCode = 1;
inline void C_ENTER_ROOM::clear_roomcode() {
  roomcode_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 C_ENTER_ROOM::_internal_roomcode() const {
  return roomcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 C_ENTER_ROOM::roomcode() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ENTER_ROOM.roomCode)
  return _internal_roomcode();
}
inline void C_ENTER_ROOM::_internal_set_roomcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  roomcode_ = value;
}
inline void C_ENTER_ROOM::set_roomcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_roomcode(value);
  // @@protoc_insertion_point(field_set:Protocol.C_ENTER_ROOM.roomCode)
}

// -------------------------------------------------------------------

// S_ENTER_ROOM

// bool success = 1;
inline void S_ENTER_ROOM::clear_success() {
  success_ = false;
}
inline bool S_ENTER_ROOM::_internal_success() const {
  return success_;
}
inline bool S_ENTER_ROOM::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ENTER_ROOM.success)
  return _internal_success();
}
inline void S_ENTER_ROOM::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void S_ENTER_ROOM::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ENTER_ROOM.success)
}

// .Protocol.RoomFailReason reason = 2;
inline void S_ENTER_ROOM::clear_reason() {
  reason_ = 0;
}
inline ::Protocol::RoomFailReason S_ENTER_ROOM::_internal_reason() const {
  return static_cast< ::Protocol::RoomFailReason >(reason_);
}
inline ::Protocol::RoomFailReason S_ENTER_ROOM::reason() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ENTER_ROOM.reason)
  return _internal_reason();
}
inline void S_ENTER_ROOM::_internal_set_reason(::Protocol::RoomFailReason value) {
  
  reason_ = value;
}
inline void S_ENTER_ROOM::set_reason(::Protocol::RoomFailReason value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ENTER_ROOM.reason)
}

// .Protocol.RoomInfo roomInfo = 3;
inline bool S_ENTER_ROOM::_internal_has_roominfo() const {
  return this != internal_default_instance() && roominfo_ != nullptr;
}
inline bool S_ENTER_ROOM::has_roominfo() const {
  return _internal_has_roominfo();
}
inline const ::Protocol::RoomInfo& S_ENTER_ROOM::_internal_roominfo() const {
  const ::Protocol::RoomInfo* p = roominfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::RoomInfo&>(
      ::Protocol::_RoomInfo_default_instance_);
}
inline const ::Protocol::RoomInfo& S_ENTER_ROOM::roominfo() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ENTER_ROOM.roomInfo)
  return _internal_roominfo();
}
inline void S_ENTER_ROOM::unsafe_arena_set_allocated_roominfo(
    ::Protocol::RoomInfo* roominfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roominfo_);
  }
  roominfo_ = roominfo;
  if (roominfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_ENTER_ROOM.roomInfo)
}
inline ::Protocol::RoomInfo* S_ENTER_ROOM::release_roominfo() {
  
  ::Protocol::RoomInfo* temp = roominfo_;
  roominfo_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::RoomInfo* S_ENTER_ROOM::unsafe_arena_release_roominfo() {
  // @@protoc_insertion_point(field_release:Protocol.S_ENTER_ROOM.roomInfo)
  
  ::Protocol::RoomInfo* temp = roominfo_;
  roominfo_ = nullptr;
  return temp;
}
inline ::Protocol::RoomInfo* S_ENTER_ROOM::_internal_mutable_roominfo() {
  
  if (roominfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::RoomInfo>(GetArenaForAllocation());
    roominfo_ = p;
  }
  return roominfo_;
}
inline ::Protocol::RoomInfo* S_ENTER_ROOM::mutable_roominfo() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_ENTER_ROOM.roomInfo)
  return _internal_mutable_roominfo();
}
inline void S_ENTER_ROOM::set_allocated_roominfo(::Protocol::RoomInfo* roominfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(roominfo_);
  }
  if (roominfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roominfo));
    if (message_arena != submessage_arena) {
      roominfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roominfo, submessage_arena);
    }
    
  } else {
    
  }
  roominfo_ = roominfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_ENTER_ROOM.roomInfo)
}

// repeated .Protocol.Player players = 4;
inline int S_ENTER_ROOM::_internal_players_size() const {
  return players_.size();
}
inline int S_ENTER_ROOM::players_size() const {
  return _internal_players_size();
}
inline ::Protocol::Player* S_ENTER_ROOM::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_ENTER_ROOM.players)
  return players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Player >*
S_ENTER_ROOM::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_ENTER_ROOM.players)
  return &players_;
}
inline const ::Protocol::Player& S_ENTER_ROOM::_internal_players(int index) const {
  return players_.Get(index);
}
inline const ::Protocol::Player& S_ENTER_ROOM::players(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_ENTER_ROOM.players)
  return _internal_players(index);
}
inline ::Protocol::Player* S_ENTER_ROOM::_internal_add_players() {
  return players_.Add();
}
inline ::Protocol::Player* S_ENTER_ROOM::add_players() {
  // @@protoc_insertion_point(field_add:Protocol.S_ENTER_ROOM.players)
  return _internal_add_players();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Player >&
S_ENTER_ROOM::players() const {
  // @@protoc_insertion_point(field_list:Protocol.S_ENTER_ROOM.players)
  return players_;
}

// -------------------------------------------------------------------

// S_ANOTHER_ENTER_ROOM

// .Protocol.Player player = 1;
inline bool S_ANOTHER_ENTER_ROOM::_internal_has_player() const {
  return this != internal_default_instance() && player_ != nullptr;
}
inline bool S_ANOTHER_ENTER_ROOM::has_player() const {
  return _internal_has_player();
}
inline const ::Protocol::Player& S_ANOTHER_ENTER_ROOM::_internal_player() const {
  const ::Protocol::Player* p = player_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Player&>(
      ::Protocol::_Player_default_instance_);
}
inline const ::Protocol::Player& S_ANOTHER_ENTER_ROOM::player() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ANOTHER_ENTER_ROOM.player)
  return _internal_player();
}
inline void S_ANOTHER_ENTER_ROOM::unsafe_arena_set_allocated_player(
    ::Protocol::Player* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_ANOTHER_ENTER_ROOM.player)
}
inline ::Protocol::Player* S_ANOTHER_ENTER_ROOM::release_player() {
  
  ::Protocol::Player* temp = player_;
  player_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::Player* S_ANOTHER_ENTER_ROOM::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:Protocol.S_ANOTHER_ENTER_ROOM.player)
  
  ::Protocol::Player* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::Protocol::Player* S_ANOTHER_ENTER_ROOM::_internal_mutable_player() {
  
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Player>(GetArenaForAllocation());
    player_ = p;
  }
  return player_;
}
inline ::Protocol::Player* S_ANOTHER_ENTER_ROOM::mutable_player() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_ANOTHER_ENTER_ROOM.player)
  return _internal_mutable_player();
}
inline void S_ANOTHER_ENTER_ROOM::set_allocated_player(::Protocol::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player));
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_ANOTHER_ENTER_ROOM.player)
}

// -------------------------------------------------------------------

// C_LEAVE_ROOM

// -------------------------------------------------------------------

// S_ANOTHER_LEAVE_ROOM

// .Protocol.Player player = 1;
inline bool S_ANOTHER_LEAVE_ROOM::_internal_has_player() const {
  return this != internal_default_instance() && player_ != nullptr;
}
inline bool S_ANOTHER_LEAVE_ROOM::has_player() const {
  return _internal_has_player();
}
inline const ::Protocol::Player& S_ANOTHER_LEAVE_ROOM::_internal_player() const {
  const ::Protocol::Player* p = player_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Player&>(
      ::Protocol::_Player_default_instance_);
}
inline const ::Protocol::Player& S_ANOTHER_LEAVE_ROOM::player() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ANOTHER_LEAVE_ROOM.player)
  return _internal_player();
}
inline void S_ANOTHER_LEAVE_ROOM::unsafe_arena_set_allocated_player(
    ::Protocol::Player* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_ANOTHER_LEAVE_ROOM.player)
}
inline ::Protocol::Player* S_ANOTHER_LEAVE_ROOM::release_player() {
  
  ::Protocol::Player* temp = player_;
  player_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::Player* S_ANOTHER_LEAVE_ROOM::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:Protocol.S_ANOTHER_LEAVE_ROOM.player)
  
  ::Protocol::Player* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::Protocol::Player* S_ANOTHER_LEAVE_ROOM::_internal_mutable_player() {
  
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Player>(GetArenaForAllocation());
    player_ = p;
  }
  return player_;
}
inline ::Protocol::Player* S_ANOTHER_LEAVE_ROOM::mutable_player() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_ANOTHER_LEAVE_ROOM.player)
  return _internal_mutable_player();
}
inline void S_ANOTHER_LEAVE_ROOM::set_allocated_player(::Protocol::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player));
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_ANOTHER_LEAVE_ROOM.player)
}

// uint64 hostId = 2;
inline void S_ANOTHER_LEAVE_ROOM::clear_hostid() {
  hostid_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 S_ANOTHER_LEAVE_ROOM::_internal_hostid() const {
  return hostid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 S_ANOTHER_LEAVE_ROOM::hostid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ANOTHER_LEAVE_ROOM.hostId)
  return _internal_hostid();
}
inline void S_ANOTHER_LEAVE_ROOM::_internal_set_hostid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  hostid_ = value;
}
inline void S_ANOTHER_LEAVE_ROOM::set_hostid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_hostid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ANOTHER_LEAVE_ROOM.hostId)
}

// -------------------------------------------------------------------

// C_ROOM_SETTING

// .Protocol.RoomInfo roomInfo = 1;
inline bool C_ROOM_SETTING::_internal_has_roominfo() const {
  return this != internal_default_instance() && roominfo_ != nullptr;
}
inline bool C_ROOM_SETTING::has_roominfo() const {
  return _internal_has_roominfo();
}
inline const ::Protocol::RoomInfo& C_ROOM_SETTING::_internal_roominfo() const {
  const ::Protocol::RoomInfo* p = roominfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::RoomInfo&>(
      ::Protocol::_RoomInfo_default_instance_);
}
inline const ::Protocol::RoomInfo& C_ROOM_SETTING::roominfo() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ROOM_SETTING.roomInfo)
  return _internal_roominfo();
}
inline void C_ROOM_SETTING::unsafe_arena_set_allocated_roominfo(
    ::Protocol::RoomInfo* roominfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roominfo_);
  }
  roominfo_ = roominfo;
  if (roominfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_ROOM_SETTING.roomInfo)
}
inline ::Protocol::RoomInfo* C_ROOM_SETTING::release_roominfo() {
  
  ::Protocol::RoomInfo* temp = roominfo_;
  roominfo_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::RoomInfo* C_ROOM_SETTING::unsafe_arena_release_roominfo() {
  // @@protoc_insertion_point(field_release:Protocol.C_ROOM_SETTING.roomInfo)
  
  ::Protocol::RoomInfo* temp = roominfo_;
  roominfo_ = nullptr;
  return temp;
}
inline ::Protocol::RoomInfo* C_ROOM_SETTING::_internal_mutable_roominfo() {
  
  if (roominfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::RoomInfo>(GetArenaForAllocation());
    roominfo_ = p;
  }
  return roominfo_;
}
inline ::Protocol::RoomInfo* C_ROOM_SETTING::mutable_roominfo() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_ROOM_SETTING.roomInfo)
  return _internal_mutable_roominfo();
}
inline void C_ROOM_SETTING::set_allocated_roominfo(::Protocol::RoomInfo* roominfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(roominfo_);
  }
  if (roominfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roominfo));
    if (message_arena != submessage_arena) {
      roominfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roominfo, submessage_arena);
    }
    
  } else {
    
  }
  roominfo_ = roominfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_ROOM_SETTING.roomInfo)
}

// -------------------------------------------------------------------

// S_ROOM_SETTING

// .Protocol.RoomInfo roomInfo = 1;
inline bool S_ROOM_SETTING::_internal_has_roominfo() const {
  return this != internal_default_instance() && roominfo_ != nullptr;
}
inline bool S_ROOM_SETTING::has_roominfo() const {
  return _internal_has_roominfo();
}
inline const ::Protocol::RoomInfo& S_ROOM_SETTING::_internal_roominfo() const {
  const ::Protocol::RoomInfo* p = roominfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::RoomInfo&>(
      ::Protocol::_RoomInfo_default_instance_);
}
inline const ::Protocol::RoomInfo& S_ROOM_SETTING::roominfo() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ROOM_SETTING.roomInfo)
  return _internal_roominfo();
}
inline void S_ROOM_SETTING::unsafe_arena_set_allocated_roominfo(
    ::Protocol::RoomInfo* roominfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roominfo_);
  }
  roominfo_ = roominfo;
  if (roominfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_ROOM_SETTING.roomInfo)
}
inline ::Protocol::RoomInfo* S_ROOM_SETTING::release_roominfo() {
  
  ::Protocol::RoomInfo* temp = roominfo_;
  roominfo_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::RoomInfo* S_ROOM_SETTING::unsafe_arena_release_roominfo() {
  // @@protoc_insertion_point(field_release:Protocol.S_ROOM_SETTING.roomInfo)
  
  ::Protocol::RoomInfo* temp = roominfo_;
  roominfo_ = nullptr;
  return temp;
}
inline ::Protocol::RoomInfo* S_ROOM_SETTING::_internal_mutable_roominfo() {
  
  if (roominfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::RoomInfo>(GetArenaForAllocation());
    roominfo_ = p;
  }
  return roominfo_;
}
inline ::Protocol::RoomInfo* S_ROOM_SETTING::mutable_roominfo() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_ROOM_SETTING.roomInfo)
  return _internal_mutable_roominfo();
}
inline void S_ROOM_SETTING::set_allocated_roominfo(::Protocol::RoomInfo* roominfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(roominfo_);
  }
  if (roominfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roominfo));
    if (message_arena != submessage_arena) {
      roominfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roominfo, submessage_arena);
    }
    
  } else {
    
  }
  roominfo_ = roominfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_ROOM_SETTING.roomInfo)
}

// -------------------------------------------------------------------

// C_ROOM_START

// -------------------------------------------------------------------

// S_ROOM_START

// .Protocol.RoomInfo roomInfo = 1;
inline bool S_ROOM_START::_internal_has_roominfo() const {
  return this != internal_default_instance() && roominfo_ != nullptr;
}
inline bool S_ROOM_START::has_roominfo() const {
  return _internal_has_roominfo();
}
inline const ::Protocol::RoomInfo& S_ROOM_START::_internal_roominfo() const {
  const ::Protocol::RoomInfo* p = roominfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::RoomInfo&>(
      ::Protocol::_RoomInfo_default_instance_);
}
inline const ::Protocol::RoomInfo& S_ROOM_START::roominfo() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ROOM_START.roomInfo)
  return _internal_roominfo();
}
inline void S_ROOM_START::unsafe_arena_set_allocated_roominfo(
    ::Protocol::RoomInfo* roominfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roominfo_);
  }
  roominfo_ = roominfo;
  if (roominfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_ROOM_START.roomInfo)
}
inline ::Protocol::RoomInfo* S_ROOM_START::release_roominfo() {
  
  ::Protocol::RoomInfo* temp = roominfo_;
  roominfo_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::RoomInfo* S_ROOM_START::unsafe_arena_release_roominfo() {
  // @@protoc_insertion_point(field_release:Protocol.S_ROOM_START.roomInfo)
  
  ::Protocol::RoomInfo* temp = roominfo_;
  roominfo_ = nullptr;
  return temp;
}
inline ::Protocol::RoomInfo* S_ROOM_START::_internal_mutable_roominfo() {
  
  if (roominfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::RoomInfo>(GetArenaForAllocation());
    roominfo_ = p;
  }
  return roominfo_;
}
inline ::Protocol::RoomInfo* S_ROOM_START::mutable_roominfo() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_ROOM_START.roomInfo)
  return _internal_mutable_roominfo();
}
inline void S_ROOM_START::set_allocated_roominfo(::Protocol::RoomInfo* roominfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(roominfo_);
  }
  if (roominfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roominfo));
    if (message_arena != submessage_arena) {
      roominfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roominfo, submessage_arena);
    }
    
  } else {
    
  }
  roominfo_ = roominfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_ROOM_START.roomInfo)
}

// .Protocol.RoundInfo roundInfo = 2;
inline bool S_ROOM_START::_internal_has_roundinfo() const {
  return this != internal_default_instance() && roundinfo_ != nullptr;
}
inline bool S_ROOM_START::has_roundinfo() const {
  return _internal_has_roundinfo();
}
inline const ::Protocol::RoundInfo& S_ROOM_START::_internal_roundinfo() const {
  const ::Protocol::RoundInfo* p = roundinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::RoundInfo&>(
      ::Protocol::_RoundInfo_default_instance_);
}
inline const ::Protocol::RoundInfo& S_ROOM_START::roundinfo() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ROOM_START.roundInfo)
  return _internal_roundinfo();
}
inline void S_ROOM_START::unsafe_arena_set_allocated_roundinfo(
    ::Protocol::RoundInfo* roundinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roundinfo_);
  }
  roundinfo_ = roundinfo;
  if (roundinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_ROOM_START.roundInfo)
}
inline ::Protocol::RoundInfo* S_ROOM_START::release_roundinfo() {
  
  ::Protocol::RoundInfo* temp = roundinfo_;
  roundinfo_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::RoundInfo* S_ROOM_START::unsafe_arena_release_roundinfo() {
  // @@protoc_insertion_point(field_release:Protocol.S_ROOM_START.roundInfo)
  
  ::Protocol::RoundInfo* temp = roundinfo_;
  roundinfo_ = nullptr;
  return temp;
}
inline ::Protocol::RoundInfo* S_ROOM_START::_internal_mutable_roundinfo() {
  
  if (roundinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::RoundInfo>(GetArenaForAllocation());
    roundinfo_ = p;
  }
  return roundinfo_;
}
inline ::Protocol::RoundInfo* S_ROOM_START::mutable_roundinfo() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_ROOM_START.roundInfo)
  return _internal_mutable_roundinfo();
}
inline void S_ROOM_START::set_allocated_roundinfo(::Protocol::RoundInfo* roundinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(roundinfo_);
  }
  if (roundinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roundinfo));
    if (message_arena != submessage_arena) {
      roundinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roundinfo, submessage_arena);
    }
    
  } else {
    
  }
  roundinfo_ = roundinfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_ROOM_START.roundInfo)
}

// repeated .Protocol.PlayerInfo players = 3;
inline int S_ROOM_START::_internal_players_size() const {
  return players_.size();
}
inline int S_ROOM_START::players_size() const {
  return _internal_players_size();
}
inline ::Protocol::PlayerInfo* S_ROOM_START::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_ROOM_START.players)
  return players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PlayerInfo >*
S_ROOM_START::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_ROOM_START.players)
  return &players_;
}
inline const ::Protocol::PlayerInfo& S_ROOM_START::_internal_players(int index) const {
  return players_.Get(index);
}
inline const ::Protocol::PlayerInfo& S_ROOM_START::players(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_ROOM_START.players)
  return _internal_players(index);
}
inline ::Protocol::PlayerInfo* S_ROOM_START::_internal_add_players() {
  return players_.Add();
}
inline ::Protocol::PlayerInfo* S_ROOM_START::add_players() {
  // @@protoc_insertion_point(field_add:Protocol.S_ROOM_START.players)
  return _internal_add_players();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PlayerInfo >&
S_ROOM_START::players() const {
  // @@protoc_insertion_point(field_list:Protocol.S_ROOM_START.players)
  return players_;
}

// repeated uint32 spawnPoint = 4;
inline int S_ROOM_START::_internal_spawnpoint_size() const {
  return spawnpoint_.size();
}
inline int S_ROOM_START::spawnpoint_size() const {
  return _internal_spawnpoint_size();
}
inline void S_ROOM_START::clear_spawnpoint() {
  spawnpoint_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 S_ROOM_START::_internal_spawnpoint(int index) const {
  return spawnpoint_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 S_ROOM_START::spawnpoint(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_ROOM_START.spawnPoint)
  return _internal_spawnpoint(index);
}
inline void S_ROOM_START::set_spawnpoint(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  spawnpoint_.Set(index, value);
  // @@protoc_insertion_point(field_set:Protocol.S_ROOM_START.spawnPoint)
}
inline void S_ROOM_START::_internal_add_spawnpoint(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  spawnpoint_.Add(value);
}
inline void S_ROOM_START::add_spawnpoint(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_spawnpoint(value);
  // @@protoc_insertion_point(field_add:Protocol.S_ROOM_START.spawnPoint)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
S_ROOM_START::_internal_spawnpoint() const {
  return spawnpoint_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
S_ROOM_START::spawnpoint() const {
  // @@protoc_insertion_point(field_list:Protocol.S_ROOM_START.spawnPoint)
  return _internal_spawnpoint();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
S_ROOM_START::_internal_mutable_spawnpoint() {
  return &spawnpoint_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
S_ROOM_START::mutable_spawnpoint() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_ROOM_START.spawnPoint)
  return _internal_mutable_spawnpoint();
}

// -------------------------------------------------------------------

// C_LOAD_COMPLETE

// -------------------------------------------------------------------

// S_ROUND_START

// .Protocol.RoundInfo roundInfo = 1;
inline bool S_ROUND_START::_internal_has_roundinfo() const {
  return this != internal_default_instance() && roundinfo_ != nullptr;
}
inline bool S_ROUND_START::has_roundinfo() const {
  return _internal_has_roundinfo();
}
inline const ::Protocol::RoundInfo& S_ROUND_START::_internal_roundinfo() const {
  const ::Protocol::RoundInfo* p = roundinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::RoundInfo&>(
      ::Protocol::_RoundInfo_default_instance_);
}
inline const ::Protocol::RoundInfo& S_ROUND_START::roundinfo() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ROUND_START.roundInfo)
  return _internal_roundinfo();
}
inline void S_ROUND_START::unsafe_arena_set_allocated_roundinfo(
    ::Protocol::RoundInfo* roundinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roundinfo_);
  }
  roundinfo_ = roundinfo;
  if (roundinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_ROUND_START.roundInfo)
}
inline ::Protocol::RoundInfo* S_ROUND_START::release_roundinfo() {
  
  ::Protocol::RoundInfo* temp = roundinfo_;
  roundinfo_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::RoundInfo* S_ROUND_START::unsafe_arena_release_roundinfo() {
  // @@protoc_insertion_point(field_release:Protocol.S_ROUND_START.roundInfo)
  
  ::Protocol::RoundInfo* temp = roundinfo_;
  roundinfo_ = nullptr;
  return temp;
}
inline ::Protocol::RoundInfo* S_ROUND_START::_internal_mutable_roundinfo() {
  
  if (roundinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::RoundInfo>(GetArenaForAllocation());
    roundinfo_ = p;
  }
  return roundinfo_;
}
inline ::Protocol::RoundInfo* S_ROUND_START::mutable_roundinfo() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_ROUND_START.roundInfo)
  return _internal_mutable_roundinfo();
}
inline void S_ROUND_START::set_allocated_roundinfo(::Protocol::RoundInfo* roundinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(roundinfo_);
  }
  if (roundinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roundinfo));
    if (message_arena != submessage_arena) {
      roundinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roundinfo, submessage_arena);
    }
    
  } else {
    
  }
  roundinfo_ = roundinfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_ROUND_START.roundInfo)
}

// repeated .Protocol.PlayerInfo players = 2;
inline int S_ROUND_START::_internal_players_size() const {
  return players_.size();
}
inline int S_ROUND_START::players_size() const {
  return _internal_players_size();
}
inline ::Protocol::PlayerInfo* S_ROUND_START::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_ROUND_START.players)
  return players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PlayerInfo >*
S_ROUND_START::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_ROUND_START.players)
  return &players_;
}
inline const ::Protocol::PlayerInfo& S_ROUND_START::_internal_players(int index) const {
  return players_.Get(index);
}
inline const ::Protocol::PlayerInfo& S_ROUND_START::players(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_ROUND_START.players)
  return _internal_players(index);
}
inline ::Protocol::PlayerInfo* S_ROUND_START::_internal_add_players() {
  return players_.Add();
}
inline ::Protocol::PlayerInfo* S_ROUND_START::add_players() {
  // @@protoc_insertion_point(field_add:Protocol.S_ROUND_START.players)
  return _internal_add_players();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PlayerInfo >&
S_ROUND_START::players() const {
  // @@protoc_insertion_point(field_list:Protocol.S_ROUND_START.players)
  return players_;
}

// -------------------------------------------------------------------

// S_SHOP_START

// .Protocol.RoundInfo roundInfo = 1;
inline bool S_SHOP_START::_internal_has_roundinfo() const {
  return this != internal_default_instance() && roundinfo_ != nullptr;
}
inline bool S_SHOP_START::has_roundinfo() const {
  return _internal_has_roundinfo();
}
inline const ::Protocol::RoundInfo& S_SHOP_START::_internal_roundinfo() const {
  const ::Protocol::RoundInfo* p = roundinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::RoundInfo&>(
      ::Protocol::_RoundInfo_default_instance_);
}
inline const ::Protocol::RoundInfo& S_SHOP_START::roundinfo() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SHOP_START.roundInfo)
  return _internal_roundinfo();
}
inline void S_SHOP_START::unsafe_arena_set_allocated_roundinfo(
    ::Protocol::RoundInfo* roundinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roundinfo_);
  }
  roundinfo_ = roundinfo;
  if (roundinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_SHOP_START.roundInfo)
}
inline ::Protocol::RoundInfo* S_SHOP_START::release_roundinfo() {
  
  ::Protocol::RoundInfo* temp = roundinfo_;
  roundinfo_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::RoundInfo* S_SHOP_START::unsafe_arena_release_roundinfo() {
  // @@protoc_insertion_point(field_release:Protocol.S_SHOP_START.roundInfo)
  
  ::Protocol::RoundInfo* temp = roundinfo_;
  roundinfo_ = nullptr;
  return temp;
}
inline ::Protocol::RoundInfo* S_SHOP_START::_internal_mutable_roundinfo() {
  
  if (roundinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::RoundInfo>(GetArenaForAllocation());
    roundinfo_ = p;
  }
  return roundinfo_;
}
inline ::Protocol::RoundInfo* S_SHOP_START::mutable_roundinfo() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_SHOP_START.roundInfo)
  return _internal_mutable_roundinfo();
}
inline void S_SHOP_START::set_allocated_roundinfo(::Protocol::RoundInfo* roundinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(roundinfo_);
  }
  if (roundinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roundinfo));
    if (message_arena != submessage_arena) {
      roundinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roundinfo, submessage_arena);
    }
    
  } else {
    
  }
  roundinfo_ = roundinfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_SHOP_START.roundInfo)
}

// .Protocol.Player player = 2;
inline bool S_SHOP_START::_internal_has_player() const {
  return this != internal_default_instance() && player_ != nullptr;
}
inline bool S_SHOP_START::has_player() const {
  return _internal_has_player();
}
inline const ::Protocol::Player& S_SHOP_START::_internal_player() const {
  const ::Protocol::Player* p = player_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Player&>(
      ::Protocol::_Player_default_instance_);
}
inline const ::Protocol::Player& S_SHOP_START::player() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SHOP_START.player)
  return _internal_player();
}
inline void S_SHOP_START::unsafe_arena_set_allocated_player(
    ::Protocol::Player* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_SHOP_START.player)
}
inline ::Protocol::Player* S_SHOP_START::release_player() {
  
  ::Protocol::Player* temp = player_;
  player_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::Player* S_SHOP_START::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:Protocol.S_SHOP_START.player)
  
  ::Protocol::Player* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::Protocol::Player* S_SHOP_START::_internal_mutable_player() {
  
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Player>(GetArenaForAllocation());
    player_ = p;
  }
  return player_;
}
inline ::Protocol::Player* S_SHOP_START::mutable_player() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_SHOP_START.player)
  return _internal_mutable_player();
}
inline void S_SHOP_START::set_allocated_player(::Protocol::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player));
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_SHOP_START.player)
}

// .Protocol.PlayerInfo playerInfo = 3;
inline bool S_SHOP_START::_internal_has_playerinfo() const {
  return this != internal_default_instance() && playerinfo_ != nullptr;
}
inline bool S_SHOP_START::has_playerinfo() const {
  return _internal_has_playerinfo();
}
inline const ::Protocol::PlayerInfo& S_SHOP_START::_internal_playerinfo() const {
  const ::Protocol::PlayerInfo* p = playerinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PlayerInfo&>(
      ::Protocol::_PlayerInfo_default_instance_);
}
inline const ::Protocol::PlayerInfo& S_SHOP_START::playerinfo() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SHOP_START.playerInfo)
  return _internal_playerinfo();
}
inline void S_SHOP_START::unsafe_arena_set_allocated_playerinfo(
    ::Protocol::PlayerInfo* playerinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playerinfo_);
  }
  playerinfo_ = playerinfo;
  if (playerinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_SHOP_START.playerInfo)
}
inline ::Protocol::PlayerInfo* S_SHOP_START::release_playerinfo() {
  
  ::Protocol::PlayerInfo* temp = playerinfo_;
  playerinfo_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::PlayerInfo* S_SHOP_START::unsafe_arena_release_playerinfo() {
  // @@protoc_insertion_point(field_release:Protocol.S_SHOP_START.playerInfo)
  
  ::Protocol::PlayerInfo* temp = playerinfo_;
  playerinfo_ = nullptr;
  return temp;
}
inline ::Protocol::PlayerInfo* S_SHOP_START::_internal_mutable_playerinfo() {
  
  if (playerinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PlayerInfo>(GetArenaForAllocation());
    playerinfo_ = p;
  }
  return playerinfo_;
}
inline ::Protocol::PlayerInfo* S_SHOP_START::mutable_playerinfo() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_SHOP_START.playerInfo)
  return _internal_mutable_playerinfo();
}
inline void S_SHOP_START::set_allocated_playerinfo(::Protocol::PlayerInfo* playerinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(playerinfo_);
  }
  if (playerinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playerinfo));
    if (message_arena != submessage_arena) {
      playerinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playerinfo, submessage_arena);
    }
    
  } else {
    
  }
  playerinfo_ = playerinfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_SHOP_START.playerInfo)
}

// repeated .Protocol.PartsInfo partsList = 4;
inline int S_SHOP_START::_internal_partslist_size() const {
  return partslist_.size();
}
inline int S_SHOP_START::partslist_size() const {
  return _internal_partslist_size();
}
inline ::Protocol::PartsInfo* S_SHOP_START::mutable_partslist(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_SHOP_START.partsList)
  return partslist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PartsInfo >*
S_SHOP_START::mutable_partslist() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_SHOP_START.partsList)
  return &partslist_;
}
inline const ::Protocol::PartsInfo& S_SHOP_START::_internal_partslist(int index) const {
  return partslist_.Get(index);
}
inline const ::Protocol::PartsInfo& S_SHOP_START::partslist(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_SHOP_START.partsList)
  return _internal_partslist(index);
}
inline ::Protocol::PartsInfo* S_SHOP_START::_internal_add_partslist() {
  return partslist_.Add();
}
inline ::Protocol::PartsInfo* S_SHOP_START::add_partslist() {
  // @@protoc_insertion_point(field_add:Protocol.S_SHOP_START.partsList)
  return _internal_add_partslist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PartsInfo >&
S_SHOP_START::partslist() const {
  // @@protoc_insertion_point(field_list:Protocol.S_SHOP_START.partsList)
  return partslist_;
}

// -------------------------------------------------------------------

// S_END_GAME

// .Protocol.RoundInfo roundInfo = 1;
inline bool S_END_GAME::_internal_has_roundinfo() const {
  return this != internal_default_instance() && roundinfo_ != nullptr;
}
inline bool S_END_GAME::has_roundinfo() const {
  return _internal_has_roundinfo();
}
inline const ::Protocol::RoundInfo& S_END_GAME::_internal_roundinfo() const {
  const ::Protocol::RoundInfo* p = roundinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::RoundInfo&>(
      ::Protocol::_RoundInfo_default_instance_);
}
inline const ::Protocol::RoundInfo& S_END_GAME::roundinfo() const {
  // @@protoc_insertion_point(field_get:Protocol.S_END_GAME.roundInfo)
  return _internal_roundinfo();
}
inline void S_END_GAME::unsafe_arena_set_allocated_roundinfo(
    ::Protocol::RoundInfo* roundinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roundinfo_);
  }
  roundinfo_ = roundinfo;
  if (roundinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_END_GAME.roundInfo)
}
inline ::Protocol::RoundInfo* S_END_GAME::release_roundinfo() {
  
  ::Protocol::RoundInfo* temp = roundinfo_;
  roundinfo_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::RoundInfo* S_END_GAME::unsafe_arena_release_roundinfo() {
  // @@protoc_insertion_point(field_release:Protocol.S_END_GAME.roundInfo)
  
  ::Protocol::RoundInfo* temp = roundinfo_;
  roundinfo_ = nullptr;
  return temp;
}
inline ::Protocol::RoundInfo* S_END_GAME::_internal_mutable_roundinfo() {
  
  if (roundinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::RoundInfo>(GetArenaForAllocation());
    roundinfo_ = p;
  }
  return roundinfo_;
}
inline ::Protocol::RoundInfo* S_END_GAME::mutable_roundinfo() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_END_GAME.roundInfo)
  return _internal_mutable_roundinfo();
}
inline void S_END_GAME::set_allocated_roundinfo(::Protocol::RoundInfo* roundinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(roundinfo_);
  }
  if (roundinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roundinfo));
    if (message_arena != submessage_arena) {
      roundinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roundinfo, submessage_arena);
    }
    
  } else {
    
  }
  roundinfo_ = roundinfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_END_GAME.roundInfo)
}

// -------------------------------------------------------------------

// S_RESULT_START

// .Protocol.RoundInfo roundInfo = 1;
inline bool S_RESULT_START::_internal_has_roundinfo() const {
  return this != internal_default_instance() && roundinfo_ != nullptr;
}
inline bool S_RESULT_START::has_roundinfo() const {
  return _internal_has_roundinfo();
}
inline const ::Protocol::RoundInfo& S_RESULT_START::_internal_roundinfo() const {
  const ::Protocol::RoundInfo* p = roundinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::RoundInfo&>(
      ::Protocol::_RoundInfo_default_instance_);
}
inline const ::Protocol::RoundInfo& S_RESULT_START::roundinfo() const {
  // @@protoc_insertion_point(field_get:Protocol.S_RESULT_START.roundInfo)
  return _internal_roundinfo();
}
inline void S_RESULT_START::unsafe_arena_set_allocated_roundinfo(
    ::Protocol::RoundInfo* roundinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roundinfo_);
  }
  roundinfo_ = roundinfo;
  if (roundinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_RESULT_START.roundInfo)
}
inline ::Protocol::RoundInfo* S_RESULT_START::release_roundinfo() {
  
  ::Protocol::RoundInfo* temp = roundinfo_;
  roundinfo_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::RoundInfo* S_RESULT_START::unsafe_arena_release_roundinfo() {
  // @@protoc_insertion_point(field_release:Protocol.S_RESULT_START.roundInfo)
  
  ::Protocol::RoundInfo* temp = roundinfo_;
  roundinfo_ = nullptr;
  return temp;
}
inline ::Protocol::RoundInfo* S_RESULT_START::_internal_mutable_roundinfo() {
  
  if (roundinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::RoundInfo>(GetArenaForAllocation());
    roundinfo_ = p;
  }
  return roundinfo_;
}
inline ::Protocol::RoundInfo* S_RESULT_START::mutable_roundinfo() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_RESULT_START.roundInfo)
  return _internal_mutable_roundinfo();
}
inline void S_RESULT_START::set_allocated_roundinfo(::Protocol::RoundInfo* roundinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(roundinfo_);
  }
  if (roundinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roundinfo));
    if (message_arena != submessage_arena) {
      roundinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roundinfo, submessage_arena);
    }
    
  } else {
    
  }
  roundinfo_ = roundinfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_RESULT_START.roundInfo)
}

// repeated .Protocol.PlayerInfo players = 2;
inline int S_RESULT_START::_internal_players_size() const {
  return players_.size();
}
inline int S_RESULT_START::players_size() const {
  return _internal_players_size();
}
inline ::Protocol::PlayerInfo* S_RESULT_START::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_RESULT_START.players)
  return players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PlayerInfo >*
S_RESULT_START::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_RESULT_START.players)
  return &players_;
}
inline const ::Protocol::PlayerInfo& S_RESULT_START::_internal_players(int index) const {
  return players_.Get(index);
}
inline const ::Protocol::PlayerInfo& S_RESULT_START::players(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_RESULT_START.players)
  return _internal_players(index);
}
inline ::Protocol::PlayerInfo* S_RESULT_START::_internal_add_players() {
  return players_.Add();
}
inline ::Protocol::PlayerInfo* S_RESULT_START::add_players() {
  // @@protoc_insertion_point(field_add:Protocol.S_RESULT_START.players)
  return _internal_add_players();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PlayerInfo >&
S_RESULT_START::players() const {
  // @@protoc_insertion_point(field_list:Protocol.S_RESULT_START.players)
  return players_;
}

// -------------------------------------------------------------------

// C_PLAYER_TRANSFORM

// .Protocol.Transform transform = 1;
inline bool C_PLAYER_TRANSFORM::_internal_has_transform() const {
  return this != internal_default_instance() && transform_ != nullptr;
}
inline bool C_PLAYER_TRANSFORM::has_transform() const {
  return _internal_has_transform();
}
inline const ::Protocol::Transform& C_PLAYER_TRANSFORM::_internal_transform() const {
  const ::Protocol::Transform* p = transform_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Transform&>(
      ::Protocol::_Transform_default_instance_);
}
inline const ::Protocol::Transform& C_PLAYER_TRANSFORM::transform() const {
  // @@protoc_insertion_point(field_get:Protocol.C_PLAYER_TRANSFORM.transform)
  return _internal_transform();
}
inline void C_PLAYER_TRANSFORM::unsafe_arena_set_allocated_transform(
    ::Protocol::Transform* transform) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transform_);
  }
  transform_ = transform;
  if (transform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_PLAYER_TRANSFORM.transform)
}
inline ::Protocol::Transform* C_PLAYER_TRANSFORM::release_transform() {
  
  ::Protocol::Transform* temp = transform_;
  transform_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::Transform* C_PLAYER_TRANSFORM::unsafe_arena_release_transform() {
  // @@protoc_insertion_point(field_release:Protocol.C_PLAYER_TRANSFORM.transform)
  
  ::Protocol::Transform* temp = transform_;
  transform_ = nullptr;
  return temp;
}
inline ::Protocol::Transform* C_PLAYER_TRANSFORM::_internal_mutable_transform() {
  
  if (transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Transform>(GetArenaForAllocation());
    transform_ = p;
  }
  return transform_;
}
inline ::Protocol::Transform* C_PLAYER_TRANSFORM::mutable_transform() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_PLAYER_TRANSFORM.transform)
  return _internal_mutable_transform();
}
inline void C_PLAYER_TRANSFORM::set_allocated_transform(::Protocol::Transform* transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(transform_);
  }
  if (transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transform));
    if (message_arena != submessage_arena) {
      transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transform, submessage_arena);
    }
    
  } else {
    
  }
  transform_ = transform;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_PLAYER_TRANSFORM.transform)
}

// -------------------------------------------------------------------

// S_PLAYERS_TRANSFORM

// repeated .Protocol.PlayersTransform playersTransform = 1;
inline int S_PLAYERS_TRANSFORM::_internal_playerstransform_size() const {
  return playerstransform_.size();
}
inline int S_PLAYERS_TRANSFORM::playerstransform_size() const {
  return _internal_playerstransform_size();
}
inline ::Protocol::PlayersTransform* S_PLAYERS_TRANSFORM::mutable_playerstransform(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_PLAYERS_TRANSFORM.playersTransform)
  return playerstransform_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PlayersTransform >*
S_PLAYERS_TRANSFORM::mutable_playerstransform() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_PLAYERS_TRANSFORM.playersTransform)
  return &playerstransform_;
}
inline const ::Protocol::PlayersTransform& S_PLAYERS_TRANSFORM::_internal_playerstransform(int index) const {
  return playerstransform_.Get(index);
}
inline const ::Protocol::PlayersTransform& S_PLAYERS_TRANSFORM::playerstransform(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_PLAYERS_TRANSFORM.playersTransform)
  return _internal_playerstransform(index);
}
inline ::Protocol::PlayersTransform* S_PLAYERS_TRANSFORM::_internal_add_playerstransform() {
  return playerstransform_.Add();
}
inline ::Protocol::PlayersTransform* S_PLAYERS_TRANSFORM::add_playerstransform() {
  // @@protoc_insertion_point(field_add:Protocol.S_PLAYERS_TRANSFORM.playersTransform)
  return _internal_add_playerstransform();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PlayersTransform >&
S_PLAYERS_TRANSFORM::playerstransform() const {
  // @@protoc_insertion_point(field_list:Protocol.S_PLAYERS_TRANSFORM.playersTransform)
  return playerstransform_;
}

// -------------------------------------------------------------------

// C_PLAYER_ANIM_STATE

// .Protocol.AnimState state = 1;
inline void C_PLAYER_ANIM_STATE::clear_state() {
  state_ = 0;
}
inline ::Protocol::AnimState C_PLAYER_ANIM_STATE::_internal_state() const {
  return static_cast< ::Protocol::AnimState >(state_);
}
inline ::Protocol::AnimState C_PLAYER_ANIM_STATE::state() const {
  // @@protoc_insertion_point(field_get:Protocol.C_PLAYER_ANIM_STATE.state)
  return _internal_state();
}
inline void C_PLAYER_ANIM_STATE::_internal_set_state(::Protocol::AnimState value) {
  
  state_ = value;
}
inline void C_PLAYER_ANIM_STATE::set_state(::Protocol::AnimState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:Protocol.C_PLAYER_ANIM_STATE.state)
}

// -------------------------------------------------------------------

// S_PLAYER_ANIM_STATE

// .Protocol.Player player = 1;
inline bool S_PLAYER_ANIM_STATE::_internal_has_player() const {
  return this != internal_default_instance() && player_ != nullptr;
}
inline bool S_PLAYER_ANIM_STATE::has_player() const {
  return _internal_has_player();
}
inline const ::Protocol::Player& S_PLAYER_ANIM_STATE::_internal_player() const {
  const ::Protocol::Player* p = player_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Player&>(
      ::Protocol::_Player_default_instance_);
}
inline const ::Protocol::Player& S_PLAYER_ANIM_STATE::player() const {
  // @@protoc_insertion_point(field_get:Protocol.S_PLAYER_ANIM_STATE.player)
  return _internal_player();
}
inline void S_PLAYER_ANIM_STATE::unsafe_arena_set_allocated_player(
    ::Protocol::Player* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_PLAYER_ANIM_STATE.player)
}
inline ::Protocol::Player* S_PLAYER_ANIM_STATE::release_player() {
  
  ::Protocol::Player* temp = player_;
  player_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::Player* S_PLAYER_ANIM_STATE::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:Protocol.S_PLAYER_ANIM_STATE.player)
  
  ::Protocol::Player* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::Protocol::Player* S_PLAYER_ANIM_STATE::_internal_mutable_player() {
  
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Player>(GetArenaForAllocation());
    player_ = p;
  }
  return player_;
}
inline ::Protocol::Player* S_PLAYER_ANIM_STATE::mutable_player() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_PLAYER_ANIM_STATE.player)
  return _internal_mutable_player();
}
inline void S_PLAYER_ANIM_STATE::set_allocated_player(::Protocol::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player));
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_PLAYER_ANIM_STATE.player)
}

// .Protocol.AnimState state = 2;
inline void S_PLAYER_ANIM_STATE::clear_state() {
  state_ = 0;
}
inline ::Protocol::AnimState S_PLAYER_ANIM_STATE::_internal_state() const {
  return static_cast< ::Protocol::AnimState >(state_);
}
inline ::Protocol::AnimState S_PLAYER_ANIM_STATE::state() const {
  // @@protoc_insertion_point(field_get:Protocol.S_PLAYER_ANIM_STATE.state)
  return _internal_state();
}
inline void S_PLAYER_ANIM_STATE::_internal_set_state(::Protocol::AnimState value) {
  
  state_ = value;
}
inline void S_PLAYER_ANIM_STATE::set_state(::Protocol::AnimState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:Protocol.S_PLAYER_ANIM_STATE.state)
}

// -------------------------------------------------------------------

// C_SELECT_PARTS

// uint32 index = 1;
inline void C_SELECT_PARTS::clear_index() {
  index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 C_SELECT_PARTS::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 C_SELECT_PARTS::index() const {
  // @@protoc_insertion_point(field_get:Protocol.C_SELECT_PARTS.index)
  return _internal_index();
}
inline void C_SELECT_PARTS::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  index_ = value;
}
inline void C_SELECT_PARTS::set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:Protocol.C_SELECT_PARTS.index)
}

// -------------------------------------------------------------------

// S_SELECT_PARTS

// bool success = 1;
inline void S_SELECT_PARTS::clear_success() {
  success_ = false;
}
inline bool S_SELECT_PARTS::_internal_success() const {
  return success_;
}
inline bool S_SELECT_PARTS::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SELECT_PARTS.success)
  return _internal_success();
}
inline void S_SELECT_PARTS::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void S_SELECT_PARTS::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_SELECT_PARTS.success)
}

// int32 gold = 2;
inline void S_SELECT_PARTS::clear_gold() {
  gold_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_SELECT_PARTS::_internal_gold() const {
  return gold_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_SELECT_PARTS::gold() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SELECT_PARTS.gold)
  return _internal_gold();
}
inline void S_SELECT_PARTS::_internal_set_gold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gold_ = value;
}
inline void S_SELECT_PARTS::set_gold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gold(value);
  // @@protoc_insertion_point(field_set:Protocol.S_SELECT_PARTS.gold)
}

// uint32 index = 3;
inline void S_SELECT_PARTS::clear_index() {
  index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 S_SELECT_PARTS::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 S_SELECT_PARTS::index() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SELECT_PARTS.index)
  return _internal_index();
}
inline void S_SELECT_PARTS::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  index_ = value;
}
inline void S_SELECT_PARTS::set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:Protocol.S_SELECT_PARTS.index)
}

// -------------------------------------------------------------------

// S_SELECT_PARTS_LIST

// .Protocol.PartsList partsList = 1;
inline bool S_SELECT_PARTS_LIST::_internal_has_partslist() const {
  return this != internal_default_instance() && partslist_ != nullptr;
}
inline bool S_SELECT_PARTS_LIST::has_partslist() const {
  return _internal_has_partslist();
}
inline const ::Protocol::PartsList& S_SELECT_PARTS_LIST::_internal_partslist() const {
  const ::Protocol::PartsList* p = partslist_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PartsList&>(
      ::Protocol::_PartsList_default_instance_);
}
inline const ::Protocol::PartsList& S_SELECT_PARTS_LIST::partslist() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SELECT_PARTS_LIST.partsList)
  return _internal_partslist();
}
inline void S_SELECT_PARTS_LIST::unsafe_arena_set_allocated_partslist(
    ::Protocol::PartsList* partslist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(partslist_);
  }
  partslist_ = partslist;
  if (partslist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_SELECT_PARTS_LIST.partsList)
}
inline ::Protocol::PartsList* S_SELECT_PARTS_LIST::release_partslist() {
  
  ::Protocol::PartsList* temp = partslist_;
  partslist_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::PartsList* S_SELECT_PARTS_LIST::unsafe_arena_release_partslist() {
  // @@protoc_insertion_point(field_release:Protocol.S_SELECT_PARTS_LIST.partsList)
  
  ::Protocol::PartsList* temp = partslist_;
  partslist_ = nullptr;
  return temp;
}
inline ::Protocol::PartsList* S_SELECT_PARTS_LIST::_internal_mutable_partslist() {
  
  if (partslist_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PartsList>(GetArenaForAllocation());
    partslist_ = p;
  }
  return partslist_;
}
inline ::Protocol::PartsList* S_SELECT_PARTS_LIST::mutable_partslist() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_SELECT_PARTS_LIST.partsList)
  return _internal_mutable_partslist();
}
inline void S_SELECT_PARTS_LIST::set_allocated_partslist(::Protocol::PartsList* partslist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(partslist_);
  }
  if (partslist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(partslist));
    if (message_arena != submessage_arena) {
      partslist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, partslist, submessage_arena);
    }
    
  } else {
    
  }
  partslist_ = partslist;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_SELECT_PARTS_LIST.partsList)
}

// int32 gold = 2;
inline void S_SELECT_PARTS_LIST::clear_gold() {
  gold_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_SELECT_PARTS_LIST::_internal_gold() const {
  return gold_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_SELECT_PARTS_LIST::gold() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SELECT_PARTS_LIST.gold)
  return _internal_gold();
}
inline void S_SELECT_PARTS_LIST::_internal_set_gold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gold_ = value;
}
inline void S_SELECT_PARTS_LIST::set_gold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gold(value);
  // @@protoc_insertion_point(field_set:Protocol.S_SELECT_PARTS_LIST.gold)
}

// -------------------------------------------------------------------

// C_REROLL_PARTS

// -------------------------------------------------------------------

// C_RESPAWN_CLICK

// -------------------------------------------------------------------

// S_SPAWN_POINT

// .Protocol.Player player = 1;
inline bool S_SPAWN_POINT::_internal_has_player() const {
  return this != internal_default_instance() && player_ != nullptr;
}
inline bool S_SPAWN_POINT::has_player() const {
  return _internal_has_player();
}
inline const ::Protocol::Player& S_SPAWN_POINT::_internal_player() const {
  const ::Protocol::Player* p = player_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Player&>(
      ::Protocol::_Player_default_instance_);
}
inline const ::Protocol::Player& S_SPAWN_POINT::player() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SPAWN_POINT.player)
  return _internal_player();
}
inline void S_SPAWN_POINT::unsafe_arena_set_allocated_player(
    ::Protocol::Player* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_SPAWN_POINT.player)
}
inline ::Protocol::Player* S_SPAWN_POINT::release_player() {
  
  ::Protocol::Player* temp = player_;
  player_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::Player* S_SPAWN_POINT::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:Protocol.S_SPAWN_POINT.player)
  
  ::Protocol::Player* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::Protocol::Player* S_SPAWN_POINT::_internal_mutable_player() {
  
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Player>(GetArenaForAllocation());
    player_ = p;
  }
  return player_;
}
inline ::Protocol::Player* S_SPAWN_POINT::mutable_player() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_SPAWN_POINT.player)
  return _internal_mutable_player();
}
inline void S_SPAWN_POINT::set_allocated_player(::Protocol::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player));
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_SPAWN_POINT.player)
}

// int32 healthPoint = 2;
inline void S_SPAWN_POINT::clear_healthpoint() {
  healthpoint_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_SPAWN_POINT::_internal_healthpoint() const {
  return healthpoint_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_SPAWN_POINT::healthpoint() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SPAWN_POINT.healthPoint)
  return _internal_healthpoint();
}
inline void S_SPAWN_POINT::_internal_set_healthpoint(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  healthpoint_ = value;
}
inline void S_SPAWN_POINT::set_healthpoint(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_healthpoint(value);
  // @@protoc_insertion_point(field_set:Protocol.S_SPAWN_POINT.healthPoint)
}

// uint32 spawnPointIndex = 3;
inline void S_SPAWN_POINT::clear_spawnpointindex() {
  spawnpointindex_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 S_SPAWN_POINT::_internal_spawnpointindex() const {
  return spawnpointindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 S_SPAWN_POINT::spawnpointindex() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SPAWN_POINT.spawnPointIndex)
  return _internal_spawnpointindex();
}
inline void S_SPAWN_POINT::_internal_set_spawnpointindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  spawnpointindex_ = value;
}
inline void S_SPAWN_POINT::set_spawnpointindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_spawnpointindex(value);
  // @@protoc_insertion_point(field_set:Protocol.S_SPAWN_POINT.spawnPointIndex)
}

// .Protocol.PlayerInfo playerInfo = 4;
inline bool S_SPAWN_POINT::_internal_has_playerinfo() const {
  return this != internal_default_instance() && playerinfo_ != nullptr;
}
inline bool S_SPAWN_POINT::has_playerinfo() const {
  return _internal_has_playerinfo();
}
inline const ::Protocol::PlayerInfo& S_SPAWN_POINT::_internal_playerinfo() const {
  const ::Protocol::PlayerInfo* p = playerinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PlayerInfo&>(
      ::Protocol::_PlayerInfo_default_instance_);
}
inline const ::Protocol::PlayerInfo& S_SPAWN_POINT::playerinfo() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SPAWN_POINT.playerInfo)
  return _internal_playerinfo();
}
inline void S_SPAWN_POINT::unsafe_arena_set_allocated_playerinfo(
    ::Protocol::PlayerInfo* playerinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playerinfo_);
  }
  playerinfo_ = playerinfo;
  if (playerinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_SPAWN_POINT.playerInfo)
}
inline ::Protocol::PlayerInfo* S_SPAWN_POINT::release_playerinfo() {
  
  ::Protocol::PlayerInfo* temp = playerinfo_;
  playerinfo_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::PlayerInfo* S_SPAWN_POINT::unsafe_arena_release_playerinfo() {
  // @@protoc_insertion_point(field_release:Protocol.S_SPAWN_POINT.playerInfo)
  
  ::Protocol::PlayerInfo* temp = playerinfo_;
  playerinfo_ = nullptr;
  return temp;
}
inline ::Protocol::PlayerInfo* S_SPAWN_POINT::_internal_mutable_playerinfo() {
  
  if (playerinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PlayerInfo>(GetArenaForAllocation());
    playerinfo_ = p;
  }
  return playerinfo_;
}
inline ::Protocol::PlayerInfo* S_SPAWN_POINT::mutable_playerinfo() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_SPAWN_POINT.playerInfo)
  return _internal_mutable_playerinfo();
}
inline void S_SPAWN_POINT::set_allocated_playerinfo(::Protocol::PlayerInfo* playerinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(playerinfo_);
  }
  if (playerinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playerinfo));
    if (message_arena != submessage_arena) {
      playerinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playerinfo, submessage_arena);
    }
    
  } else {
    
  }
  playerinfo_ = playerinfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_SPAWN_POINT.playerInfo)
}

// -------------------------------------------------------------------

// C_ATTACK_PLAYER

// .Protocol.Player attackedPlayer = 1;
inline bool C_ATTACK_PLAYER::_internal_has_attackedplayer() const {
  return this != internal_default_instance() && attackedplayer_ != nullptr;
}
inline bool C_ATTACK_PLAYER::has_attackedplayer() const {
  return _internal_has_attackedplayer();
}
inline const ::Protocol::Player& C_ATTACK_PLAYER::_internal_attackedplayer() const {
  const ::Protocol::Player* p = attackedplayer_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Player&>(
      ::Protocol::_Player_default_instance_);
}
inline const ::Protocol::Player& C_ATTACK_PLAYER::attackedplayer() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ATTACK_PLAYER.attackedPlayer)
  return _internal_attackedplayer();
}
inline void C_ATTACK_PLAYER::unsafe_arena_set_allocated_attackedplayer(
    ::Protocol::Player* attackedplayer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attackedplayer_);
  }
  attackedplayer_ = attackedplayer;
  if (attackedplayer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_ATTACK_PLAYER.attackedPlayer)
}
inline ::Protocol::Player* C_ATTACK_PLAYER::release_attackedplayer() {
  
  ::Protocol::Player* temp = attackedplayer_;
  attackedplayer_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::Player* C_ATTACK_PLAYER::unsafe_arena_release_attackedplayer() {
  // @@protoc_insertion_point(field_release:Protocol.C_ATTACK_PLAYER.attackedPlayer)
  
  ::Protocol::Player* temp = attackedplayer_;
  attackedplayer_ = nullptr;
  return temp;
}
inline ::Protocol::Player* C_ATTACK_PLAYER::_internal_mutable_attackedplayer() {
  
  if (attackedplayer_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Player>(GetArenaForAllocation());
    attackedplayer_ = p;
  }
  return attackedplayer_;
}
inline ::Protocol::Player* C_ATTACK_PLAYER::mutable_attackedplayer() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_ATTACK_PLAYER.attackedPlayer)
  return _internal_mutable_attackedplayer();
}
inline void C_ATTACK_PLAYER::set_allocated_attackedplayer(::Protocol::Player* attackedplayer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(attackedplayer_);
  }
  if (attackedplayer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attackedplayer));
    if (message_arena != submessage_arena) {
      attackedplayer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attackedplayer, submessage_arena);
    }
    
  } else {
    
  }
  attackedplayer_ = attackedplayer;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_ATTACK_PLAYER.attackedPlayer)
}

// .Protocol.AttackPoint attackPoint = 2;
inline void C_ATTACK_PLAYER::clear_attackpoint() {
  attackpoint_ = 0;
}
inline ::Protocol::AttackPoint C_ATTACK_PLAYER::_internal_attackpoint() const {
  return static_cast< ::Protocol::AttackPoint >(attackpoint_);
}
inline ::Protocol::AttackPoint C_ATTACK_PLAYER::attackpoint() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ATTACK_PLAYER.attackPoint)
  return _internal_attackpoint();
}
inline void C_ATTACK_PLAYER::_internal_set_attackpoint(::Protocol::AttackPoint value) {
  
  attackpoint_ = value;
}
inline void C_ATTACK_PLAYER::set_attackpoint(::Protocol::AttackPoint value) {
  _internal_set_attackpoint(value);
  // @@protoc_insertion_point(field_set:Protocol.C_ATTACK_PLAYER.attackPoint)
}

// .Protocol.Transform transform = 3;
inline bool C_ATTACK_PLAYER::_internal_has_transform() const {
  return this != internal_default_instance() && transform_ != nullptr;
}
inline bool C_ATTACK_PLAYER::has_transform() const {
  return _internal_has_transform();
}
inline const ::Protocol::Transform& C_ATTACK_PLAYER::_internal_transform() const {
  const ::Protocol::Transform* p = transform_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Transform&>(
      ::Protocol::_Transform_default_instance_);
}
inline const ::Protocol::Transform& C_ATTACK_PLAYER::transform() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ATTACK_PLAYER.transform)
  return _internal_transform();
}
inline void C_ATTACK_PLAYER::unsafe_arena_set_allocated_transform(
    ::Protocol::Transform* transform) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transform_);
  }
  transform_ = transform;
  if (transform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_ATTACK_PLAYER.transform)
}
inline ::Protocol::Transform* C_ATTACK_PLAYER::release_transform() {
  
  ::Protocol::Transform* temp = transform_;
  transform_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::Transform* C_ATTACK_PLAYER::unsafe_arena_release_transform() {
  // @@protoc_insertion_point(field_release:Protocol.C_ATTACK_PLAYER.transform)
  
  ::Protocol::Transform* temp = transform_;
  transform_ = nullptr;
  return temp;
}
inline ::Protocol::Transform* C_ATTACK_PLAYER::_internal_mutable_transform() {
  
  if (transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Transform>(GetArenaForAllocation());
    transform_ = p;
  }
  return transform_;
}
inline ::Protocol::Transform* C_ATTACK_PLAYER::mutable_transform() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_ATTACK_PLAYER.transform)
  return _internal_mutable_transform();
}
inline void C_ATTACK_PLAYER::set_allocated_transform(::Protocol::Transform* transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(transform_);
  }
  if (transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transform));
    if (message_arena != submessage_arena) {
      transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transform, submessage_arena);
    }
    
  } else {
    
  }
  transform_ = transform;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_ATTACK_PLAYER.transform)
}

// -------------------------------------------------------------------

// S_ATTACKED_PLAYER

// .Protocol.Player attackPlayer = 1;
inline bool S_ATTACKED_PLAYER::_internal_has_attackplayer() const {
  return this != internal_default_instance() && attackplayer_ != nullptr;
}
inline bool S_ATTACKED_PLAYER::has_attackplayer() const {
  return _internal_has_attackplayer();
}
inline const ::Protocol::Player& S_ATTACKED_PLAYER::_internal_attackplayer() const {
  const ::Protocol::Player* p = attackplayer_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Player&>(
      ::Protocol::_Player_default_instance_);
}
inline const ::Protocol::Player& S_ATTACKED_PLAYER::attackplayer() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ATTACKED_PLAYER.attackPlayer)
  return _internal_attackplayer();
}
inline void S_ATTACKED_PLAYER::unsafe_arena_set_allocated_attackplayer(
    ::Protocol::Player* attackplayer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attackplayer_);
  }
  attackplayer_ = attackplayer;
  if (attackplayer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_ATTACKED_PLAYER.attackPlayer)
}
inline ::Protocol::Player* S_ATTACKED_PLAYER::release_attackplayer() {
  
  ::Protocol::Player* temp = attackplayer_;
  attackplayer_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::Player* S_ATTACKED_PLAYER::unsafe_arena_release_attackplayer() {
  // @@protoc_insertion_point(field_release:Protocol.S_ATTACKED_PLAYER.attackPlayer)
  
  ::Protocol::Player* temp = attackplayer_;
  attackplayer_ = nullptr;
  return temp;
}
inline ::Protocol::Player* S_ATTACKED_PLAYER::_internal_mutable_attackplayer() {
  
  if (attackplayer_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Player>(GetArenaForAllocation());
    attackplayer_ = p;
  }
  return attackplayer_;
}
inline ::Protocol::Player* S_ATTACKED_PLAYER::mutable_attackplayer() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_ATTACKED_PLAYER.attackPlayer)
  return _internal_mutable_attackplayer();
}
inline void S_ATTACKED_PLAYER::set_allocated_attackplayer(::Protocol::Player* attackplayer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(attackplayer_);
  }
  if (attackplayer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attackplayer));
    if (message_arena != submessage_arena) {
      attackplayer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attackplayer, submessage_arena);
    }
    
  } else {
    
  }
  attackplayer_ = attackplayer;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_ATTACKED_PLAYER.attackPlayer)
}

// .Protocol.Player attackedPlayer = 2;
inline bool S_ATTACKED_PLAYER::_internal_has_attackedplayer() const {
  return this != internal_default_instance() && attackedplayer_ != nullptr;
}
inline bool S_ATTACKED_PLAYER::has_attackedplayer() const {
  return _internal_has_attackedplayer();
}
inline const ::Protocol::Player& S_ATTACKED_PLAYER::_internal_attackedplayer() const {
  const ::Protocol::Player* p = attackedplayer_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Player&>(
      ::Protocol::_Player_default_instance_);
}
inline const ::Protocol::Player& S_ATTACKED_PLAYER::attackedplayer() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ATTACKED_PLAYER.attackedPlayer)
  return _internal_attackedplayer();
}
inline void S_ATTACKED_PLAYER::unsafe_arena_set_allocated_attackedplayer(
    ::Protocol::Player* attackedplayer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attackedplayer_);
  }
  attackedplayer_ = attackedplayer;
  if (attackedplayer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_ATTACKED_PLAYER.attackedPlayer)
}
inline ::Protocol::Player* S_ATTACKED_PLAYER::release_attackedplayer() {
  
  ::Protocol::Player* temp = attackedplayer_;
  attackedplayer_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::Player* S_ATTACKED_PLAYER::unsafe_arena_release_attackedplayer() {
  // @@protoc_insertion_point(field_release:Protocol.S_ATTACKED_PLAYER.attackedPlayer)
  
  ::Protocol::Player* temp = attackedplayer_;
  attackedplayer_ = nullptr;
  return temp;
}
inline ::Protocol::Player* S_ATTACKED_PLAYER::_internal_mutable_attackedplayer() {
  
  if (attackedplayer_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Player>(GetArenaForAllocation());
    attackedplayer_ = p;
  }
  return attackedplayer_;
}
inline ::Protocol::Player* S_ATTACKED_PLAYER::mutable_attackedplayer() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_ATTACKED_PLAYER.attackedPlayer)
  return _internal_mutable_attackedplayer();
}
inline void S_ATTACKED_PLAYER::set_allocated_attackedplayer(::Protocol::Player* attackedplayer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(attackedplayer_);
  }
  if (attackedplayer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attackedplayer));
    if (message_arena != submessage_arena) {
      attackedplayer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attackedplayer, submessage_arena);
    }
    
  } else {
    
  }
  attackedplayer_ = attackedplayer;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_ATTACKED_PLAYER.attackedPlayer)
}

// .Protocol.AttackPoint attackPoint = 3;
inline void S_ATTACKED_PLAYER::clear_attackpoint() {
  attackpoint_ = 0;
}
inline ::Protocol::AttackPoint S_ATTACKED_PLAYER::_internal_attackpoint() const {
  return static_cast< ::Protocol::AttackPoint >(attackpoint_);
}
inline ::Protocol::AttackPoint S_ATTACKED_PLAYER::attackpoint() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ATTACKED_PLAYER.attackPoint)
  return _internal_attackpoint();
}
inline void S_ATTACKED_PLAYER::_internal_set_attackpoint(::Protocol::AttackPoint value) {
  
  attackpoint_ = value;
}
inline void S_ATTACKED_PLAYER::set_attackpoint(::Protocol::AttackPoint value) {
  _internal_set_attackpoint(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ATTACKED_PLAYER.attackPoint)
}

// .Protocol.Transform transform = 4;
inline bool S_ATTACKED_PLAYER::_internal_has_transform() const {
  return this != internal_default_instance() && transform_ != nullptr;
}
inline bool S_ATTACKED_PLAYER::has_transform() const {
  return _internal_has_transform();
}
inline const ::Protocol::Transform& S_ATTACKED_PLAYER::_internal_transform() const {
  const ::Protocol::Transform* p = transform_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Transform&>(
      ::Protocol::_Transform_default_instance_);
}
inline const ::Protocol::Transform& S_ATTACKED_PLAYER::transform() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ATTACKED_PLAYER.transform)
  return _internal_transform();
}
inline void S_ATTACKED_PLAYER::unsafe_arena_set_allocated_transform(
    ::Protocol::Transform* transform) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transform_);
  }
  transform_ = transform;
  if (transform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_ATTACKED_PLAYER.transform)
}
inline ::Protocol::Transform* S_ATTACKED_PLAYER::release_transform() {
  
  ::Protocol::Transform* temp = transform_;
  transform_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::Transform* S_ATTACKED_PLAYER::unsafe_arena_release_transform() {
  // @@protoc_insertion_point(field_release:Protocol.S_ATTACKED_PLAYER.transform)
  
  ::Protocol::Transform* temp = transform_;
  transform_ = nullptr;
  return temp;
}
inline ::Protocol::Transform* S_ATTACKED_PLAYER::_internal_mutable_transform() {
  
  if (transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Transform>(GetArenaForAllocation());
    transform_ = p;
  }
  return transform_;
}
inline ::Protocol::Transform* S_ATTACKED_PLAYER::mutable_transform() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_ATTACKED_PLAYER.transform)
  return _internal_mutable_transform();
}
inline void S_ATTACKED_PLAYER::set_allocated_transform(::Protocol::Transform* transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(transform_);
  }
  if (transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transform));
    if (message_arena != submessage_arena) {
      transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transform, submessage_arena);
    }
    
  } else {
    
  }
  transform_ = transform;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_ATTACKED_PLAYER.transform)
}

// int32 attackedPlayerHealthPoint = 5;
inline void S_ATTACKED_PLAYER::clear_attackedplayerhealthpoint() {
  attackedplayerhealthpoint_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_ATTACKED_PLAYER::_internal_attackedplayerhealthpoint() const {
  return attackedplayerhealthpoint_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_ATTACKED_PLAYER::attackedplayerhealthpoint() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ATTACKED_PLAYER.attackedPlayerHealthPoint)
  return _internal_attackedplayerhealthpoint();
}
inline void S_ATTACKED_PLAYER::_internal_set_attackedplayerhealthpoint(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  attackedplayerhealthpoint_ = value;
}
inline void S_ATTACKED_PLAYER::set_attackedplayerhealthpoint(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_attackedplayerhealthpoint(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ATTACKED_PLAYER.attackedPlayerHealthPoint)
}

// -------------------------------------------------------------------

// S_DEATH_PLAYER

// .Protocol.Player attackPlayer = 1;
inline bool S_DEATH_PLAYER::_internal_has_attackplayer() const {
  return this != internal_default_instance() && attackplayer_ != nullptr;
}
inline bool S_DEATH_PLAYER::has_attackplayer() const {
  return _internal_has_attackplayer();
}
inline const ::Protocol::Player& S_DEATH_PLAYER::_internal_attackplayer() const {
  const ::Protocol::Player* p = attackplayer_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Player&>(
      ::Protocol::_Player_default_instance_);
}
inline const ::Protocol::Player& S_DEATH_PLAYER::attackplayer() const {
  // @@protoc_insertion_point(field_get:Protocol.S_DEATH_PLAYER.attackPlayer)
  return _internal_attackplayer();
}
inline void S_DEATH_PLAYER::unsafe_arena_set_allocated_attackplayer(
    ::Protocol::Player* attackplayer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attackplayer_);
  }
  attackplayer_ = attackplayer;
  if (attackplayer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_DEATH_PLAYER.attackPlayer)
}
inline ::Protocol::Player* S_DEATH_PLAYER::release_attackplayer() {
  
  ::Protocol::Player* temp = attackplayer_;
  attackplayer_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::Player* S_DEATH_PLAYER::unsafe_arena_release_attackplayer() {
  // @@protoc_insertion_point(field_release:Protocol.S_DEATH_PLAYER.attackPlayer)
  
  ::Protocol::Player* temp = attackplayer_;
  attackplayer_ = nullptr;
  return temp;
}
inline ::Protocol::Player* S_DEATH_PLAYER::_internal_mutable_attackplayer() {
  
  if (attackplayer_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Player>(GetArenaForAllocation());
    attackplayer_ = p;
  }
  return attackplayer_;
}
inline ::Protocol::Player* S_DEATH_PLAYER::mutable_attackplayer() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_DEATH_PLAYER.attackPlayer)
  return _internal_mutable_attackplayer();
}
inline void S_DEATH_PLAYER::set_allocated_attackplayer(::Protocol::Player* attackplayer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(attackplayer_);
  }
  if (attackplayer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attackplayer));
    if (message_arena != submessage_arena) {
      attackplayer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attackplayer, submessage_arena);
    }
    
  } else {
    
  }
  attackplayer_ = attackplayer;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_DEATH_PLAYER.attackPlayer)
}

// .Protocol.Player attackedPlayer = 2;
inline bool S_DEATH_PLAYER::_internal_has_attackedplayer() const {
  return this != internal_default_instance() && attackedplayer_ != nullptr;
}
inline bool S_DEATH_PLAYER::has_attackedplayer() const {
  return _internal_has_attackedplayer();
}
inline const ::Protocol::Player& S_DEATH_PLAYER::_internal_attackedplayer() const {
  const ::Protocol::Player* p = attackedplayer_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Player&>(
      ::Protocol::_Player_default_instance_);
}
inline const ::Protocol::Player& S_DEATH_PLAYER::attackedplayer() const {
  // @@protoc_insertion_point(field_get:Protocol.S_DEATH_PLAYER.attackedPlayer)
  return _internal_attackedplayer();
}
inline void S_DEATH_PLAYER::unsafe_arena_set_allocated_attackedplayer(
    ::Protocol::Player* attackedplayer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attackedplayer_);
  }
  attackedplayer_ = attackedplayer;
  if (attackedplayer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_DEATH_PLAYER.attackedPlayer)
}
inline ::Protocol::Player* S_DEATH_PLAYER::release_attackedplayer() {
  
  ::Protocol::Player* temp = attackedplayer_;
  attackedplayer_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::Player* S_DEATH_PLAYER::unsafe_arena_release_attackedplayer() {
  // @@protoc_insertion_point(field_release:Protocol.S_DEATH_PLAYER.attackedPlayer)
  
  ::Protocol::Player* temp = attackedplayer_;
  attackedplayer_ = nullptr;
  return temp;
}
inline ::Protocol::Player* S_DEATH_PLAYER::_internal_mutable_attackedplayer() {
  
  if (attackedplayer_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Player>(GetArenaForAllocation());
    attackedplayer_ = p;
  }
  return attackedplayer_;
}
inline ::Protocol::Player* S_DEATH_PLAYER::mutable_attackedplayer() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_DEATH_PLAYER.attackedPlayer)
  return _internal_mutable_attackedplayer();
}
inline void S_DEATH_PLAYER::set_allocated_attackedplayer(::Protocol::Player* attackedplayer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(attackedplayer_);
  }
  if (attackedplayer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attackedplayer));
    if (message_arena != submessage_arena) {
      attackedplayer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attackedplayer, submessage_arena);
    }
    
  } else {
    
  }
  attackedplayer_ = attackedplayer;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_DEATH_PLAYER.attackedPlayer)
}

// .Protocol.Transform transform = 3;
inline bool S_DEATH_PLAYER::_internal_has_transform() const {
  return this != internal_default_instance() && transform_ != nullptr;
}
inline bool S_DEATH_PLAYER::has_transform() const {
  return _internal_has_transform();
}
inline const ::Protocol::Transform& S_DEATH_PLAYER::_internal_transform() const {
  const ::Protocol::Transform* p = transform_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Transform&>(
      ::Protocol::_Transform_default_instance_);
}
inline const ::Protocol::Transform& S_DEATH_PLAYER::transform() const {
  // @@protoc_insertion_point(field_get:Protocol.S_DEATH_PLAYER.transform)
  return _internal_transform();
}
inline void S_DEATH_PLAYER::unsafe_arena_set_allocated_transform(
    ::Protocol::Transform* transform) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transform_);
  }
  transform_ = transform;
  if (transform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_DEATH_PLAYER.transform)
}
inline ::Protocol::Transform* S_DEATH_PLAYER::release_transform() {
  
  ::Protocol::Transform* temp = transform_;
  transform_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::Transform* S_DEATH_PLAYER::unsafe_arena_release_transform() {
  // @@protoc_insertion_point(field_release:Protocol.S_DEATH_PLAYER.transform)
  
  ::Protocol::Transform* temp = transform_;
  transform_ = nullptr;
  return temp;
}
inline ::Protocol::Transform* S_DEATH_PLAYER::_internal_mutable_transform() {
  
  if (transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Transform>(GetArenaForAllocation());
    transform_ = p;
  }
  return transform_;
}
inline ::Protocol::Transform* S_DEATH_PLAYER::mutable_transform() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_DEATH_PLAYER.transform)
  return _internal_mutable_transform();
}
inline void S_DEATH_PLAYER::set_allocated_transform(::Protocol::Transform* transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(transform_);
  }
  if (transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transform));
    if (message_arena != submessage_arena) {
      transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transform, submessage_arena);
    }
    
  } else {
    
  }
  transform_ = transform;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_DEATH_PLAYER.transform)
}

// -------------------------------------------------------------------

// C_CHAT

// string msg = 1;
inline void C_CHAT::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& C_CHAT::msg() const {
  // @@protoc_insertion_point(field_get:Protocol.C_CHAT.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_CHAT::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_CHAT.msg)
}
inline std::string* C_CHAT::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_CHAT.msg)
  return _internal_mutable_msg();
}
inline const std::string& C_CHAT::_internal_msg() const {
  return msg_.Get();
}
inline void C_CHAT::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C_CHAT::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C_CHAT::release_msg() {
  // @@protoc_insertion_point(field_release:Protocol.C_CHAT.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C_CHAT::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_CHAT.msg)
}

// -------------------------------------------------------------------

// S_CHAT

// uint64 playerId = 1;
inline void S_CHAT::clear_playerid() {
  playerid_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 S_CHAT::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 S_CHAT::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CHAT.playerId)
  return _internal_playerid();
}
inline void S_CHAT::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  playerid_ = value;
}
inline void S_CHAT::set_playerid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_CHAT.playerId)
}

// string msg = 2;
inline void S_CHAT::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& S_CHAT::msg() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CHAT.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_CHAT::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_CHAT.msg)
}
inline std::string* S_CHAT::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_CHAT.msg)
  return _internal_mutable_msg();
}
inline const std::string& S_CHAT::_internal_msg() const {
  return msg_.Get();
}
inline void S_CHAT::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* S_CHAT::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* S_CHAT::release_msg() {
  // @@protoc_insertion_point(field_release:Protocol.S_CHAT.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void S_CHAT::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_CHAT.msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
