// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#include "Protocol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace Protocol {
constexpr C_LOGIN::C_LOGIN(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct C_LOGINDefaultTypeInternal {
  constexpr C_LOGINDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_LOGINDefaultTypeInternal() {}
  union {
    C_LOGIN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_LOGINDefaultTypeInternal _C_LOGIN_default_instance_;
constexpr S_LOGIN::S_LOGIN(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_(nullptr)
  , success_(false){}
struct S_LOGINDefaultTypeInternal {
  constexpr S_LOGINDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_LOGINDefaultTypeInternal() {}
  union {
    S_LOGIN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_LOGINDefaultTypeInternal _S_LOGIN_default_instance_;
constexpr C_CREATE_ROOM::C_CREATE_ROOM(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct C_CREATE_ROOMDefaultTypeInternal {
  constexpr C_CREATE_ROOMDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_CREATE_ROOMDefaultTypeInternal() {}
  union {
    C_CREATE_ROOM _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_CREATE_ROOMDefaultTypeInternal _C_CREATE_ROOM_default_instance_;
constexpr S_CREATE_ROOM::S_CREATE_ROOM(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : roominfo_(nullptr)
  , player_(nullptr)
  , success_(false)
  , reason_(0)
{}
struct S_CREATE_ROOMDefaultTypeInternal {
  constexpr S_CREATE_ROOMDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_CREATE_ROOMDefaultTypeInternal() {}
  union {
    S_CREATE_ROOM _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_CREATE_ROOMDefaultTypeInternal _S_CREATE_ROOM_default_instance_;
constexpr C_ENTER_ROOM::C_ENTER_ROOM(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : roomcode_(0u){}
struct C_ENTER_ROOMDefaultTypeInternal {
  constexpr C_ENTER_ROOMDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_ENTER_ROOMDefaultTypeInternal() {}
  union {
    C_ENTER_ROOM _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_ENTER_ROOMDefaultTypeInternal _C_ENTER_ROOM_default_instance_;
constexpr S_ENTER_ROOM::S_ENTER_ROOM(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : players_()
  , roominfo_(nullptr)
  , success_(false)
  , reason_(0)
{}
struct S_ENTER_ROOMDefaultTypeInternal {
  constexpr S_ENTER_ROOMDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_ENTER_ROOMDefaultTypeInternal() {}
  union {
    S_ENTER_ROOM _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_ENTER_ROOMDefaultTypeInternal _S_ENTER_ROOM_default_instance_;
constexpr S_ANOTHER_ENTER_ROOM::S_ANOTHER_ENTER_ROOM(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_(nullptr){}
struct S_ANOTHER_ENTER_ROOMDefaultTypeInternal {
  constexpr S_ANOTHER_ENTER_ROOMDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_ANOTHER_ENTER_ROOMDefaultTypeInternal() {}
  union {
    S_ANOTHER_ENTER_ROOM _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_ANOTHER_ENTER_ROOMDefaultTypeInternal _S_ANOTHER_ENTER_ROOM_default_instance_;
constexpr C_LEAVE_ROOM::C_LEAVE_ROOM(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct C_LEAVE_ROOMDefaultTypeInternal {
  constexpr C_LEAVE_ROOMDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_LEAVE_ROOMDefaultTypeInternal() {}
  union {
    C_LEAVE_ROOM _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_LEAVE_ROOMDefaultTypeInternal _C_LEAVE_ROOM_default_instance_;
constexpr S_ANOTHER_LEAVE_ROOM::S_ANOTHER_LEAVE_ROOM(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_(nullptr)
  , hostid_(uint64_t{0u}){}
struct S_ANOTHER_LEAVE_ROOMDefaultTypeInternal {
  constexpr S_ANOTHER_LEAVE_ROOMDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_ANOTHER_LEAVE_ROOMDefaultTypeInternal() {}
  union {
    S_ANOTHER_LEAVE_ROOM _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_ANOTHER_LEAVE_ROOMDefaultTypeInternal _S_ANOTHER_LEAVE_ROOM_default_instance_;
constexpr C_ROOM_SETTING::C_ROOM_SETTING(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : roominfo_(nullptr){}
struct C_ROOM_SETTINGDefaultTypeInternal {
  constexpr C_ROOM_SETTINGDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_ROOM_SETTINGDefaultTypeInternal() {}
  union {
    C_ROOM_SETTING _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_ROOM_SETTINGDefaultTypeInternal _C_ROOM_SETTING_default_instance_;
constexpr S_ROOM_SETTING::S_ROOM_SETTING(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : roominfo_(nullptr){}
struct S_ROOM_SETTINGDefaultTypeInternal {
  constexpr S_ROOM_SETTINGDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_ROOM_SETTINGDefaultTypeInternal() {}
  union {
    S_ROOM_SETTING _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_ROOM_SETTINGDefaultTypeInternal _S_ROOM_SETTING_default_instance_;
constexpr C_ROOM_START::C_ROOM_START(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct C_ROOM_STARTDefaultTypeInternal {
  constexpr C_ROOM_STARTDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_ROOM_STARTDefaultTypeInternal() {}
  union {
    C_ROOM_START _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_ROOM_STARTDefaultTypeInternal _C_ROOM_START_default_instance_;
constexpr S_ROOM_START::S_ROOM_START(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : players_()
  , spawnpoint_()
  , _spawnpoint_cached_byte_size_()
  , roominfo_(nullptr)
  , roundinfo_(nullptr){}
struct S_ROOM_STARTDefaultTypeInternal {
  constexpr S_ROOM_STARTDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_ROOM_STARTDefaultTypeInternal() {}
  union {
    S_ROOM_START _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_ROOM_STARTDefaultTypeInternal _S_ROOM_START_default_instance_;
constexpr C_LOAD_COMPLETE::C_LOAD_COMPLETE(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct C_LOAD_COMPLETEDefaultTypeInternal {
  constexpr C_LOAD_COMPLETEDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_LOAD_COMPLETEDefaultTypeInternal() {}
  union {
    C_LOAD_COMPLETE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_LOAD_COMPLETEDefaultTypeInternal _C_LOAD_COMPLETE_default_instance_;
constexpr S_ROUND_START::S_ROUND_START(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : players_()
  , roundinfo_(nullptr){}
struct S_ROUND_STARTDefaultTypeInternal {
  constexpr S_ROUND_STARTDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_ROUND_STARTDefaultTypeInternal() {}
  union {
    S_ROUND_START _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_ROUND_STARTDefaultTypeInternal _S_ROUND_START_default_instance_;
constexpr S_SHOP_START::S_SHOP_START(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : partslist_()
  , roundinfo_(nullptr)
  , player_(nullptr)
  , playerinfo_(nullptr){}
struct S_SHOP_STARTDefaultTypeInternal {
  constexpr S_SHOP_STARTDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_SHOP_STARTDefaultTypeInternal() {}
  union {
    S_SHOP_START _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_SHOP_STARTDefaultTypeInternal _S_SHOP_START_default_instance_;
constexpr S_END_GAME::S_END_GAME(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : roundinfo_(nullptr){}
struct S_END_GAMEDefaultTypeInternal {
  constexpr S_END_GAMEDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_END_GAMEDefaultTypeInternal() {}
  union {
    S_END_GAME _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_END_GAMEDefaultTypeInternal _S_END_GAME_default_instance_;
constexpr S_RESULT_START::S_RESULT_START(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : players_()
  , roundinfo_(nullptr){}
struct S_RESULT_STARTDefaultTypeInternal {
  constexpr S_RESULT_STARTDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_RESULT_STARTDefaultTypeInternal() {}
  union {
    S_RESULT_START _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_RESULT_STARTDefaultTypeInternal _S_RESULT_START_default_instance_;
constexpr C_PLAYER_TRANSFORM::C_PLAYER_TRANSFORM(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transform_(nullptr){}
struct C_PLAYER_TRANSFORMDefaultTypeInternal {
  constexpr C_PLAYER_TRANSFORMDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_PLAYER_TRANSFORMDefaultTypeInternal() {}
  union {
    C_PLAYER_TRANSFORM _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_PLAYER_TRANSFORMDefaultTypeInternal _C_PLAYER_TRANSFORM_default_instance_;
constexpr S_PLAYERS_TRANSFORM::S_PLAYERS_TRANSFORM(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : playerstransform_(){}
struct S_PLAYERS_TRANSFORMDefaultTypeInternal {
  constexpr S_PLAYERS_TRANSFORMDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_PLAYERS_TRANSFORMDefaultTypeInternal() {}
  union {
    S_PLAYERS_TRANSFORM _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_PLAYERS_TRANSFORMDefaultTypeInternal _S_PLAYERS_TRANSFORM_default_instance_;
constexpr C_PLAYER_ANIM_STATE::C_PLAYER_ANIM_STATE(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : state_(0)
{}
struct C_PLAYER_ANIM_STATEDefaultTypeInternal {
  constexpr C_PLAYER_ANIM_STATEDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_PLAYER_ANIM_STATEDefaultTypeInternal() {}
  union {
    C_PLAYER_ANIM_STATE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_PLAYER_ANIM_STATEDefaultTypeInternal _C_PLAYER_ANIM_STATE_default_instance_;
constexpr S_PLAYER_ANIM_STATE::S_PLAYER_ANIM_STATE(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_(nullptr)
  , state_(0)
{}
struct S_PLAYER_ANIM_STATEDefaultTypeInternal {
  constexpr S_PLAYER_ANIM_STATEDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_PLAYER_ANIM_STATEDefaultTypeInternal() {}
  union {
    S_PLAYER_ANIM_STATE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_PLAYER_ANIM_STATEDefaultTypeInternal _S_PLAYER_ANIM_STATE_default_instance_;
constexpr C_SELECT_PARTS::C_SELECT_PARTS(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : index_(0u){}
struct C_SELECT_PARTSDefaultTypeInternal {
  constexpr C_SELECT_PARTSDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_SELECT_PARTSDefaultTypeInternal() {}
  union {
    C_SELECT_PARTS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_SELECT_PARTSDefaultTypeInternal _C_SELECT_PARTS_default_instance_;
constexpr S_SELECT_PARTS::S_SELECT_PARTS(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : success_(false)
  , gold_(0)
  , index_(0u){}
struct S_SELECT_PARTSDefaultTypeInternal {
  constexpr S_SELECT_PARTSDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_SELECT_PARTSDefaultTypeInternal() {}
  union {
    S_SELECT_PARTS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_SELECT_PARTSDefaultTypeInternal _S_SELECT_PARTS_default_instance_;
constexpr S_SELECT_PARTS_LIST::S_SELECT_PARTS_LIST(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : partslist_(nullptr)
  , gold_(0){}
struct S_SELECT_PARTS_LISTDefaultTypeInternal {
  constexpr S_SELECT_PARTS_LISTDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_SELECT_PARTS_LISTDefaultTypeInternal() {}
  union {
    S_SELECT_PARTS_LIST _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_SELECT_PARTS_LISTDefaultTypeInternal _S_SELECT_PARTS_LIST_default_instance_;
constexpr C_REROLL_PARTS::C_REROLL_PARTS(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct C_REROLL_PARTSDefaultTypeInternal {
  constexpr C_REROLL_PARTSDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_REROLL_PARTSDefaultTypeInternal() {}
  union {
    C_REROLL_PARTS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_REROLL_PARTSDefaultTypeInternal _C_REROLL_PARTS_default_instance_;
constexpr C_RESPAWN_CLICK::C_RESPAWN_CLICK(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct C_RESPAWN_CLICKDefaultTypeInternal {
  constexpr C_RESPAWN_CLICKDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_RESPAWN_CLICKDefaultTypeInternal() {}
  union {
    C_RESPAWN_CLICK _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_RESPAWN_CLICKDefaultTypeInternal _C_RESPAWN_CLICK_default_instance_;
constexpr S_SPAWN_POINT::S_SPAWN_POINT(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_(nullptr)
  , playerinfo_(nullptr)
  , healthpoint_(0)
  , spawnpointindex_(0u){}
struct S_SPAWN_POINTDefaultTypeInternal {
  constexpr S_SPAWN_POINTDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_SPAWN_POINTDefaultTypeInternal() {}
  union {
    S_SPAWN_POINT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_SPAWN_POINTDefaultTypeInternal _S_SPAWN_POINT_default_instance_;
constexpr C_ATTACK_PLAYER::C_ATTACK_PLAYER(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : attackedplayer_(nullptr)
  , transform_(nullptr)
  , attackpoint_(0)
{}
struct C_ATTACK_PLAYERDefaultTypeInternal {
  constexpr C_ATTACK_PLAYERDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_ATTACK_PLAYERDefaultTypeInternal() {}
  union {
    C_ATTACK_PLAYER _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_ATTACK_PLAYERDefaultTypeInternal _C_ATTACK_PLAYER_default_instance_;
constexpr S_ATTACKED_PLAYER::S_ATTACKED_PLAYER(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : attackplayer_(nullptr)
  , attackedplayer_(nullptr)
  , transform_(nullptr)
  , attackpoint_(0)

  , attackedplayerhealthpoint_(0){}
struct S_ATTACKED_PLAYERDefaultTypeInternal {
  constexpr S_ATTACKED_PLAYERDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_ATTACKED_PLAYERDefaultTypeInternal() {}
  union {
    S_ATTACKED_PLAYER _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_ATTACKED_PLAYERDefaultTypeInternal _S_ATTACKED_PLAYER_default_instance_;
constexpr S_DEATH_PLAYER::S_DEATH_PLAYER(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : attackplayer_(nullptr)
  , attackedplayer_(nullptr)
  , transform_(nullptr){}
struct S_DEATH_PLAYERDefaultTypeInternal {
  constexpr S_DEATH_PLAYERDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_DEATH_PLAYERDefaultTypeInternal() {}
  union {
    S_DEATH_PLAYER _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_DEATH_PLAYERDefaultTypeInternal _S_DEATH_PLAYER_default_instance_;
constexpr C_CHAT::C_CHAT(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct C_CHATDefaultTypeInternal {
  constexpr C_CHATDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_CHATDefaultTypeInternal() {}
  union {
    C_CHAT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_CHATDefaultTypeInternal _C_CHAT_default_instance_;
constexpr S_CHAT::S_CHAT(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , playerid_(uint64_t{0u}){}
struct S_CHATDefaultTypeInternal {
  constexpr S_CHATDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_CHATDefaultTypeInternal() {}
  union {
    S_CHAT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_CHATDefaultTypeInternal _S_CHAT_default_instance_;
}  // namespace Protocol
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Protocol_2eproto[33];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Protocol_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Protocol_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Protocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_LOGIN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LOGIN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LOGIN, success_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LOGIN, player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_CREATE_ROOM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CREATE_ROOM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CREATE_ROOM, success_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CREATE_ROOM, reason_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CREATE_ROOM, roominfo_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CREATE_ROOM, player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ENTER_ROOM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ENTER_ROOM, roomcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ENTER_ROOM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ENTER_ROOM, success_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ENTER_ROOM, reason_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ENTER_ROOM, roominfo_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ENTER_ROOM, players_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ANOTHER_ENTER_ROOM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ANOTHER_ENTER_ROOM, player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_LEAVE_ROOM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ANOTHER_LEAVE_ROOM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ANOTHER_LEAVE_ROOM, player_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ANOTHER_LEAVE_ROOM, hostid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ROOM_SETTING, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ROOM_SETTING, roominfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ROOM_SETTING, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ROOM_SETTING, roominfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ROOM_START, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ROOM_START, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ROOM_START, roominfo_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ROOM_START, roundinfo_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ROOM_START, players_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ROOM_START, spawnpoint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_LOAD_COMPLETE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ROUND_START, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ROUND_START, roundinfo_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ROUND_START, players_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SHOP_START, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SHOP_START, roundinfo_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SHOP_START, player_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SHOP_START, playerinfo_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SHOP_START, partslist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_END_GAME, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_END_GAME, roundinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_RESULT_START, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_RESULT_START, roundinfo_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_RESULT_START, players_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYER_TRANSFORM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYER_TRANSFORM, transform_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYERS_TRANSFORM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYERS_TRANSFORM, playerstransform_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYER_ANIM_STATE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYER_ANIM_STATE, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYER_ANIM_STATE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYER_ANIM_STATE, player_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYER_ANIM_STATE, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_SELECT_PARTS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_SELECT_PARTS, index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SELECT_PARTS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SELECT_PARTS, success_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SELECT_PARTS, gold_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SELECT_PARTS, index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SELECT_PARTS_LIST, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SELECT_PARTS_LIST, partslist_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SELECT_PARTS_LIST, gold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_REROLL_PARTS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_RESPAWN_CLICK, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SPAWN_POINT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SPAWN_POINT, player_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SPAWN_POINT, healthpoint_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SPAWN_POINT, spawnpointindex_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SPAWN_POINT, playerinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ATTACK_PLAYER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ATTACK_PLAYER, attackedplayer_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ATTACK_PLAYER, attackpoint_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ATTACK_PLAYER, transform_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ATTACKED_PLAYER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ATTACKED_PLAYER, attackplayer_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ATTACKED_PLAYER, attackedplayer_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ATTACKED_PLAYER, attackpoint_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ATTACKED_PLAYER, transform_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ATTACKED_PLAYER, attackedplayerhealthpoint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_DEATH_PLAYER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_DEATH_PLAYER, attackplayer_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_DEATH_PLAYER, attackedplayer_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_DEATH_PLAYER, transform_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_CHAT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_CHAT, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CHAT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CHAT, playerid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CHAT, msg_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Protocol::C_LOGIN)},
  { 5, -1, sizeof(::Protocol::S_LOGIN)},
  { 12, -1, sizeof(::Protocol::C_CREATE_ROOM)},
  { 17, -1, sizeof(::Protocol::S_CREATE_ROOM)},
  { 26, -1, sizeof(::Protocol::C_ENTER_ROOM)},
  { 32, -1, sizeof(::Protocol::S_ENTER_ROOM)},
  { 41, -1, sizeof(::Protocol::S_ANOTHER_ENTER_ROOM)},
  { 47, -1, sizeof(::Protocol::C_LEAVE_ROOM)},
  { 52, -1, sizeof(::Protocol::S_ANOTHER_LEAVE_ROOM)},
  { 59, -1, sizeof(::Protocol::C_ROOM_SETTING)},
  { 65, -1, sizeof(::Protocol::S_ROOM_SETTING)},
  { 71, -1, sizeof(::Protocol::C_ROOM_START)},
  { 76, -1, sizeof(::Protocol::S_ROOM_START)},
  { 85, -1, sizeof(::Protocol::C_LOAD_COMPLETE)},
  { 90, -1, sizeof(::Protocol::S_ROUND_START)},
  { 97, -1, sizeof(::Protocol::S_SHOP_START)},
  { 106, -1, sizeof(::Protocol::S_END_GAME)},
  { 112, -1, sizeof(::Protocol::S_RESULT_START)},
  { 119, -1, sizeof(::Protocol::C_PLAYER_TRANSFORM)},
  { 125, -1, sizeof(::Protocol::S_PLAYERS_TRANSFORM)},
  { 131, -1, sizeof(::Protocol::C_PLAYER_ANIM_STATE)},
  { 137, -1, sizeof(::Protocol::S_PLAYER_ANIM_STATE)},
  { 144, -1, sizeof(::Protocol::C_SELECT_PARTS)},
  { 150, -1, sizeof(::Protocol::S_SELECT_PARTS)},
  { 158, -1, sizeof(::Protocol::S_SELECT_PARTS_LIST)},
  { 165, -1, sizeof(::Protocol::C_REROLL_PARTS)},
  { 170, -1, sizeof(::Protocol::C_RESPAWN_CLICK)},
  { 175, -1, sizeof(::Protocol::S_SPAWN_POINT)},
  { 184, -1, sizeof(::Protocol::C_ATTACK_PLAYER)},
  { 192, -1, sizeof(::Protocol::S_ATTACKED_PLAYER)},
  { 202, -1, sizeof(::Protocol::S_DEATH_PLAYER)},
  { 210, -1, sizeof(::Protocol::C_CHAT)},
  { 216, -1, sizeof(::Protocol::S_CHAT)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_C_LOGIN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_LOGIN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_C_CREATE_ROOM_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_CREATE_ROOM_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_C_ENTER_ROOM_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_ENTER_ROOM_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_ANOTHER_ENTER_ROOM_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_C_LEAVE_ROOM_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_ANOTHER_LEAVE_ROOM_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_C_ROOM_SETTING_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_ROOM_SETTING_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_C_ROOM_START_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_ROOM_START_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_C_LOAD_COMPLETE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_ROUND_START_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_SHOP_START_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_END_GAME_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_RESULT_START_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_C_PLAYER_TRANSFORM_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_PLAYERS_TRANSFORM_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_C_PLAYER_ANIM_STATE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_PLAYER_ANIM_STATE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_C_SELECT_PARTS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_SELECT_PARTS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_SELECT_PARTS_LIST_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_C_REROLL_PARTS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_C_RESPAWN_CLICK_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_SPAWN_POINT_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_C_ATTACK_PLAYER_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_ATTACKED_PLAYER_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_DEATH_PLAYER_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_C_CHAT_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_CHAT_default_instance_),
};

const char descriptor_table_protodef_Protocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016Protocol.proto\022\010Protocol\032\nEnum.proto\032\014"
  "Struct.proto\"\t\n\007C_LOGIN\"<\n\007S_LOGIN\022\017\n\007su"
  "ccess\030\001 \001(\010\022 \n\006player\030\002 \001(\0132\020.Protocol.P"
  "layer\"\017\n\rC_CREATE_ROOM\"\222\001\n\rS_CREATE_ROOM"
  "\022\017\n\007success\030\001 \001(\010\022(\n\006reason\030\002 \001(\0162\030.Prot"
  "ocol.RoomFailReason\022$\n\010roomInfo\030\003 \001(\0132\022."
  "Protocol.RoomInfo\022 \n\006player\030\004 \001(\0132\020.Prot"
  "ocol.Player\" \n\014C_ENTER_ROOM\022\020\n\010roomCode\030"
  "\001 \001(\r\"\222\001\n\014S_ENTER_ROOM\022\017\n\007success\030\001 \001(\010\022"
  "(\n\006reason\030\002 \001(\0162\030.Protocol.RoomFailReaso"
  "n\022$\n\010roomInfo\030\003 \001(\0132\022.Protocol.RoomInfo\022"
  "!\n\007players\030\004 \003(\0132\020.Protocol.Player\"8\n\024S_"
  "ANOTHER_ENTER_ROOM\022 \n\006player\030\001 \001(\0132\020.Pro"
  "tocol.Player\"\016\n\014C_LEAVE_ROOM\"H\n\024S_ANOTHE"
  "R_LEAVE_ROOM\022 \n\006player\030\001 \001(\0132\020.Protocol."
  "Player\022\016\n\006hostId\030\002 \001(\004\"6\n\016C_ROOM_SETTING"
  "\022$\n\010roomInfo\030\001 \001(\0132\022.Protocol.RoomInfo\"6"
  "\n\016S_ROOM_SETTING\022$\n\010roomInfo\030\001 \001(\0132\022.Pro"
  "tocol.RoomInfo\"\016\n\014C_ROOM_START\"\227\001\n\014S_ROO"
  "M_START\022$\n\010roomInfo\030\001 \001(\0132\022.Protocol.Roo"
  "mInfo\022&\n\troundInfo\030\002 \001(\0132\023.Protocol.Roun"
  "dInfo\022%\n\007players\030\003 \003(\0132\024.Protocol.Player"
  "Info\022\022\n\nspawnPoint\030\004 \003(\r\"\021\n\017C_LOAD_COMPL"
  "ETE\"^\n\rS_ROUND_START\022&\n\troundInfo\030\001 \001(\0132"
  "\023.Protocol.RoundInfo\022%\n\007players\030\002 \003(\0132\024."
  "Protocol.PlayerInfo\"\252\001\n\014S_SHOP_START\022&\n\t"
  "roundInfo\030\001 \001(\0132\023.Protocol.RoundInfo\022 \n\006"
  "player\030\002 \001(\0132\020.Protocol.Player\022(\n\nplayer"
  "Info\030\003 \001(\0132\024.Protocol.PlayerInfo\022&\n\tpart"
  "sList\030\004 \003(\0132\023.Protocol.PartsInfo\"4\n\nS_EN"
  "D_GAME\022&\n\troundInfo\030\001 \001(\0132\023.Protocol.Rou"
  "ndInfo\"_\n\016S_RESULT_START\022&\n\troundInfo\030\001 "
  "\001(\0132\023.Protocol.RoundInfo\022%\n\007players\030\002 \003("
  "\0132\024.Protocol.PlayerInfo\"<\n\022C_PLAYER_TRAN"
  "SFORM\022&\n\ttransform\030\001 \001(\0132\023.Protocol.Tran"
  "sform\"K\n\023S_PLAYERS_TRANSFORM\0224\n\020playersT"
  "ransform\030\001 \003(\0132\032.Protocol.PlayersTransfo"
  "rm\"9\n\023C_PLAYER_ANIM_STATE\022\"\n\005state\030\001 \001(\016"
  "2\023.Protocol.AnimState\"[\n\023S_PLAYER_ANIM_S"
  "TATE\022 \n\006player\030\001 \001(\0132\020.Protocol.Player\022\""
  "\n\005state\030\002 \001(\0162\023.Protocol.AnimState\"\037\n\016C_"
  "SELECT_PARTS\022\r\n\005index\030\001 \001(\r\">\n\016S_SELECT_"
  "PARTS\022\017\n\007success\030\001 \001(\010\022\014\n\004gold\030\002 \001(\005\022\r\n\005"
  "index\030\003 \001(\r\"K\n\023S_SELECT_PARTS_LIST\022&\n\tpa"
  "rtsList\030\001 \001(\0132\023.Protocol.PartsList\022\014\n\004go"
  "ld\030\002 \001(\005\"\020\n\016C_REROLL_PARTS\"\021\n\017C_RESPAWN_"
  "CLICK\"\211\001\n\rS_SPAWN_POINT\022 \n\006player\030\001 \001(\0132"
  "\020.Protocol.Player\022\023\n\013healthPoint\030\002 \001(\005\022\027"
  "\n\017spawnPointIndex\030\003 \001(\r\022(\n\nplayerInfo\030\004 "
  "\001(\0132\024.Protocol.PlayerInfo\"\217\001\n\017C_ATTACK_P"
  "LAYER\022(\n\016attackedPlayer\030\001 \001(\0132\020.Protocol"
  ".Player\022*\n\013attackPoint\030\002 \001(\0162\025.Protocol."
  "AttackPoint\022&\n\ttransform\030\003 \001(\0132\023.Protoco"
  "l.Transform\"\334\001\n\021S_ATTACKED_PLAYER\022&\n\014att"
  "ackPlayer\030\001 \001(\0132\020.Protocol.Player\022(\n\016att"
  "ackedPlayer\030\002 \001(\0132\020.Protocol.Player\022*\n\013a"
  "ttackPoint\030\003 \001(\0162\025.Protocol.AttackPoint\022"
  "&\n\ttransform\030\004 \001(\0132\023.Protocol.Transform\022"
  "!\n\031attackedPlayerHealthPoint\030\005 \001(\005\"\212\001\n\016S"
  "_DEATH_PLAYER\022&\n\014attackPlayer\030\001 \001(\0132\020.Pr"
  "otocol.Player\022(\n\016attackedPlayer\030\002 \001(\0132\020."
  "Protocol.Player\022&\n\ttransform\030\003 \001(\0132\023.Pro"
  "tocol.Transform\"\025\n\006C_CHAT\022\013\n\003msg\030\001 \001(\t\"\'"
  "\n\006S_CHAT\022\020\n\010playerId\030\001 \001(\004\022\013\n\003msg\030\002 \001(\tb"
  "\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Protocol_2eproto_deps[2] = {
  &::descriptor_table_Enum_2eproto,
  &::descriptor_table_Struct_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Protocol_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Protocol_2eproto = {
  false, false, 2567, descriptor_table_protodef_Protocol_2eproto, "Protocol.proto", 
  &descriptor_table_Protocol_2eproto_once, descriptor_table_Protocol_2eproto_deps, 2, 33,
  schemas, file_default_instances, TableStruct_Protocol_2eproto::offsets,
  file_level_metadata_Protocol_2eproto, file_level_enum_descriptors_Protocol_2eproto, file_level_service_descriptors_Protocol_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_Protocol_2eproto_getter() {
  return &descriptor_table_Protocol_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Protocol_2eproto(&descriptor_table_Protocol_2eproto);
namespace Protocol {

// ===================================================================

class C_LOGIN::_Internal {
 public:
};

C_LOGIN::C_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_LOGIN)
}
C_LOGIN::C_LOGIN(const C_LOGIN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.C_LOGIN)
}

void C_LOGIN::SharedCtor() {
}

C_LOGIN::~C_LOGIN() {
  // @@protoc_insertion_point(destructor:Protocol.C_LOGIN)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C_LOGIN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_LOGIN::ArenaDtor(void* object) {
  C_LOGIN* _this = reinterpret_cast< C_LOGIN* >(object);
  (void)_this;
}
void C_LOGIN::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_LOGIN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_LOGIN::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_LOGIN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_LOGIN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C_LOGIN::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_LOGIN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_LOGIN)
  return target;
}

size_t C_LOGIN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_LOGIN)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C_LOGIN::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.C_LOGIN)
  GOOGLE_DCHECK_NE(&from, this);
  const C_LOGIN* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C_LOGIN>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.C_LOGIN)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.C_LOGIN)
    MergeFrom(*source);
  }
}

void C_LOGIN::MergeFrom(const C_LOGIN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_LOGIN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void C_LOGIN::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.C_LOGIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_LOGIN::CopyFrom(const C_LOGIN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_LOGIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_LOGIN::IsInitialized() const {
  return true;
}

void C_LOGIN::InternalSwap(C_LOGIN* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_LOGIN::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[0]);
}

// ===================================================================

class S_LOGIN::_Internal {
 public:
  static const ::Protocol::Player& player(const S_LOGIN* msg);
};

const ::Protocol::Player&
S_LOGIN::_Internal::player(const S_LOGIN* msg) {
  return *msg->player_;
}
void S_LOGIN::clear_player() {
  if (GetArenaForAllocation() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
}
S_LOGIN::S_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_LOGIN)
}
S_LOGIN::S_LOGIN(const S_LOGIN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player()) {
    player_ = new ::Protocol::Player(*from.player_);
  } else {
    player_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_LOGIN)
}

void S_LOGIN::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&player_)) + sizeof(success_));
}

S_LOGIN::~S_LOGIN() {
  // @@protoc_insertion_point(destructor:Protocol.S_LOGIN)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_LOGIN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_;
}

void S_LOGIN::ArenaDtor(void* object) {
  S_LOGIN* _this = reinterpret_cast< S_LOGIN* >(object);
  (void)_this;
}
void S_LOGIN::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_LOGIN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_LOGIN::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_LOGIN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_LOGIN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Protocol.Player player = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_LOGIN::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_LOGIN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // .Protocol.Player player = 2;
  if (this->has_player()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::player(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_LOGIN)
  return target;
}

size_t S_LOGIN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_LOGIN)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.Player player = 2;
  if (this->has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_);
  }

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_LOGIN::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_LOGIN)
  GOOGLE_DCHECK_NE(&from, this);
  const S_LOGIN* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_LOGIN>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_LOGIN)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_LOGIN)
    MergeFrom(*source);
  }
}

void S_LOGIN::MergeFrom(const S_LOGIN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_LOGIN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player()) {
    _internal_mutable_player()->::Protocol::Player::MergeFrom(from._internal_player());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void S_LOGIN::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_LOGIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_LOGIN::CopyFrom(const S_LOGIN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_LOGIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_LOGIN::IsInitialized() const {
  return true;
}

void S_LOGIN::InternalSwap(S_LOGIN* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_LOGIN, success_)
      + sizeof(S_LOGIN::success_)
      - PROTOBUF_FIELD_OFFSET(S_LOGIN, player_)>(
          reinterpret_cast<char*>(&player_),
          reinterpret_cast<char*>(&other->player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_LOGIN::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[1]);
}

// ===================================================================

class C_CREATE_ROOM::_Internal {
 public:
};

C_CREATE_ROOM::C_CREATE_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_CREATE_ROOM)
}
C_CREATE_ROOM::C_CREATE_ROOM(const C_CREATE_ROOM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.C_CREATE_ROOM)
}

void C_CREATE_ROOM::SharedCtor() {
}

C_CREATE_ROOM::~C_CREATE_ROOM() {
  // @@protoc_insertion_point(destructor:Protocol.C_CREATE_ROOM)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C_CREATE_ROOM::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_CREATE_ROOM::ArenaDtor(void* object) {
  C_CREATE_ROOM* _this = reinterpret_cast< C_CREATE_ROOM* >(object);
  (void)_this;
}
void C_CREATE_ROOM::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_CREATE_ROOM::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_CREATE_ROOM::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_CREATE_ROOM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_CREATE_ROOM::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C_CREATE_ROOM::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_CREATE_ROOM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_CREATE_ROOM)
  return target;
}

size_t C_CREATE_ROOM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_CREATE_ROOM)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C_CREATE_ROOM::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.C_CREATE_ROOM)
  GOOGLE_DCHECK_NE(&from, this);
  const C_CREATE_ROOM* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C_CREATE_ROOM>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.C_CREATE_ROOM)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.C_CREATE_ROOM)
    MergeFrom(*source);
  }
}

void C_CREATE_ROOM::MergeFrom(const C_CREATE_ROOM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_CREATE_ROOM)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void C_CREATE_ROOM::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.C_CREATE_ROOM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_CREATE_ROOM::CopyFrom(const C_CREATE_ROOM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_CREATE_ROOM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_CREATE_ROOM::IsInitialized() const {
  return true;
}

void C_CREATE_ROOM::InternalSwap(C_CREATE_ROOM* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_CREATE_ROOM::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[2]);
}

// ===================================================================

class S_CREATE_ROOM::_Internal {
 public:
  static const ::Protocol::RoomInfo& roominfo(const S_CREATE_ROOM* msg);
  static const ::Protocol::Player& player(const S_CREATE_ROOM* msg);
};

const ::Protocol::RoomInfo&
S_CREATE_ROOM::_Internal::roominfo(const S_CREATE_ROOM* msg) {
  return *msg->roominfo_;
}
const ::Protocol::Player&
S_CREATE_ROOM::_Internal::player(const S_CREATE_ROOM* msg) {
  return *msg->player_;
}
void S_CREATE_ROOM::clear_roominfo() {
  if (GetArenaForAllocation() == nullptr && roominfo_ != nullptr) {
    delete roominfo_;
  }
  roominfo_ = nullptr;
}
void S_CREATE_ROOM::clear_player() {
  if (GetArenaForAllocation() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
}
S_CREATE_ROOM::S_CREATE_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_CREATE_ROOM)
}
S_CREATE_ROOM::S_CREATE_ROOM(const S_CREATE_ROOM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_roominfo()) {
    roominfo_ = new ::Protocol::RoomInfo(*from.roominfo_);
  } else {
    roominfo_ = nullptr;
  }
  if (from._internal_has_player()) {
    player_ = new ::Protocol::Player(*from.player_);
  } else {
    player_ = nullptr;
  }
  ::memcpy(&success_, &from.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&success_)) + sizeof(reason_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_CREATE_ROOM)
}

void S_CREATE_ROOM::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&roominfo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&roominfo_)) + sizeof(reason_));
}

S_CREATE_ROOM::~S_CREATE_ROOM() {
  // @@protoc_insertion_point(destructor:Protocol.S_CREATE_ROOM)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_CREATE_ROOM::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete roominfo_;
  if (this != internal_default_instance()) delete player_;
}

void S_CREATE_ROOM::ArenaDtor(void* object) {
  S_CREATE_ROOM* _this = reinterpret_cast< S_CREATE_ROOM* >(object);
  (void)_this;
}
void S_CREATE_ROOM::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_CREATE_ROOM::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_CREATE_ROOM::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_CREATE_ROOM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && roominfo_ != nullptr) {
    delete roominfo_;
  }
  roominfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&success_)) + sizeof(reason_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_CREATE_ROOM::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Protocol.RoomFailReason reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_reason(static_cast<::Protocol::RoomFailReason>(val));
        } else goto handle_unusual;
        continue;
      // .Protocol.RoomInfo roomInfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_roominfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Protocol.Player player = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_CREATE_ROOM::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_CREATE_ROOM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // .Protocol.RoomFailReason reason = 2;
  if (this->reason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_reason(), target);
  }

  // .Protocol.RoomInfo roomInfo = 3;
  if (this->has_roominfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::roominfo(this), target, stream);
  }

  // .Protocol.Player player = 4;
  if (this->has_player()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::player(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_CREATE_ROOM)
  return target;
}

size_t S_CREATE_ROOM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_CREATE_ROOM)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.RoomInfo roomInfo = 3;
  if (this->has_roominfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *roominfo_);
  }

  // .Protocol.Player player = 4;
  if (this->has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_);
  }

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  // .Protocol.RoomFailReason reason = 2;
  if (this->reason() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reason());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_CREATE_ROOM::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_CREATE_ROOM)
  GOOGLE_DCHECK_NE(&from, this);
  const S_CREATE_ROOM* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_CREATE_ROOM>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_CREATE_ROOM)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_CREATE_ROOM)
    MergeFrom(*source);
  }
}

void S_CREATE_ROOM::MergeFrom(const S_CREATE_ROOM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_CREATE_ROOM)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_roominfo()) {
    _internal_mutable_roominfo()->::Protocol::RoomInfo::MergeFrom(from._internal_roominfo());
  }
  if (from.has_player()) {
    _internal_mutable_player()->::Protocol::Player::MergeFrom(from._internal_player());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
  if (from.reason() != 0) {
    _internal_set_reason(from._internal_reason());
  }
}

void S_CREATE_ROOM::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_CREATE_ROOM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_CREATE_ROOM::CopyFrom(const S_CREATE_ROOM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_CREATE_ROOM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_CREATE_ROOM::IsInitialized() const {
  return true;
}

void S_CREATE_ROOM::InternalSwap(S_CREATE_ROOM* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_CREATE_ROOM, reason_)
      + sizeof(S_CREATE_ROOM::reason_)
      - PROTOBUF_FIELD_OFFSET(S_CREATE_ROOM, roominfo_)>(
          reinterpret_cast<char*>(&roominfo_),
          reinterpret_cast<char*>(&other->roominfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_CREATE_ROOM::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[3]);
}

// ===================================================================

class C_ENTER_ROOM::_Internal {
 public:
};

C_ENTER_ROOM::C_ENTER_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_ENTER_ROOM)
}
C_ENTER_ROOM::C_ENTER_ROOM(const C_ENTER_ROOM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  roomcode_ = from.roomcode_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_ENTER_ROOM)
}

void C_ENTER_ROOM::SharedCtor() {
roomcode_ = 0u;
}

C_ENTER_ROOM::~C_ENTER_ROOM() {
  // @@protoc_insertion_point(destructor:Protocol.C_ENTER_ROOM)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C_ENTER_ROOM::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_ENTER_ROOM::ArenaDtor(void* object) {
  C_ENTER_ROOM* _this = reinterpret_cast< C_ENTER_ROOM* >(object);
  (void)_this;
}
void C_ENTER_ROOM::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_ENTER_ROOM::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_ENTER_ROOM::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_ENTER_ROOM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roomcode_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_ENTER_ROOM::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 roomCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          roomcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C_ENTER_ROOM::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_ENTER_ROOM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 roomCode = 1;
  if (this->roomcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_roomcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_ENTER_ROOM)
  return target;
}

size_t C_ENTER_ROOM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_ENTER_ROOM)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 roomCode = 1;
  if (this->roomcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_roomcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C_ENTER_ROOM::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.C_ENTER_ROOM)
  GOOGLE_DCHECK_NE(&from, this);
  const C_ENTER_ROOM* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C_ENTER_ROOM>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.C_ENTER_ROOM)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.C_ENTER_ROOM)
    MergeFrom(*source);
  }
}

void C_ENTER_ROOM::MergeFrom(const C_ENTER_ROOM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_ENTER_ROOM)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roomcode() != 0) {
    _internal_set_roomcode(from._internal_roomcode());
  }
}

void C_ENTER_ROOM::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.C_ENTER_ROOM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_ENTER_ROOM::CopyFrom(const C_ENTER_ROOM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_ENTER_ROOM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_ENTER_ROOM::IsInitialized() const {
  return true;
}

void C_ENTER_ROOM::InternalSwap(C_ENTER_ROOM* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(roomcode_, other->roomcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_ENTER_ROOM::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[4]);
}

// ===================================================================

class S_ENTER_ROOM::_Internal {
 public:
  static const ::Protocol::RoomInfo& roominfo(const S_ENTER_ROOM* msg);
};

const ::Protocol::RoomInfo&
S_ENTER_ROOM::_Internal::roominfo(const S_ENTER_ROOM* msg) {
  return *msg->roominfo_;
}
void S_ENTER_ROOM::clear_roominfo() {
  if (GetArenaForAllocation() == nullptr && roominfo_ != nullptr) {
    delete roominfo_;
  }
  roominfo_ = nullptr;
}
void S_ENTER_ROOM::clear_players() {
  players_.Clear();
}
S_ENTER_ROOM::S_ENTER_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  players_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_ENTER_ROOM)
}
S_ENTER_ROOM::S_ENTER_ROOM(const S_ENTER_ROOM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      players_(from.players_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_roominfo()) {
    roominfo_ = new ::Protocol::RoomInfo(*from.roominfo_);
  } else {
    roominfo_ = nullptr;
  }
  ::memcpy(&success_, &from.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&success_)) + sizeof(reason_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_ENTER_ROOM)
}

void S_ENTER_ROOM::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&roominfo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&roominfo_)) + sizeof(reason_));
}

S_ENTER_ROOM::~S_ENTER_ROOM() {
  // @@protoc_insertion_point(destructor:Protocol.S_ENTER_ROOM)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_ENTER_ROOM::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete roominfo_;
}

void S_ENTER_ROOM::ArenaDtor(void* object) {
  S_ENTER_ROOM* _this = reinterpret_cast< S_ENTER_ROOM* >(object);
  (void)_this;
}
void S_ENTER_ROOM::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_ENTER_ROOM::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_ENTER_ROOM::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_ENTER_ROOM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  if (GetArenaForAllocation() == nullptr && roominfo_ != nullptr) {
    delete roominfo_;
  }
  roominfo_ = nullptr;
  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&success_)) + sizeof(reason_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ENTER_ROOM::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Protocol.RoomFailReason reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_reason(static_cast<::Protocol::RoomFailReason>(val));
        } else goto handle_unusual;
        continue;
      // .Protocol.RoomInfo roomInfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_roominfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Protocol.Player players = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_ENTER_ROOM::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_ENTER_ROOM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // .Protocol.RoomFailReason reason = 2;
  if (this->reason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_reason(), target);
  }

  // .Protocol.RoomInfo roomInfo = 3;
  if (this->has_roominfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::roominfo(this), target, stream);
  }

  // repeated .Protocol.Player players = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_players(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_ENTER_ROOM)
  return target;
}

size_t S_ENTER_ROOM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_ENTER_ROOM)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.Player players = 4;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .Protocol.RoomInfo roomInfo = 3;
  if (this->has_roominfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *roominfo_);
  }

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  // .Protocol.RoomFailReason reason = 2;
  if (this->reason() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reason());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_ENTER_ROOM::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_ENTER_ROOM)
  GOOGLE_DCHECK_NE(&from, this);
  const S_ENTER_ROOM* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_ENTER_ROOM>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_ENTER_ROOM)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_ENTER_ROOM)
    MergeFrom(*source);
  }
}

void S_ENTER_ROOM::MergeFrom(const S_ENTER_ROOM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_ENTER_ROOM)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  if (from.has_roominfo()) {
    _internal_mutable_roominfo()->::Protocol::RoomInfo::MergeFrom(from._internal_roominfo());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
  if (from.reason() != 0) {
    _internal_set_reason(from._internal_reason());
  }
}

void S_ENTER_ROOM::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_ENTER_ROOM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_ENTER_ROOM::CopyFrom(const S_ENTER_ROOM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_ENTER_ROOM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ENTER_ROOM::IsInitialized() const {
  return true;
}

void S_ENTER_ROOM::InternalSwap(S_ENTER_ROOM* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  players_.InternalSwap(&other->players_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_ENTER_ROOM, reason_)
      + sizeof(S_ENTER_ROOM::reason_)
      - PROTOBUF_FIELD_OFFSET(S_ENTER_ROOM, roominfo_)>(
          reinterpret_cast<char*>(&roominfo_),
          reinterpret_cast<char*>(&other->roominfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ENTER_ROOM::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[5]);
}

// ===================================================================

class S_ANOTHER_ENTER_ROOM::_Internal {
 public:
  static const ::Protocol::Player& player(const S_ANOTHER_ENTER_ROOM* msg);
};

const ::Protocol::Player&
S_ANOTHER_ENTER_ROOM::_Internal::player(const S_ANOTHER_ENTER_ROOM* msg) {
  return *msg->player_;
}
void S_ANOTHER_ENTER_ROOM::clear_player() {
  if (GetArenaForAllocation() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
}
S_ANOTHER_ENTER_ROOM::S_ANOTHER_ENTER_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_ANOTHER_ENTER_ROOM)
}
S_ANOTHER_ENTER_ROOM::S_ANOTHER_ENTER_ROOM(const S_ANOTHER_ENTER_ROOM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player()) {
    player_ = new ::Protocol::Player(*from.player_);
  } else {
    player_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.S_ANOTHER_ENTER_ROOM)
}

void S_ANOTHER_ENTER_ROOM::SharedCtor() {
player_ = nullptr;
}

S_ANOTHER_ENTER_ROOM::~S_ANOTHER_ENTER_ROOM() {
  // @@protoc_insertion_point(destructor:Protocol.S_ANOTHER_ENTER_ROOM)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_ANOTHER_ENTER_ROOM::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_;
}

void S_ANOTHER_ENTER_ROOM::ArenaDtor(void* object) {
  S_ANOTHER_ENTER_ROOM* _this = reinterpret_cast< S_ANOTHER_ENTER_ROOM* >(object);
  (void)_this;
}
void S_ANOTHER_ENTER_ROOM::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_ANOTHER_ENTER_ROOM::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_ANOTHER_ENTER_ROOM::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_ANOTHER_ENTER_ROOM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ANOTHER_ENTER_ROOM::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.Player player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_ANOTHER_ENTER_ROOM::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_ANOTHER_ENTER_ROOM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.Player player = 1;
  if (this->has_player()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_ANOTHER_ENTER_ROOM)
  return target;
}

size_t S_ANOTHER_ENTER_ROOM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_ANOTHER_ENTER_ROOM)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.Player player = 1;
  if (this->has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_ANOTHER_ENTER_ROOM::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_ANOTHER_ENTER_ROOM)
  GOOGLE_DCHECK_NE(&from, this);
  const S_ANOTHER_ENTER_ROOM* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_ANOTHER_ENTER_ROOM>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_ANOTHER_ENTER_ROOM)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_ANOTHER_ENTER_ROOM)
    MergeFrom(*source);
  }
}

void S_ANOTHER_ENTER_ROOM::MergeFrom(const S_ANOTHER_ENTER_ROOM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_ANOTHER_ENTER_ROOM)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player()) {
    _internal_mutable_player()->::Protocol::Player::MergeFrom(from._internal_player());
  }
}

void S_ANOTHER_ENTER_ROOM::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_ANOTHER_ENTER_ROOM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_ANOTHER_ENTER_ROOM::CopyFrom(const S_ANOTHER_ENTER_ROOM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_ANOTHER_ENTER_ROOM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ANOTHER_ENTER_ROOM::IsInitialized() const {
  return true;
}

void S_ANOTHER_ENTER_ROOM::InternalSwap(S_ANOTHER_ENTER_ROOM* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(player_, other->player_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ANOTHER_ENTER_ROOM::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[6]);
}

// ===================================================================

class C_LEAVE_ROOM::_Internal {
 public:
};

C_LEAVE_ROOM::C_LEAVE_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_LEAVE_ROOM)
}
C_LEAVE_ROOM::C_LEAVE_ROOM(const C_LEAVE_ROOM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.C_LEAVE_ROOM)
}

void C_LEAVE_ROOM::SharedCtor() {
}

C_LEAVE_ROOM::~C_LEAVE_ROOM() {
  // @@protoc_insertion_point(destructor:Protocol.C_LEAVE_ROOM)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C_LEAVE_ROOM::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_LEAVE_ROOM::ArenaDtor(void* object) {
  C_LEAVE_ROOM* _this = reinterpret_cast< C_LEAVE_ROOM* >(object);
  (void)_this;
}
void C_LEAVE_ROOM::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_LEAVE_ROOM::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_LEAVE_ROOM::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_LEAVE_ROOM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_LEAVE_ROOM::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C_LEAVE_ROOM::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_LEAVE_ROOM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_LEAVE_ROOM)
  return target;
}

size_t C_LEAVE_ROOM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_LEAVE_ROOM)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C_LEAVE_ROOM::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.C_LEAVE_ROOM)
  GOOGLE_DCHECK_NE(&from, this);
  const C_LEAVE_ROOM* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C_LEAVE_ROOM>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.C_LEAVE_ROOM)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.C_LEAVE_ROOM)
    MergeFrom(*source);
  }
}

void C_LEAVE_ROOM::MergeFrom(const C_LEAVE_ROOM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_LEAVE_ROOM)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void C_LEAVE_ROOM::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.C_LEAVE_ROOM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_LEAVE_ROOM::CopyFrom(const C_LEAVE_ROOM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_LEAVE_ROOM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_LEAVE_ROOM::IsInitialized() const {
  return true;
}

void C_LEAVE_ROOM::InternalSwap(C_LEAVE_ROOM* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_LEAVE_ROOM::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[7]);
}

// ===================================================================

class S_ANOTHER_LEAVE_ROOM::_Internal {
 public:
  static const ::Protocol::Player& player(const S_ANOTHER_LEAVE_ROOM* msg);
};

const ::Protocol::Player&
S_ANOTHER_LEAVE_ROOM::_Internal::player(const S_ANOTHER_LEAVE_ROOM* msg) {
  return *msg->player_;
}
void S_ANOTHER_LEAVE_ROOM::clear_player() {
  if (GetArenaForAllocation() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
}
S_ANOTHER_LEAVE_ROOM::S_ANOTHER_LEAVE_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_ANOTHER_LEAVE_ROOM)
}
S_ANOTHER_LEAVE_ROOM::S_ANOTHER_LEAVE_ROOM(const S_ANOTHER_LEAVE_ROOM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player()) {
    player_ = new ::Protocol::Player(*from.player_);
  } else {
    player_ = nullptr;
  }
  hostid_ = from.hostid_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_ANOTHER_LEAVE_ROOM)
}

void S_ANOTHER_LEAVE_ROOM::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hostid_) -
    reinterpret_cast<char*>(&player_)) + sizeof(hostid_));
}

S_ANOTHER_LEAVE_ROOM::~S_ANOTHER_LEAVE_ROOM() {
  // @@protoc_insertion_point(destructor:Protocol.S_ANOTHER_LEAVE_ROOM)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_ANOTHER_LEAVE_ROOM::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_;
}

void S_ANOTHER_LEAVE_ROOM::ArenaDtor(void* object) {
  S_ANOTHER_LEAVE_ROOM* _this = reinterpret_cast< S_ANOTHER_LEAVE_ROOM* >(object);
  (void)_this;
}
void S_ANOTHER_LEAVE_ROOM::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_ANOTHER_LEAVE_ROOM::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_ANOTHER_LEAVE_ROOM::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_ANOTHER_LEAVE_ROOM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
  hostid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ANOTHER_LEAVE_ROOM::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.Player player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 hostId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          hostid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_ANOTHER_LEAVE_ROOM::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_ANOTHER_LEAVE_ROOM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.Player player = 1;
  if (this->has_player()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player(this), target, stream);
  }

  // uint64 hostId = 2;
  if (this->hostid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_hostid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_ANOTHER_LEAVE_ROOM)
  return target;
}

size_t S_ANOTHER_LEAVE_ROOM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_ANOTHER_LEAVE_ROOM)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.Player player = 1;
  if (this->has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_);
  }

  // uint64 hostId = 2;
  if (this->hostid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_hostid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_ANOTHER_LEAVE_ROOM::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_ANOTHER_LEAVE_ROOM)
  GOOGLE_DCHECK_NE(&from, this);
  const S_ANOTHER_LEAVE_ROOM* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_ANOTHER_LEAVE_ROOM>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_ANOTHER_LEAVE_ROOM)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_ANOTHER_LEAVE_ROOM)
    MergeFrom(*source);
  }
}

void S_ANOTHER_LEAVE_ROOM::MergeFrom(const S_ANOTHER_LEAVE_ROOM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_ANOTHER_LEAVE_ROOM)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player()) {
    _internal_mutable_player()->::Protocol::Player::MergeFrom(from._internal_player());
  }
  if (from.hostid() != 0) {
    _internal_set_hostid(from._internal_hostid());
  }
}

void S_ANOTHER_LEAVE_ROOM::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_ANOTHER_LEAVE_ROOM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_ANOTHER_LEAVE_ROOM::CopyFrom(const S_ANOTHER_LEAVE_ROOM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_ANOTHER_LEAVE_ROOM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ANOTHER_LEAVE_ROOM::IsInitialized() const {
  return true;
}

void S_ANOTHER_LEAVE_ROOM::InternalSwap(S_ANOTHER_LEAVE_ROOM* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_ANOTHER_LEAVE_ROOM, hostid_)
      + sizeof(S_ANOTHER_LEAVE_ROOM::hostid_)
      - PROTOBUF_FIELD_OFFSET(S_ANOTHER_LEAVE_ROOM, player_)>(
          reinterpret_cast<char*>(&player_),
          reinterpret_cast<char*>(&other->player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ANOTHER_LEAVE_ROOM::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[8]);
}

// ===================================================================

class C_ROOM_SETTING::_Internal {
 public:
  static const ::Protocol::RoomInfo& roominfo(const C_ROOM_SETTING* msg);
};

const ::Protocol::RoomInfo&
C_ROOM_SETTING::_Internal::roominfo(const C_ROOM_SETTING* msg) {
  return *msg->roominfo_;
}
void C_ROOM_SETTING::clear_roominfo() {
  if (GetArenaForAllocation() == nullptr && roominfo_ != nullptr) {
    delete roominfo_;
  }
  roominfo_ = nullptr;
}
C_ROOM_SETTING::C_ROOM_SETTING(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_ROOM_SETTING)
}
C_ROOM_SETTING::C_ROOM_SETTING(const C_ROOM_SETTING& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_roominfo()) {
    roominfo_ = new ::Protocol::RoomInfo(*from.roominfo_);
  } else {
    roominfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_ROOM_SETTING)
}

void C_ROOM_SETTING::SharedCtor() {
roominfo_ = nullptr;
}

C_ROOM_SETTING::~C_ROOM_SETTING() {
  // @@protoc_insertion_point(destructor:Protocol.C_ROOM_SETTING)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C_ROOM_SETTING::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete roominfo_;
}

void C_ROOM_SETTING::ArenaDtor(void* object) {
  C_ROOM_SETTING* _this = reinterpret_cast< C_ROOM_SETTING* >(object);
  (void)_this;
}
void C_ROOM_SETTING::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_ROOM_SETTING::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_ROOM_SETTING::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_ROOM_SETTING)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && roominfo_ != nullptr) {
    delete roominfo_;
  }
  roominfo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_ROOM_SETTING::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.RoomInfo roomInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_roominfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C_ROOM_SETTING::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_ROOM_SETTING)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.RoomInfo roomInfo = 1;
  if (this->has_roominfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::roominfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_ROOM_SETTING)
  return target;
}

size_t C_ROOM_SETTING::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_ROOM_SETTING)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.RoomInfo roomInfo = 1;
  if (this->has_roominfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *roominfo_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C_ROOM_SETTING::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.C_ROOM_SETTING)
  GOOGLE_DCHECK_NE(&from, this);
  const C_ROOM_SETTING* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C_ROOM_SETTING>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.C_ROOM_SETTING)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.C_ROOM_SETTING)
    MergeFrom(*source);
  }
}

void C_ROOM_SETTING::MergeFrom(const C_ROOM_SETTING& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_ROOM_SETTING)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_roominfo()) {
    _internal_mutable_roominfo()->::Protocol::RoomInfo::MergeFrom(from._internal_roominfo());
  }
}

void C_ROOM_SETTING::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.C_ROOM_SETTING)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_ROOM_SETTING::CopyFrom(const C_ROOM_SETTING& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_ROOM_SETTING)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_ROOM_SETTING::IsInitialized() const {
  return true;
}

void C_ROOM_SETTING::InternalSwap(C_ROOM_SETTING* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(roominfo_, other->roominfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_ROOM_SETTING::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[9]);
}

// ===================================================================

class S_ROOM_SETTING::_Internal {
 public:
  static const ::Protocol::RoomInfo& roominfo(const S_ROOM_SETTING* msg);
};

const ::Protocol::RoomInfo&
S_ROOM_SETTING::_Internal::roominfo(const S_ROOM_SETTING* msg) {
  return *msg->roominfo_;
}
void S_ROOM_SETTING::clear_roominfo() {
  if (GetArenaForAllocation() == nullptr && roominfo_ != nullptr) {
    delete roominfo_;
  }
  roominfo_ = nullptr;
}
S_ROOM_SETTING::S_ROOM_SETTING(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_ROOM_SETTING)
}
S_ROOM_SETTING::S_ROOM_SETTING(const S_ROOM_SETTING& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_roominfo()) {
    roominfo_ = new ::Protocol::RoomInfo(*from.roominfo_);
  } else {
    roominfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.S_ROOM_SETTING)
}

void S_ROOM_SETTING::SharedCtor() {
roominfo_ = nullptr;
}

S_ROOM_SETTING::~S_ROOM_SETTING() {
  // @@protoc_insertion_point(destructor:Protocol.S_ROOM_SETTING)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_ROOM_SETTING::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete roominfo_;
}

void S_ROOM_SETTING::ArenaDtor(void* object) {
  S_ROOM_SETTING* _this = reinterpret_cast< S_ROOM_SETTING* >(object);
  (void)_this;
}
void S_ROOM_SETTING::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_ROOM_SETTING::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_ROOM_SETTING::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_ROOM_SETTING)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && roominfo_ != nullptr) {
    delete roominfo_;
  }
  roominfo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ROOM_SETTING::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.RoomInfo roomInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_roominfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_ROOM_SETTING::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_ROOM_SETTING)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.RoomInfo roomInfo = 1;
  if (this->has_roominfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::roominfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_ROOM_SETTING)
  return target;
}

size_t S_ROOM_SETTING::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_ROOM_SETTING)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.RoomInfo roomInfo = 1;
  if (this->has_roominfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *roominfo_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_ROOM_SETTING::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_ROOM_SETTING)
  GOOGLE_DCHECK_NE(&from, this);
  const S_ROOM_SETTING* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_ROOM_SETTING>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_ROOM_SETTING)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_ROOM_SETTING)
    MergeFrom(*source);
  }
}

void S_ROOM_SETTING::MergeFrom(const S_ROOM_SETTING& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_ROOM_SETTING)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_roominfo()) {
    _internal_mutable_roominfo()->::Protocol::RoomInfo::MergeFrom(from._internal_roominfo());
  }
}

void S_ROOM_SETTING::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_ROOM_SETTING)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_ROOM_SETTING::CopyFrom(const S_ROOM_SETTING& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_ROOM_SETTING)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ROOM_SETTING::IsInitialized() const {
  return true;
}

void S_ROOM_SETTING::InternalSwap(S_ROOM_SETTING* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(roominfo_, other->roominfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ROOM_SETTING::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[10]);
}

// ===================================================================

class C_ROOM_START::_Internal {
 public:
};

C_ROOM_START::C_ROOM_START(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_ROOM_START)
}
C_ROOM_START::C_ROOM_START(const C_ROOM_START& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.C_ROOM_START)
}

void C_ROOM_START::SharedCtor() {
}

C_ROOM_START::~C_ROOM_START() {
  // @@protoc_insertion_point(destructor:Protocol.C_ROOM_START)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C_ROOM_START::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_ROOM_START::ArenaDtor(void* object) {
  C_ROOM_START* _this = reinterpret_cast< C_ROOM_START* >(object);
  (void)_this;
}
void C_ROOM_START::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_ROOM_START::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_ROOM_START::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_ROOM_START)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_ROOM_START::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C_ROOM_START::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_ROOM_START)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_ROOM_START)
  return target;
}

size_t C_ROOM_START::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_ROOM_START)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C_ROOM_START::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.C_ROOM_START)
  GOOGLE_DCHECK_NE(&from, this);
  const C_ROOM_START* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C_ROOM_START>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.C_ROOM_START)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.C_ROOM_START)
    MergeFrom(*source);
  }
}

void C_ROOM_START::MergeFrom(const C_ROOM_START& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_ROOM_START)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void C_ROOM_START::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.C_ROOM_START)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_ROOM_START::CopyFrom(const C_ROOM_START& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_ROOM_START)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_ROOM_START::IsInitialized() const {
  return true;
}

void C_ROOM_START::InternalSwap(C_ROOM_START* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_ROOM_START::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[11]);
}

// ===================================================================

class S_ROOM_START::_Internal {
 public:
  static const ::Protocol::RoomInfo& roominfo(const S_ROOM_START* msg);
  static const ::Protocol::RoundInfo& roundinfo(const S_ROOM_START* msg);
};

const ::Protocol::RoomInfo&
S_ROOM_START::_Internal::roominfo(const S_ROOM_START* msg) {
  return *msg->roominfo_;
}
const ::Protocol::RoundInfo&
S_ROOM_START::_Internal::roundinfo(const S_ROOM_START* msg) {
  return *msg->roundinfo_;
}
void S_ROOM_START::clear_roominfo() {
  if (GetArenaForAllocation() == nullptr && roominfo_ != nullptr) {
    delete roominfo_;
  }
  roominfo_ = nullptr;
}
void S_ROOM_START::clear_roundinfo() {
  if (GetArenaForAllocation() == nullptr && roundinfo_ != nullptr) {
    delete roundinfo_;
  }
  roundinfo_ = nullptr;
}
void S_ROOM_START::clear_players() {
  players_.Clear();
}
S_ROOM_START::S_ROOM_START(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  players_(arena),
  spawnpoint_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_ROOM_START)
}
S_ROOM_START::S_ROOM_START(const S_ROOM_START& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      players_(from.players_),
      spawnpoint_(from.spawnpoint_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_roominfo()) {
    roominfo_ = new ::Protocol::RoomInfo(*from.roominfo_);
  } else {
    roominfo_ = nullptr;
  }
  if (from._internal_has_roundinfo()) {
    roundinfo_ = new ::Protocol::RoundInfo(*from.roundinfo_);
  } else {
    roundinfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.S_ROOM_START)
}

void S_ROOM_START::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&roominfo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&roundinfo_) -
    reinterpret_cast<char*>(&roominfo_)) + sizeof(roundinfo_));
}

S_ROOM_START::~S_ROOM_START() {
  // @@protoc_insertion_point(destructor:Protocol.S_ROOM_START)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_ROOM_START::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete roominfo_;
  if (this != internal_default_instance()) delete roundinfo_;
}

void S_ROOM_START::ArenaDtor(void* object) {
  S_ROOM_START* _this = reinterpret_cast< S_ROOM_START* >(object);
  (void)_this;
}
void S_ROOM_START::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_ROOM_START::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_ROOM_START::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_ROOM_START)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  spawnpoint_.Clear();
  if (GetArenaForAllocation() == nullptr && roominfo_ != nullptr) {
    delete roominfo_;
  }
  roominfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && roundinfo_ != nullptr) {
    delete roundinfo_;
  }
  roundinfo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ROOM_START::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.RoomInfo roomInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_roominfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Protocol.RoundInfo roundInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_roundinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Protocol.PlayerInfo players = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 spawnPoint = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_spawnpoint(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_spawnpoint(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_ROOM_START::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_ROOM_START)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.RoomInfo roomInfo = 1;
  if (this->has_roominfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::roominfo(this), target, stream);
  }

  // .Protocol.RoundInfo roundInfo = 2;
  if (this->has_roundinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::roundinfo(this), target, stream);
  }

  // repeated .Protocol.PlayerInfo players = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_players(i), target, stream);
  }

  // repeated uint32 spawnPoint = 4;
  {
    int byte_size = _spawnpoint_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_spawnpoint(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_ROOM_START)
  return target;
}

size_t S_ROOM_START::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_ROOM_START)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.PlayerInfo players = 3;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 spawnPoint = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->spawnpoint_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _spawnpoint_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .Protocol.RoomInfo roomInfo = 1;
  if (this->has_roominfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *roominfo_);
  }

  // .Protocol.RoundInfo roundInfo = 2;
  if (this->has_roundinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *roundinfo_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_ROOM_START::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_ROOM_START)
  GOOGLE_DCHECK_NE(&from, this);
  const S_ROOM_START* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_ROOM_START>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_ROOM_START)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_ROOM_START)
    MergeFrom(*source);
  }
}

void S_ROOM_START::MergeFrom(const S_ROOM_START& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_ROOM_START)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  spawnpoint_.MergeFrom(from.spawnpoint_);
  if (from.has_roominfo()) {
    _internal_mutable_roominfo()->::Protocol::RoomInfo::MergeFrom(from._internal_roominfo());
  }
  if (from.has_roundinfo()) {
    _internal_mutable_roundinfo()->::Protocol::RoundInfo::MergeFrom(from._internal_roundinfo());
  }
}

void S_ROOM_START::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_ROOM_START)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_ROOM_START::CopyFrom(const S_ROOM_START& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_ROOM_START)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ROOM_START::IsInitialized() const {
  return true;
}

void S_ROOM_START::InternalSwap(S_ROOM_START* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  players_.InternalSwap(&other->players_);
  spawnpoint_.InternalSwap(&other->spawnpoint_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_ROOM_START, roundinfo_)
      + sizeof(S_ROOM_START::roundinfo_)
      - PROTOBUF_FIELD_OFFSET(S_ROOM_START, roominfo_)>(
          reinterpret_cast<char*>(&roominfo_),
          reinterpret_cast<char*>(&other->roominfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ROOM_START::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[12]);
}

// ===================================================================

class C_LOAD_COMPLETE::_Internal {
 public:
};

C_LOAD_COMPLETE::C_LOAD_COMPLETE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_LOAD_COMPLETE)
}
C_LOAD_COMPLETE::C_LOAD_COMPLETE(const C_LOAD_COMPLETE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.C_LOAD_COMPLETE)
}

void C_LOAD_COMPLETE::SharedCtor() {
}

C_LOAD_COMPLETE::~C_LOAD_COMPLETE() {
  // @@protoc_insertion_point(destructor:Protocol.C_LOAD_COMPLETE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C_LOAD_COMPLETE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_LOAD_COMPLETE::ArenaDtor(void* object) {
  C_LOAD_COMPLETE* _this = reinterpret_cast< C_LOAD_COMPLETE* >(object);
  (void)_this;
}
void C_LOAD_COMPLETE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_LOAD_COMPLETE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_LOAD_COMPLETE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_LOAD_COMPLETE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_LOAD_COMPLETE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C_LOAD_COMPLETE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_LOAD_COMPLETE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_LOAD_COMPLETE)
  return target;
}

size_t C_LOAD_COMPLETE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_LOAD_COMPLETE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C_LOAD_COMPLETE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.C_LOAD_COMPLETE)
  GOOGLE_DCHECK_NE(&from, this);
  const C_LOAD_COMPLETE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C_LOAD_COMPLETE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.C_LOAD_COMPLETE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.C_LOAD_COMPLETE)
    MergeFrom(*source);
  }
}

void C_LOAD_COMPLETE::MergeFrom(const C_LOAD_COMPLETE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_LOAD_COMPLETE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void C_LOAD_COMPLETE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.C_LOAD_COMPLETE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_LOAD_COMPLETE::CopyFrom(const C_LOAD_COMPLETE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_LOAD_COMPLETE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_LOAD_COMPLETE::IsInitialized() const {
  return true;
}

void C_LOAD_COMPLETE::InternalSwap(C_LOAD_COMPLETE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_LOAD_COMPLETE::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[13]);
}

// ===================================================================

class S_ROUND_START::_Internal {
 public:
  static const ::Protocol::RoundInfo& roundinfo(const S_ROUND_START* msg);
};

const ::Protocol::RoundInfo&
S_ROUND_START::_Internal::roundinfo(const S_ROUND_START* msg) {
  return *msg->roundinfo_;
}
void S_ROUND_START::clear_roundinfo() {
  if (GetArenaForAllocation() == nullptr && roundinfo_ != nullptr) {
    delete roundinfo_;
  }
  roundinfo_ = nullptr;
}
void S_ROUND_START::clear_players() {
  players_.Clear();
}
S_ROUND_START::S_ROUND_START(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  players_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_ROUND_START)
}
S_ROUND_START::S_ROUND_START(const S_ROUND_START& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      players_(from.players_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_roundinfo()) {
    roundinfo_ = new ::Protocol::RoundInfo(*from.roundinfo_);
  } else {
    roundinfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.S_ROUND_START)
}

void S_ROUND_START::SharedCtor() {
roundinfo_ = nullptr;
}

S_ROUND_START::~S_ROUND_START() {
  // @@protoc_insertion_point(destructor:Protocol.S_ROUND_START)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_ROUND_START::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete roundinfo_;
}

void S_ROUND_START::ArenaDtor(void* object) {
  S_ROUND_START* _this = reinterpret_cast< S_ROUND_START* >(object);
  (void)_this;
}
void S_ROUND_START::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_ROUND_START::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_ROUND_START::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_ROUND_START)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  if (GetArenaForAllocation() == nullptr && roundinfo_ != nullptr) {
    delete roundinfo_;
  }
  roundinfo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ROUND_START::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.RoundInfo roundInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_roundinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Protocol.PlayerInfo players = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_ROUND_START::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_ROUND_START)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.RoundInfo roundInfo = 1;
  if (this->has_roundinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::roundinfo(this), target, stream);
  }

  // repeated .Protocol.PlayerInfo players = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_players(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_ROUND_START)
  return target;
}

size_t S_ROUND_START::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_ROUND_START)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.PlayerInfo players = 2;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .Protocol.RoundInfo roundInfo = 1;
  if (this->has_roundinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *roundinfo_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_ROUND_START::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_ROUND_START)
  GOOGLE_DCHECK_NE(&from, this);
  const S_ROUND_START* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_ROUND_START>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_ROUND_START)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_ROUND_START)
    MergeFrom(*source);
  }
}

void S_ROUND_START::MergeFrom(const S_ROUND_START& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_ROUND_START)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  if (from.has_roundinfo()) {
    _internal_mutable_roundinfo()->::Protocol::RoundInfo::MergeFrom(from._internal_roundinfo());
  }
}

void S_ROUND_START::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_ROUND_START)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_ROUND_START::CopyFrom(const S_ROUND_START& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_ROUND_START)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ROUND_START::IsInitialized() const {
  return true;
}

void S_ROUND_START::InternalSwap(S_ROUND_START* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  players_.InternalSwap(&other->players_);
  swap(roundinfo_, other->roundinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ROUND_START::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[14]);
}

// ===================================================================

class S_SHOP_START::_Internal {
 public:
  static const ::Protocol::RoundInfo& roundinfo(const S_SHOP_START* msg);
  static const ::Protocol::Player& player(const S_SHOP_START* msg);
  static const ::Protocol::PlayerInfo& playerinfo(const S_SHOP_START* msg);
};

const ::Protocol::RoundInfo&
S_SHOP_START::_Internal::roundinfo(const S_SHOP_START* msg) {
  return *msg->roundinfo_;
}
const ::Protocol::Player&
S_SHOP_START::_Internal::player(const S_SHOP_START* msg) {
  return *msg->player_;
}
const ::Protocol::PlayerInfo&
S_SHOP_START::_Internal::playerinfo(const S_SHOP_START* msg) {
  return *msg->playerinfo_;
}
void S_SHOP_START::clear_roundinfo() {
  if (GetArenaForAllocation() == nullptr && roundinfo_ != nullptr) {
    delete roundinfo_;
  }
  roundinfo_ = nullptr;
}
void S_SHOP_START::clear_player() {
  if (GetArenaForAllocation() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
}
void S_SHOP_START::clear_playerinfo() {
  if (GetArenaForAllocation() == nullptr && playerinfo_ != nullptr) {
    delete playerinfo_;
  }
  playerinfo_ = nullptr;
}
void S_SHOP_START::clear_partslist() {
  partslist_.Clear();
}
S_SHOP_START::S_SHOP_START(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  partslist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_SHOP_START)
}
S_SHOP_START::S_SHOP_START(const S_SHOP_START& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      partslist_(from.partslist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_roundinfo()) {
    roundinfo_ = new ::Protocol::RoundInfo(*from.roundinfo_);
  } else {
    roundinfo_ = nullptr;
  }
  if (from._internal_has_player()) {
    player_ = new ::Protocol::Player(*from.player_);
  } else {
    player_ = nullptr;
  }
  if (from._internal_has_playerinfo()) {
    playerinfo_ = new ::Protocol::PlayerInfo(*from.playerinfo_);
  } else {
    playerinfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.S_SHOP_START)
}

void S_SHOP_START::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&roundinfo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&playerinfo_) -
    reinterpret_cast<char*>(&roundinfo_)) + sizeof(playerinfo_));
}

S_SHOP_START::~S_SHOP_START() {
  // @@protoc_insertion_point(destructor:Protocol.S_SHOP_START)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_SHOP_START::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete roundinfo_;
  if (this != internal_default_instance()) delete player_;
  if (this != internal_default_instance()) delete playerinfo_;
}

void S_SHOP_START::ArenaDtor(void* object) {
  S_SHOP_START* _this = reinterpret_cast< S_SHOP_START* >(object);
  (void)_this;
}
void S_SHOP_START::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_SHOP_START::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_SHOP_START::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_SHOP_START)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partslist_.Clear();
  if (GetArenaForAllocation() == nullptr && roundinfo_ != nullptr) {
    delete roundinfo_;
  }
  roundinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
  if (GetArenaForAllocation() == nullptr && playerinfo_ != nullptr) {
    delete playerinfo_;
  }
  playerinfo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_SHOP_START::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.RoundInfo roundInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_roundinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Protocol.Player player = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Protocol.PlayerInfo playerInfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_playerinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Protocol.PartsInfo partsList = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_partslist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_SHOP_START::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_SHOP_START)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.RoundInfo roundInfo = 1;
  if (this->has_roundinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::roundinfo(this), target, stream);
  }

  // .Protocol.Player player = 2;
  if (this->has_player()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::player(this), target, stream);
  }

  // .Protocol.PlayerInfo playerInfo = 3;
  if (this->has_playerinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::playerinfo(this), target, stream);
  }

  // repeated .Protocol.PartsInfo partsList = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_partslist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_partslist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_SHOP_START)
  return target;
}

size_t S_SHOP_START::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_SHOP_START)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.PartsInfo partsList = 4;
  total_size += 1UL * this->_internal_partslist_size();
  for (const auto& msg : this->partslist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .Protocol.RoundInfo roundInfo = 1;
  if (this->has_roundinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *roundinfo_);
  }

  // .Protocol.Player player = 2;
  if (this->has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_);
  }

  // .Protocol.PlayerInfo playerInfo = 3;
  if (this->has_playerinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *playerinfo_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_SHOP_START::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_SHOP_START)
  GOOGLE_DCHECK_NE(&from, this);
  const S_SHOP_START* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_SHOP_START>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_SHOP_START)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_SHOP_START)
    MergeFrom(*source);
  }
}

void S_SHOP_START::MergeFrom(const S_SHOP_START& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_SHOP_START)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  partslist_.MergeFrom(from.partslist_);
  if (from.has_roundinfo()) {
    _internal_mutable_roundinfo()->::Protocol::RoundInfo::MergeFrom(from._internal_roundinfo());
  }
  if (from.has_player()) {
    _internal_mutable_player()->::Protocol::Player::MergeFrom(from._internal_player());
  }
  if (from.has_playerinfo()) {
    _internal_mutable_playerinfo()->::Protocol::PlayerInfo::MergeFrom(from._internal_playerinfo());
  }
}

void S_SHOP_START::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_SHOP_START)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_SHOP_START::CopyFrom(const S_SHOP_START& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_SHOP_START)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_SHOP_START::IsInitialized() const {
  return true;
}

void S_SHOP_START::InternalSwap(S_SHOP_START* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  partslist_.InternalSwap(&other->partslist_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_SHOP_START, playerinfo_)
      + sizeof(S_SHOP_START::playerinfo_)
      - PROTOBUF_FIELD_OFFSET(S_SHOP_START, roundinfo_)>(
          reinterpret_cast<char*>(&roundinfo_),
          reinterpret_cast<char*>(&other->roundinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_SHOP_START::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[15]);
}

// ===================================================================

class S_END_GAME::_Internal {
 public:
  static const ::Protocol::RoundInfo& roundinfo(const S_END_GAME* msg);
};

const ::Protocol::RoundInfo&
S_END_GAME::_Internal::roundinfo(const S_END_GAME* msg) {
  return *msg->roundinfo_;
}
void S_END_GAME::clear_roundinfo() {
  if (GetArenaForAllocation() == nullptr && roundinfo_ != nullptr) {
    delete roundinfo_;
  }
  roundinfo_ = nullptr;
}
S_END_GAME::S_END_GAME(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_END_GAME)
}
S_END_GAME::S_END_GAME(const S_END_GAME& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_roundinfo()) {
    roundinfo_ = new ::Protocol::RoundInfo(*from.roundinfo_);
  } else {
    roundinfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.S_END_GAME)
}

void S_END_GAME::SharedCtor() {
roundinfo_ = nullptr;
}

S_END_GAME::~S_END_GAME() {
  // @@protoc_insertion_point(destructor:Protocol.S_END_GAME)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_END_GAME::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete roundinfo_;
}

void S_END_GAME::ArenaDtor(void* object) {
  S_END_GAME* _this = reinterpret_cast< S_END_GAME* >(object);
  (void)_this;
}
void S_END_GAME::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_END_GAME::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_END_GAME::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_END_GAME)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && roundinfo_ != nullptr) {
    delete roundinfo_;
  }
  roundinfo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_END_GAME::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.RoundInfo roundInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_roundinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_END_GAME::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_END_GAME)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.RoundInfo roundInfo = 1;
  if (this->has_roundinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::roundinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_END_GAME)
  return target;
}

size_t S_END_GAME::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_END_GAME)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.RoundInfo roundInfo = 1;
  if (this->has_roundinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *roundinfo_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_END_GAME::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_END_GAME)
  GOOGLE_DCHECK_NE(&from, this);
  const S_END_GAME* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_END_GAME>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_END_GAME)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_END_GAME)
    MergeFrom(*source);
  }
}

void S_END_GAME::MergeFrom(const S_END_GAME& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_END_GAME)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_roundinfo()) {
    _internal_mutable_roundinfo()->::Protocol::RoundInfo::MergeFrom(from._internal_roundinfo());
  }
}

void S_END_GAME::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_END_GAME)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_END_GAME::CopyFrom(const S_END_GAME& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_END_GAME)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_END_GAME::IsInitialized() const {
  return true;
}

void S_END_GAME::InternalSwap(S_END_GAME* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(roundinfo_, other->roundinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_END_GAME::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[16]);
}

// ===================================================================

class S_RESULT_START::_Internal {
 public:
  static const ::Protocol::RoundInfo& roundinfo(const S_RESULT_START* msg);
};

const ::Protocol::RoundInfo&
S_RESULT_START::_Internal::roundinfo(const S_RESULT_START* msg) {
  return *msg->roundinfo_;
}
void S_RESULT_START::clear_roundinfo() {
  if (GetArenaForAllocation() == nullptr && roundinfo_ != nullptr) {
    delete roundinfo_;
  }
  roundinfo_ = nullptr;
}
void S_RESULT_START::clear_players() {
  players_.Clear();
}
S_RESULT_START::S_RESULT_START(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  players_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_RESULT_START)
}
S_RESULT_START::S_RESULT_START(const S_RESULT_START& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      players_(from.players_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_roundinfo()) {
    roundinfo_ = new ::Protocol::RoundInfo(*from.roundinfo_);
  } else {
    roundinfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.S_RESULT_START)
}

void S_RESULT_START::SharedCtor() {
roundinfo_ = nullptr;
}

S_RESULT_START::~S_RESULT_START() {
  // @@protoc_insertion_point(destructor:Protocol.S_RESULT_START)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_RESULT_START::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete roundinfo_;
}

void S_RESULT_START::ArenaDtor(void* object) {
  S_RESULT_START* _this = reinterpret_cast< S_RESULT_START* >(object);
  (void)_this;
}
void S_RESULT_START::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_RESULT_START::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_RESULT_START::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_RESULT_START)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  if (GetArenaForAllocation() == nullptr && roundinfo_ != nullptr) {
    delete roundinfo_;
  }
  roundinfo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_RESULT_START::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.RoundInfo roundInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_roundinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Protocol.PlayerInfo players = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_RESULT_START::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_RESULT_START)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.RoundInfo roundInfo = 1;
  if (this->has_roundinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::roundinfo(this), target, stream);
  }

  // repeated .Protocol.PlayerInfo players = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_players(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_RESULT_START)
  return target;
}

size_t S_RESULT_START::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_RESULT_START)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.PlayerInfo players = 2;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .Protocol.RoundInfo roundInfo = 1;
  if (this->has_roundinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *roundinfo_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_RESULT_START::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_RESULT_START)
  GOOGLE_DCHECK_NE(&from, this);
  const S_RESULT_START* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_RESULT_START>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_RESULT_START)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_RESULT_START)
    MergeFrom(*source);
  }
}

void S_RESULT_START::MergeFrom(const S_RESULT_START& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_RESULT_START)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  if (from.has_roundinfo()) {
    _internal_mutable_roundinfo()->::Protocol::RoundInfo::MergeFrom(from._internal_roundinfo());
  }
}

void S_RESULT_START::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_RESULT_START)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_RESULT_START::CopyFrom(const S_RESULT_START& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_RESULT_START)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_RESULT_START::IsInitialized() const {
  return true;
}

void S_RESULT_START::InternalSwap(S_RESULT_START* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  players_.InternalSwap(&other->players_);
  swap(roundinfo_, other->roundinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_RESULT_START::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[17]);
}

// ===================================================================

class C_PLAYER_TRANSFORM::_Internal {
 public:
  static const ::Protocol::Transform& transform(const C_PLAYER_TRANSFORM* msg);
};

const ::Protocol::Transform&
C_PLAYER_TRANSFORM::_Internal::transform(const C_PLAYER_TRANSFORM* msg) {
  return *msg->transform_;
}
void C_PLAYER_TRANSFORM::clear_transform() {
  if (GetArenaForAllocation() == nullptr && transform_ != nullptr) {
    delete transform_;
  }
  transform_ = nullptr;
}
C_PLAYER_TRANSFORM::C_PLAYER_TRANSFORM(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_PLAYER_TRANSFORM)
}
C_PLAYER_TRANSFORM::C_PLAYER_TRANSFORM(const C_PLAYER_TRANSFORM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_transform()) {
    transform_ = new ::Protocol::Transform(*from.transform_);
  } else {
    transform_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_PLAYER_TRANSFORM)
}

void C_PLAYER_TRANSFORM::SharedCtor() {
transform_ = nullptr;
}

C_PLAYER_TRANSFORM::~C_PLAYER_TRANSFORM() {
  // @@protoc_insertion_point(destructor:Protocol.C_PLAYER_TRANSFORM)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C_PLAYER_TRANSFORM::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete transform_;
}

void C_PLAYER_TRANSFORM::ArenaDtor(void* object) {
  C_PLAYER_TRANSFORM* _this = reinterpret_cast< C_PLAYER_TRANSFORM* >(object);
  (void)_this;
}
void C_PLAYER_TRANSFORM::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_PLAYER_TRANSFORM::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_PLAYER_TRANSFORM::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_PLAYER_TRANSFORM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && transform_ != nullptr) {
    delete transform_;
  }
  transform_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_PLAYER_TRANSFORM::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.Transform transform = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_transform(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C_PLAYER_TRANSFORM::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_PLAYER_TRANSFORM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.Transform transform = 1;
  if (this->has_transform()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::transform(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_PLAYER_TRANSFORM)
  return target;
}

size_t C_PLAYER_TRANSFORM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_PLAYER_TRANSFORM)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.Transform transform = 1;
  if (this->has_transform()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transform_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C_PLAYER_TRANSFORM::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.C_PLAYER_TRANSFORM)
  GOOGLE_DCHECK_NE(&from, this);
  const C_PLAYER_TRANSFORM* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C_PLAYER_TRANSFORM>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.C_PLAYER_TRANSFORM)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.C_PLAYER_TRANSFORM)
    MergeFrom(*source);
  }
}

void C_PLAYER_TRANSFORM::MergeFrom(const C_PLAYER_TRANSFORM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_PLAYER_TRANSFORM)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_transform()) {
    _internal_mutable_transform()->::Protocol::Transform::MergeFrom(from._internal_transform());
  }
}

void C_PLAYER_TRANSFORM::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.C_PLAYER_TRANSFORM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_PLAYER_TRANSFORM::CopyFrom(const C_PLAYER_TRANSFORM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_PLAYER_TRANSFORM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_PLAYER_TRANSFORM::IsInitialized() const {
  return true;
}

void C_PLAYER_TRANSFORM::InternalSwap(C_PLAYER_TRANSFORM* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(transform_, other->transform_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_PLAYER_TRANSFORM::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[18]);
}

// ===================================================================

class S_PLAYERS_TRANSFORM::_Internal {
 public:
};

void S_PLAYERS_TRANSFORM::clear_playerstransform() {
  playerstransform_.Clear();
}
S_PLAYERS_TRANSFORM::S_PLAYERS_TRANSFORM(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  playerstransform_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_PLAYERS_TRANSFORM)
}
S_PLAYERS_TRANSFORM::S_PLAYERS_TRANSFORM(const S_PLAYERS_TRANSFORM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      playerstransform_(from.playerstransform_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.S_PLAYERS_TRANSFORM)
}

void S_PLAYERS_TRANSFORM::SharedCtor() {
}

S_PLAYERS_TRANSFORM::~S_PLAYERS_TRANSFORM() {
  // @@protoc_insertion_point(destructor:Protocol.S_PLAYERS_TRANSFORM)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_PLAYERS_TRANSFORM::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_PLAYERS_TRANSFORM::ArenaDtor(void* object) {
  S_PLAYERS_TRANSFORM* _this = reinterpret_cast< S_PLAYERS_TRANSFORM* >(object);
  (void)_this;
}
void S_PLAYERS_TRANSFORM::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_PLAYERS_TRANSFORM::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_PLAYERS_TRANSFORM::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_PLAYERS_TRANSFORM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playerstransform_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_PLAYERS_TRANSFORM::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Protocol.PlayersTransform playersTransform = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_playerstransform(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_PLAYERS_TRANSFORM::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_PLAYERS_TRANSFORM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Protocol.PlayersTransform playersTransform = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_playerstransform_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_playerstransform(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_PLAYERS_TRANSFORM)
  return target;
}

size_t S_PLAYERS_TRANSFORM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_PLAYERS_TRANSFORM)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.PlayersTransform playersTransform = 1;
  total_size += 1UL * this->_internal_playerstransform_size();
  for (const auto& msg : this->playerstransform_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_PLAYERS_TRANSFORM::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_PLAYERS_TRANSFORM)
  GOOGLE_DCHECK_NE(&from, this);
  const S_PLAYERS_TRANSFORM* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_PLAYERS_TRANSFORM>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_PLAYERS_TRANSFORM)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_PLAYERS_TRANSFORM)
    MergeFrom(*source);
  }
}

void S_PLAYERS_TRANSFORM::MergeFrom(const S_PLAYERS_TRANSFORM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_PLAYERS_TRANSFORM)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  playerstransform_.MergeFrom(from.playerstransform_);
}

void S_PLAYERS_TRANSFORM::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_PLAYERS_TRANSFORM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_PLAYERS_TRANSFORM::CopyFrom(const S_PLAYERS_TRANSFORM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_PLAYERS_TRANSFORM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_PLAYERS_TRANSFORM::IsInitialized() const {
  return true;
}

void S_PLAYERS_TRANSFORM::InternalSwap(S_PLAYERS_TRANSFORM* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  playerstransform_.InternalSwap(&other->playerstransform_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_PLAYERS_TRANSFORM::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[19]);
}

// ===================================================================

class C_PLAYER_ANIM_STATE::_Internal {
 public:
};

C_PLAYER_ANIM_STATE::C_PLAYER_ANIM_STATE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_PLAYER_ANIM_STATE)
}
C_PLAYER_ANIM_STATE::C_PLAYER_ANIM_STATE(const C_PLAYER_ANIM_STATE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_PLAYER_ANIM_STATE)
}

void C_PLAYER_ANIM_STATE::SharedCtor() {
state_ = 0;
}

C_PLAYER_ANIM_STATE::~C_PLAYER_ANIM_STATE() {
  // @@protoc_insertion_point(destructor:Protocol.C_PLAYER_ANIM_STATE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C_PLAYER_ANIM_STATE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_PLAYER_ANIM_STATE::ArenaDtor(void* object) {
  C_PLAYER_ANIM_STATE* _this = reinterpret_cast< C_PLAYER_ANIM_STATE* >(object);
  (void)_this;
}
void C_PLAYER_ANIM_STATE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_PLAYER_ANIM_STATE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_PLAYER_ANIM_STATE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_PLAYER_ANIM_STATE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_PLAYER_ANIM_STATE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.AnimState state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::Protocol::AnimState>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C_PLAYER_ANIM_STATE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_PLAYER_ANIM_STATE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.AnimState state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_PLAYER_ANIM_STATE)
  return target;
}

size_t C_PLAYER_ANIM_STATE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_PLAYER_ANIM_STATE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.AnimState state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C_PLAYER_ANIM_STATE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.C_PLAYER_ANIM_STATE)
  GOOGLE_DCHECK_NE(&from, this);
  const C_PLAYER_ANIM_STATE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C_PLAYER_ANIM_STATE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.C_PLAYER_ANIM_STATE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.C_PLAYER_ANIM_STATE)
    MergeFrom(*source);
  }
}

void C_PLAYER_ANIM_STATE::MergeFrom(const C_PLAYER_ANIM_STATE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_PLAYER_ANIM_STATE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void C_PLAYER_ANIM_STATE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.C_PLAYER_ANIM_STATE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_PLAYER_ANIM_STATE::CopyFrom(const C_PLAYER_ANIM_STATE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_PLAYER_ANIM_STATE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_PLAYER_ANIM_STATE::IsInitialized() const {
  return true;
}

void C_PLAYER_ANIM_STATE::InternalSwap(C_PLAYER_ANIM_STATE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_PLAYER_ANIM_STATE::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[20]);
}

// ===================================================================

class S_PLAYER_ANIM_STATE::_Internal {
 public:
  static const ::Protocol::Player& player(const S_PLAYER_ANIM_STATE* msg);
};

const ::Protocol::Player&
S_PLAYER_ANIM_STATE::_Internal::player(const S_PLAYER_ANIM_STATE* msg) {
  return *msg->player_;
}
void S_PLAYER_ANIM_STATE::clear_player() {
  if (GetArenaForAllocation() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
}
S_PLAYER_ANIM_STATE::S_PLAYER_ANIM_STATE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_PLAYER_ANIM_STATE)
}
S_PLAYER_ANIM_STATE::S_PLAYER_ANIM_STATE(const S_PLAYER_ANIM_STATE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player()) {
    player_ = new ::Protocol::Player(*from.player_);
  } else {
    player_ = nullptr;
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_PLAYER_ANIM_STATE)
}

void S_PLAYER_ANIM_STATE::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&player_)) + sizeof(state_));
}

S_PLAYER_ANIM_STATE::~S_PLAYER_ANIM_STATE() {
  // @@protoc_insertion_point(destructor:Protocol.S_PLAYER_ANIM_STATE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_PLAYER_ANIM_STATE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_;
}

void S_PLAYER_ANIM_STATE::ArenaDtor(void* object) {
  S_PLAYER_ANIM_STATE* _this = reinterpret_cast< S_PLAYER_ANIM_STATE* >(object);
  (void)_this;
}
void S_PLAYER_ANIM_STATE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_PLAYER_ANIM_STATE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_PLAYER_ANIM_STATE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_PLAYER_ANIM_STATE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_PLAYER_ANIM_STATE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.Player player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Protocol.AnimState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::Protocol::AnimState>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_PLAYER_ANIM_STATE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_PLAYER_ANIM_STATE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.Player player = 1;
  if (this->has_player()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player(this), target, stream);
  }

  // .Protocol.AnimState state = 2;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_PLAYER_ANIM_STATE)
  return target;
}

size_t S_PLAYER_ANIM_STATE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_PLAYER_ANIM_STATE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.Player player = 1;
  if (this->has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_);
  }

  // .Protocol.AnimState state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_PLAYER_ANIM_STATE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_PLAYER_ANIM_STATE)
  GOOGLE_DCHECK_NE(&from, this);
  const S_PLAYER_ANIM_STATE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_PLAYER_ANIM_STATE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_PLAYER_ANIM_STATE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_PLAYER_ANIM_STATE)
    MergeFrom(*source);
  }
}

void S_PLAYER_ANIM_STATE::MergeFrom(const S_PLAYER_ANIM_STATE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_PLAYER_ANIM_STATE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player()) {
    _internal_mutable_player()->::Protocol::Player::MergeFrom(from._internal_player());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void S_PLAYER_ANIM_STATE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_PLAYER_ANIM_STATE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_PLAYER_ANIM_STATE::CopyFrom(const S_PLAYER_ANIM_STATE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_PLAYER_ANIM_STATE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_PLAYER_ANIM_STATE::IsInitialized() const {
  return true;
}

void S_PLAYER_ANIM_STATE::InternalSwap(S_PLAYER_ANIM_STATE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_PLAYER_ANIM_STATE, state_)
      + sizeof(S_PLAYER_ANIM_STATE::state_)
      - PROTOBUF_FIELD_OFFSET(S_PLAYER_ANIM_STATE, player_)>(
          reinterpret_cast<char*>(&player_),
          reinterpret_cast<char*>(&other->player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_PLAYER_ANIM_STATE::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[21]);
}

// ===================================================================

class C_SELECT_PARTS::_Internal {
 public:
};

C_SELECT_PARTS::C_SELECT_PARTS(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_SELECT_PARTS)
}
C_SELECT_PARTS::C_SELECT_PARTS(const C_SELECT_PARTS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_SELECT_PARTS)
}

void C_SELECT_PARTS::SharedCtor() {
index_ = 0u;
}

C_SELECT_PARTS::~C_SELECT_PARTS() {
  // @@protoc_insertion_point(destructor:Protocol.C_SELECT_PARTS)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C_SELECT_PARTS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_SELECT_PARTS::ArenaDtor(void* object) {
  C_SELECT_PARTS* _this = reinterpret_cast< C_SELECT_PARTS* >(object);
  (void)_this;
}
void C_SELECT_PARTS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_SELECT_PARTS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_SELECT_PARTS::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_SELECT_PARTS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  index_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_SELECT_PARTS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C_SELECT_PARTS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_SELECT_PARTS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_SELECT_PARTS)
  return target;
}

size_t C_SELECT_PARTS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_SELECT_PARTS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C_SELECT_PARTS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.C_SELECT_PARTS)
  GOOGLE_DCHECK_NE(&from, this);
  const C_SELECT_PARTS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C_SELECT_PARTS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.C_SELECT_PARTS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.C_SELECT_PARTS)
    MergeFrom(*source);
  }
}

void C_SELECT_PARTS::MergeFrom(const C_SELECT_PARTS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_SELECT_PARTS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
}

void C_SELECT_PARTS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.C_SELECT_PARTS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_SELECT_PARTS::CopyFrom(const C_SELECT_PARTS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_SELECT_PARTS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_SELECT_PARTS::IsInitialized() const {
  return true;
}

void C_SELECT_PARTS::InternalSwap(C_SELECT_PARTS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(index_, other->index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_SELECT_PARTS::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[22]);
}

// ===================================================================

class S_SELECT_PARTS::_Internal {
 public:
};

S_SELECT_PARTS::S_SELECT_PARTS(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_SELECT_PARTS)
}
S_SELECT_PARTS::S_SELECT_PARTS(const S_SELECT_PARTS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&success_, &from.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&success_)) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_SELECT_PARTS)
}

void S_SELECT_PARTS::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&success_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&success_)) + sizeof(index_));
}

S_SELECT_PARTS::~S_SELECT_PARTS() {
  // @@protoc_insertion_point(destructor:Protocol.S_SELECT_PARTS)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_SELECT_PARTS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_SELECT_PARTS::ArenaDtor(void* object) {
  S_SELECT_PARTS* _this = reinterpret_cast< S_SELECT_PARTS* >(object);
  (void)_this;
}
void S_SELECT_PARTS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_SELECT_PARTS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_SELECT_PARTS::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_SELECT_PARTS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&success_)) + sizeof(index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_SELECT_PARTS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_SELECT_PARTS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_SELECT_PARTS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // int32 gold = 2;
  if (this->gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_gold(), target);
  }

  // uint32 index = 3;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_SELECT_PARTS)
  return target;
}

size_t S_SELECT_PARTS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_SELECT_PARTS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  // int32 gold = 2;
  if (this->gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gold());
  }

  // uint32 index = 3;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_SELECT_PARTS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_SELECT_PARTS)
  GOOGLE_DCHECK_NE(&from, this);
  const S_SELECT_PARTS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_SELECT_PARTS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_SELECT_PARTS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_SELECT_PARTS)
    MergeFrom(*source);
  }
}

void S_SELECT_PARTS::MergeFrom(const S_SELECT_PARTS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_SELECT_PARTS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
  if (from.gold() != 0) {
    _internal_set_gold(from._internal_gold());
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
}

void S_SELECT_PARTS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_SELECT_PARTS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_SELECT_PARTS::CopyFrom(const S_SELECT_PARTS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_SELECT_PARTS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_SELECT_PARTS::IsInitialized() const {
  return true;
}

void S_SELECT_PARTS::InternalSwap(S_SELECT_PARTS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_SELECT_PARTS, index_)
      + sizeof(S_SELECT_PARTS::index_)
      - PROTOBUF_FIELD_OFFSET(S_SELECT_PARTS, success_)>(
          reinterpret_cast<char*>(&success_),
          reinterpret_cast<char*>(&other->success_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_SELECT_PARTS::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[23]);
}

// ===================================================================

class S_SELECT_PARTS_LIST::_Internal {
 public:
  static const ::Protocol::PartsList& partslist(const S_SELECT_PARTS_LIST* msg);
};

const ::Protocol::PartsList&
S_SELECT_PARTS_LIST::_Internal::partslist(const S_SELECT_PARTS_LIST* msg) {
  return *msg->partslist_;
}
void S_SELECT_PARTS_LIST::clear_partslist() {
  if (GetArenaForAllocation() == nullptr && partslist_ != nullptr) {
    delete partslist_;
  }
  partslist_ = nullptr;
}
S_SELECT_PARTS_LIST::S_SELECT_PARTS_LIST(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_SELECT_PARTS_LIST)
}
S_SELECT_PARTS_LIST::S_SELECT_PARTS_LIST(const S_SELECT_PARTS_LIST& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_partslist()) {
    partslist_ = new ::Protocol::PartsList(*from.partslist_);
  } else {
    partslist_ = nullptr;
  }
  gold_ = from.gold_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_SELECT_PARTS_LIST)
}

void S_SELECT_PARTS_LIST::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&partslist_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&gold_) -
    reinterpret_cast<char*>(&partslist_)) + sizeof(gold_));
}

S_SELECT_PARTS_LIST::~S_SELECT_PARTS_LIST() {
  // @@protoc_insertion_point(destructor:Protocol.S_SELECT_PARTS_LIST)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_SELECT_PARTS_LIST::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete partslist_;
}

void S_SELECT_PARTS_LIST::ArenaDtor(void* object) {
  S_SELECT_PARTS_LIST* _this = reinterpret_cast< S_SELECT_PARTS_LIST* >(object);
  (void)_this;
}
void S_SELECT_PARTS_LIST::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_SELECT_PARTS_LIST::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_SELECT_PARTS_LIST::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_SELECT_PARTS_LIST)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && partslist_ != nullptr) {
    delete partslist_;
  }
  partslist_ = nullptr;
  gold_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_SELECT_PARTS_LIST::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.PartsList partsList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_partslist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_SELECT_PARTS_LIST::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_SELECT_PARTS_LIST)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.PartsList partsList = 1;
  if (this->has_partslist()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::partslist(this), target, stream);
  }

  // int32 gold = 2;
  if (this->gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_gold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_SELECT_PARTS_LIST)
  return target;
}

size_t S_SELECT_PARTS_LIST::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_SELECT_PARTS_LIST)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.PartsList partsList = 1;
  if (this->has_partslist()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *partslist_);
  }

  // int32 gold = 2;
  if (this->gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gold());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_SELECT_PARTS_LIST::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_SELECT_PARTS_LIST)
  GOOGLE_DCHECK_NE(&from, this);
  const S_SELECT_PARTS_LIST* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_SELECT_PARTS_LIST>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_SELECT_PARTS_LIST)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_SELECT_PARTS_LIST)
    MergeFrom(*source);
  }
}

void S_SELECT_PARTS_LIST::MergeFrom(const S_SELECT_PARTS_LIST& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_SELECT_PARTS_LIST)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_partslist()) {
    _internal_mutable_partslist()->::Protocol::PartsList::MergeFrom(from._internal_partslist());
  }
  if (from.gold() != 0) {
    _internal_set_gold(from._internal_gold());
  }
}

void S_SELECT_PARTS_LIST::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_SELECT_PARTS_LIST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_SELECT_PARTS_LIST::CopyFrom(const S_SELECT_PARTS_LIST& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_SELECT_PARTS_LIST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_SELECT_PARTS_LIST::IsInitialized() const {
  return true;
}

void S_SELECT_PARTS_LIST::InternalSwap(S_SELECT_PARTS_LIST* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_SELECT_PARTS_LIST, gold_)
      + sizeof(S_SELECT_PARTS_LIST::gold_)
      - PROTOBUF_FIELD_OFFSET(S_SELECT_PARTS_LIST, partslist_)>(
          reinterpret_cast<char*>(&partslist_),
          reinterpret_cast<char*>(&other->partslist_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_SELECT_PARTS_LIST::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[24]);
}

// ===================================================================

class C_REROLL_PARTS::_Internal {
 public:
};

C_REROLL_PARTS::C_REROLL_PARTS(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_REROLL_PARTS)
}
C_REROLL_PARTS::C_REROLL_PARTS(const C_REROLL_PARTS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.C_REROLL_PARTS)
}

void C_REROLL_PARTS::SharedCtor() {
}

C_REROLL_PARTS::~C_REROLL_PARTS() {
  // @@protoc_insertion_point(destructor:Protocol.C_REROLL_PARTS)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C_REROLL_PARTS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_REROLL_PARTS::ArenaDtor(void* object) {
  C_REROLL_PARTS* _this = reinterpret_cast< C_REROLL_PARTS* >(object);
  (void)_this;
}
void C_REROLL_PARTS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_REROLL_PARTS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_REROLL_PARTS::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_REROLL_PARTS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_REROLL_PARTS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C_REROLL_PARTS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_REROLL_PARTS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_REROLL_PARTS)
  return target;
}

size_t C_REROLL_PARTS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_REROLL_PARTS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C_REROLL_PARTS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.C_REROLL_PARTS)
  GOOGLE_DCHECK_NE(&from, this);
  const C_REROLL_PARTS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C_REROLL_PARTS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.C_REROLL_PARTS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.C_REROLL_PARTS)
    MergeFrom(*source);
  }
}

void C_REROLL_PARTS::MergeFrom(const C_REROLL_PARTS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_REROLL_PARTS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void C_REROLL_PARTS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.C_REROLL_PARTS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_REROLL_PARTS::CopyFrom(const C_REROLL_PARTS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_REROLL_PARTS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_REROLL_PARTS::IsInitialized() const {
  return true;
}

void C_REROLL_PARTS::InternalSwap(C_REROLL_PARTS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_REROLL_PARTS::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[25]);
}

// ===================================================================

class C_RESPAWN_CLICK::_Internal {
 public:
};

C_RESPAWN_CLICK::C_RESPAWN_CLICK(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_RESPAWN_CLICK)
}
C_RESPAWN_CLICK::C_RESPAWN_CLICK(const C_RESPAWN_CLICK& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.C_RESPAWN_CLICK)
}

void C_RESPAWN_CLICK::SharedCtor() {
}

C_RESPAWN_CLICK::~C_RESPAWN_CLICK() {
  // @@protoc_insertion_point(destructor:Protocol.C_RESPAWN_CLICK)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C_RESPAWN_CLICK::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_RESPAWN_CLICK::ArenaDtor(void* object) {
  C_RESPAWN_CLICK* _this = reinterpret_cast< C_RESPAWN_CLICK* >(object);
  (void)_this;
}
void C_RESPAWN_CLICK::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_RESPAWN_CLICK::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_RESPAWN_CLICK::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_RESPAWN_CLICK)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_RESPAWN_CLICK::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C_RESPAWN_CLICK::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_RESPAWN_CLICK)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_RESPAWN_CLICK)
  return target;
}

size_t C_RESPAWN_CLICK::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_RESPAWN_CLICK)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C_RESPAWN_CLICK::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.C_RESPAWN_CLICK)
  GOOGLE_DCHECK_NE(&from, this);
  const C_RESPAWN_CLICK* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C_RESPAWN_CLICK>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.C_RESPAWN_CLICK)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.C_RESPAWN_CLICK)
    MergeFrom(*source);
  }
}

void C_RESPAWN_CLICK::MergeFrom(const C_RESPAWN_CLICK& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_RESPAWN_CLICK)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void C_RESPAWN_CLICK::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.C_RESPAWN_CLICK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_RESPAWN_CLICK::CopyFrom(const C_RESPAWN_CLICK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_RESPAWN_CLICK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_RESPAWN_CLICK::IsInitialized() const {
  return true;
}

void C_RESPAWN_CLICK::InternalSwap(C_RESPAWN_CLICK* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_RESPAWN_CLICK::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[26]);
}

// ===================================================================

class S_SPAWN_POINT::_Internal {
 public:
  static const ::Protocol::Player& player(const S_SPAWN_POINT* msg);
  static const ::Protocol::PlayerInfo& playerinfo(const S_SPAWN_POINT* msg);
};

const ::Protocol::Player&
S_SPAWN_POINT::_Internal::player(const S_SPAWN_POINT* msg) {
  return *msg->player_;
}
const ::Protocol::PlayerInfo&
S_SPAWN_POINT::_Internal::playerinfo(const S_SPAWN_POINT* msg) {
  return *msg->playerinfo_;
}
void S_SPAWN_POINT::clear_player() {
  if (GetArenaForAllocation() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
}
void S_SPAWN_POINT::clear_playerinfo() {
  if (GetArenaForAllocation() == nullptr && playerinfo_ != nullptr) {
    delete playerinfo_;
  }
  playerinfo_ = nullptr;
}
S_SPAWN_POINT::S_SPAWN_POINT(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_SPAWN_POINT)
}
S_SPAWN_POINT::S_SPAWN_POINT(const S_SPAWN_POINT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player()) {
    player_ = new ::Protocol::Player(*from.player_);
  } else {
    player_ = nullptr;
  }
  if (from._internal_has_playerinfo()) {
    playerinfo_ = new ::Protocol::PlayerInfo(*from.playerinfo_);
  } else {
    playerinfo_ = nullptr;
  }
  ::memcpy(&healthpoint_, &from.healthpoint_,
    static_cast<size_t>(reinterpret_cast<char*>(&spawnpointindex_) -
    reinterpret_cast<char*>(&healthpoint_)) + sizeof(spawnpointindex_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_SPAWN_POINT)
}

void S_SPAWN_POINT::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&spawnpointindex_) -
    reinterpret_cast<char*>(&player_)) + sizeof(spawnpointindex_));
}

S_SPAWN_POINT::~S_SPAWN_POINT() {
  // @@protoc_insertion_point(destructor:Protocol.S_SPAWN_POINT)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_SPAWN_POINT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_;
  if (this != internal_default_instance()) delete playerinfo_;
}

void S_SPAWN_POINT::ArenaDtor(void* object) {
  S_SPAWN_POINT* _this = reinterpret_cast< S_SPAWN_POINT* >(object);
  (void)_this;
}
void S_SPAWN_POINT::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_SPAWN_POINT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_SPAWN_POINT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_SPAWN_POINT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
  if (GetArenaForAllocation() == nullptr && playerinfo_ != nullptr) {
    delete playerinfo_;
  }
  playerinfo_ = nullptr;
  ::memset(&healthpoint_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&spawnpointindex_) -
      reinterpret_cast<char*>(&healthpoint_)) + sizeof(spawnpointindex_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_SPAWN_POINT::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.Player player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 healthPoint = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          healthpoint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 spawnPointIndex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          spawnpointindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Protocol.PlayerInfo playerInfo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_playerinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_SPAWN_POINT::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_SPAWN_POINT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.Player player = 1;
  if (this->has_player()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player(this), target, stream);
  }

  // int32 healthPoint = 2;
  if (this->healthpoint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_healthpoint(), target);
  }

  // uint32 spawnPointIndex = 3;
  if (this->spawnpointindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_spawnpointindex(), target);
  }

  // .Protocol.PlayerInfo playerInfo = 4;
  if (this->has_playerinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::playerinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_SPAWN_POINT)
  return target;
}

size_t S_SPAWN_POINT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_SPAWN_POINT)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.Player player = 1;
  if (this->has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_);
  }

  // .Protocol.PlayerInfo playerInfo = 4;
  if (this->has_playerinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *playerinfo_);
  }

  // int32 healthPoint = 2;
  if (this->healthpoint() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_healthpoint());
  }

  // uint32 spawnPointIndex = 3;
  if (this->spawnpointindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_spawnpointindex());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_SPAWN_POINT::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_SPAWN_POINT)
  GOOGLE_DCHECK_NE(&from, this);
  const S_SPAWN_POINT* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_SPAWN_POINT>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_SPAWN_POINT)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_SPAWN_POINT)
    MergeFrom(*source);
  }
}

void S_SPAWN_POINT::MergeFrom(const S_SPAWN_POINT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_SPAWN_POINT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player()) {
    _internal_mutable_player()->::Protocol::Player::MergeFrom(from._internal_player());
  }
  if (from.has_playerinfo()) {
    _internal_mutable_playerinfo()->::Protocol::PlayerInfo::MergeFrom(from._internal_playerinfo());
  }
  if (from.healthpoint() != 0) {
    _internal_set_healthpoint(from._internal_healthpoint());
  }
  if (from.spawnpointindex() != 0) {
    _internal_set_spawnpointindex(from._internal_spawnpointindex());
  }
}

void S_SPAWN_POINT::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_SPAWN_POINT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_SPAWN_POINT::CopyFrom(const S_SPAWN_POINT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_SPAWN_POINT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_SPAWN_POINT::IsInitialized() const {
  return true;
}

void S_SPAWN_POINT::InternalSwap(S_SPAWN_POINT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_SPAWN_POINT, spawnpointindex_)
      + sizeof(S_SPAWN_POINT::spawnpointindex_)
      - PROTOBUF_FIELD_OFFSET(S_SPAWN_POINT, player_)>(
          reinterpret_cast<char*>(&player_),
          reinterpret_cast<char*>(&other->player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_SPAWN_POINT::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[27]);
}

// ===================================================================

class C_ATTACK_PLAYER::_Internal {
 public:
  static const ::Protocol::Player& attackedplayer(const C_ATTACK_PLAYER* msg);
  static const ::Protocol::Transform& transform(const C_ATTACK_PLAYER* msg);
};

const ::Protocol::Player&
C_ATTACK_PLAYER::_Internal::attackedplayer(const C_ATTACK_PLAYER* msg) {
  return *msg->attackedplayer_;
}
const ::Protocol::Transform&
C_ATTACK_PLAYER::_Internal::transform(const C_ATTACK_PLAYER* msg) {
  return *msg->transform_;
}
void C_ATTACK_PLAYER::clear_attackedplayer() {
  if (GetArenaForAllocation() == nullptr && attackedplayer_ != nullptr) {
    delete attackedplayer_;
  }
  attackedplayer_ = nullptr;
}
void C_ATTACK_PLAYER::clear_transform() {
  if (GetArenaForAllocation() == nullptr && transform_ != nullptr) {
    delete transform_;
  }
  transform_ = nullptr;
}
C_ATTACK_PLAYER::C_ATTACK_PLAYER(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_ATTACK_PLAYER)
}
C_ATTACK_PLAYER::C_ATTACK_PLAYER(const C_ATTACK_PLAYER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_attackedplayer()) {
    attackedplayer_ = new ::Protocol::Player(*from.attackedplayer_);
  } else {
    attackedplayer_ = nullptr;
  }
  if (from._internal_has_transform()) {
    transform_ = new ::Protocol::Transform(*from.transform_);
  } else {
    transform_ = nullptr;
  }
  attackpoint_ = from.attackpoint_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_ATTACK_PLAYER)
}

void C_ATTACK_PLAYER::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&attackedplayer_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&attackpoint_) -
    reinterpret_cast<char*>(&attackedplayer_)) + sizeof(attackpoint_));
}

C_ATTACK_PLAYER::~C_ATTACK_PLAYER() {
  // @@protoc_insertion_point(destructor:Protocol.C_ATTACK_PLAYER)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C_ATTACK_PLAYER::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete attackedplayer_;
  if (this != internal_default_instance()) delete transform_;
}

void C_ATTACK_PLAYER::ArenaDtor(void* object) {
  C_ATTACK_PLAYER* _this = reinterpret_cast< C_ATTACK_PLAYER* >(object);
  (void)_this;
}
void C_ATTACK_PLAYER::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_ATTACK_PLAYER::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_ATTACK_PLAYER::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_ATTACK_PLAYER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && attackedplayer_ != nullptr) {
    delete attackedplayer_;
  }
  attackedplayer_ = nullptr;
  if (GetArenaForAllocation() == nullptr && transform_ != nullptr) {
    delete transform_;
  }
  transform_ = nullptr;
  attackpoint_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_ATTACK_PLAYER::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.Player attackedPlayer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_attackedplayer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Protocol.AttackPoint attackPoint = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_attackpoint(static_cast<::Protocol::AttackPoint>(val));
        } else goto handle_unusual;
        continue;
      // .Protocol.Transform transform = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_transform(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C_ATTACK_PLAYER::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_ATTACK_PLAYER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.Player attackedPlayer = 1;
  if (this->has_attackedplayer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::attackedplayer(this), target, stream);
  }

  // .Protocol.AttackPoint attackPoint = 2;
  if (this->attackpoint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_attackpoint(), target);
  }

  // .Protocol.Transform transform = 3;
  if (this->has_transform()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::transform(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_ATTACK_PLAYER)
  return target;
}

size_t C_ATTACK_PLAYER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_ATTACK_PLAYER)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.Player attackedPlayer = 1;
  if (this->has_attackedplayer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attackedplayer_);
  }

  // .Protocol.Transform transform = 3;
  if (this->has_transform()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transform_);
  }

  // .Protocol.AttackPoint attackPoint = 2;
  if (this->attackpoint() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_attackpoint());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C_ATTACK_PLAYER::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.C_ATTACK_PLAYER)
  GOOGLE_DCHECK_NE(&from, this);
  const C_ATTACK_PLAYER* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C_ATTACK_PLAYER>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.C_ATTACK_PLAYER)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.C_ATTACK_PLAYER)
    MergeFrom(*source);
  }
}

void C_ATTACK_PLAYER::MergeFrom(const C_ATTACK_PLAYER& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_ATTACK_PLAYER)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_attackedplayer()) {
    _internal_mutable_attackedplayer()->::Protocol::Player::MergeFrom(from._internal_attackedplayer());
  }
  if (from.has_transform()) {
    _internal_mutable_transform()->::Protocol::Transform::MergeFrom(from._internal_transform());
  }
  if (from.attackpoint() != 0) {
    _internal_set_attackpoint(from._internal_attackpoint());
  }
}

void C_ATTACK_PLAYER::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.C_ATTACK_PLAYER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_ATTACK_PLAYER::CopyFrom(const C_ATTACK_PLAYER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_ATTACK_PLAYER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_ATTACK_PLAYER::IsInitialized() const {
  return true;
}

void C_ATTACK_PLAYER::InternalSwap(C_ATTACK_PLAYER* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_ATTACK_PLAYER, attackpoint_)
      + sizeof(C_ATTACK_PLAYER::attackpoint_)
      - PROTOBUF_FIELD_OFFSET(C_ATTACK_PLAYER, attackedplayer_)>(
          reinterpret_cast<char*>(&attackedplayer_),
          reinterpret_cast<char*>(&other->attackedplayer_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_ATTACK_PLAYER::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[28]);
}

// ===================================================================

class S_ATTACKED_PLAYER::_Internal {
 public:
  static const ::Protocol::Player& attackplayer(const S_ATTACKED_PLAYER* msg);
  static const ::Protocol::Player& attackedplayer(const S_ATTACKED_PLAYER* msg);
  static const ::Protocol::Transform& transform(const S_ATTACKED_PLAYER* msg);
};

const ::Protocol::Player&
S_ATTACKED_PLAYER::_Internal::attackplayer(const S_ATTACKED_PLAYER* msg) {
  return *msg->attackplayer_;
}
const ::Protocol::Player&
S_ATTACKED_PLAYER::_Internal::attackedplayer(const S_ATTACKED_PLAYER* msg) {
  return *msg->attackedplayer_;
}
const ::Protocol::Transform&
S_ATTACKED_PLAYER::_Internal::transform(const S_ATTACKED_PLAYER* msg) {
  return *msg->transform_;
}
void S_ATTACKED_PLAYER::clear_attackplayer() {
  if (GetArenaForAllocation() == nullptr && attackplayer_ != nullptr) {
    delete attackplayer_;
  }
  attackplayer_ = nullptr;
}
void S_ATTACKED_PLAYER::clear_attackedplayer() {
  if (GetArenaForAllocation() == nullptr && attackedplayer_ != nullptr) {
    delete attackedplayer_;
  }
  attackedplayer_ = nullptr;
}
void S_ATTACKED_PLAYER::clear_transform() {
  if (GetArenaForAllocation() == nullptr && transform_ != nullptr) {
    delete transform_;
  }
  transform_ = nullptr;
}
S_ATTACKED_PLAYER::S_ATTACKED_PLAYER(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_ATTACKED_PLAYER)
}
S_ATTACKED_PLAYER::S_ATTACKED_PLAYER(const S_ATTACKED_PLAYER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_attackplayer()) {
    attackplayer_ = new ::Protocol::Player(*from.attackplayer_);
  } else {
    attackplayer_ = nullptr;
  }
  if (from._internal_has_attackedplayer()) {
    attackedplayer_ = new ::Protocol::Player(*from.attackedplayer_);
  } else {
    attackedplayer_ = nullptr;
  }
  if (from._internal_has_transform()) {
    transform_ = new ::Protocol::Transform(*from.transform_);
  } else {
    transform_ = nullptr;
  }
  ::memcpy(&attackpoint_, &from.attackpoint_,
    static_cast<size_t>(reinterpret_cast<char*>(&attackedplayerhealthpoint_) -
    reinterpret_cast<char*>(&attackpoint_)) + sizeof(attackedplayerhealthpoint_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_ATTACKED_PLAYER)
}

void S_ATTACKED_PLAYER::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&attackplayer_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&attackedplayerhealthpoint_) -
    reinterpret_cast<char*>(&attackplayer_)) + sizeof(attackedplayerhealthpoint_));
}

S_ATTACKED_PLAYER::~S_ATTACKED_PLAYER() {
  // @@protoc_insertion_point(destructor:Protocol.S_ATTACKED_PLAYER)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_ATTACKED_PLAYER::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete attackplayer_;
  if (this != internal_default_instance()) delete attackedplayer_;
  if (this != internal_default_instance()) delete transform_;
}

void S_ATTACKED_PLAYER::ArenaDtor(void* object) {
  S_ATTACKED_PLAYER* _this = reinterpret_cast< S_ATTACKED_PLAYER* >(object);
  (void)_this;
}
void S_ATTACKED_PLAYER::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_ATTACKED_PLAYER::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_ATTACKED_PLAYER::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_ATTACKED_PLAYER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && attackplayer_ != nullptr) {
    delete attackplayer_;
  }
  attackplayer_ = nullptr;
  if (GetArenaForAllocation() == nullptr && attackedplayer_ != nullptr) {
    delete attackedplayer_;
  }
  attackedplayer_ = nullptr;
  if (GetArenaForAllocation() == nullptr && transform_ != nullptr) {
    delete transform_;
  }
  transform_ = nullptr;
  ::memset(&attackpoint_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&attackedplayerhealthpoint_) -
      reinterpret_cast<char*>(&attackpoint_)) + sizeof(attackedplayerhealthpoint_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ATTACKED_PLAYER::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.Player attackPlayer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_attackplayer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Protocol.Player attackedPlayer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_attackedplayer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Protocol.AttackPoint attackPoint = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_attackpoint(static_cast<::Protocol::AttackPoint>(val));
        } else goto handle_unusual;
        continue;
      // .Protocol.Transform transform = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_transform(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 attackedPlayerHealthPoint = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          attackedplayerhealthpoint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_ATTACKED_PLAYER::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_ATTACKED_PLAYER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.Player attackPlayer = 1;
  if (this->has_attackplayer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::attackplayer(this), target, stream);
  }

  // .Protocol.Player attackedPlayer = 2;
  if (this->has_attackedplayer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::attackedplayer(this), target, stream);
  }

  // .Protocol.AttackPoint attackPoint = 3;
  if (this->attackpoint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_attackpoint(), target);
  }

  // .Protocol.Transform transform = 4;
  if (this->has_transform()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::transform(this), target, stream);
  }

  // int32 attackedPlayerHealthPoint = 5;
  if (this->attackedplayerhealthpoint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_attackedplayerhealthpoint(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_ATTACKED_PLAYER)
  return target;
}

size_t S_ATTACKED_PLAYER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_ATTACKED_PLAYER)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.Player attackPlayer = 1;
  if (this->has_attackplayer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attackplayer_);
  }

  // .Protocol.Player attackedPlayer = 2;
  if (this->has_attackedplayer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attackedplayer_);
  }

  // .Protocol.Transform transform = 4;
  if (this->has_transform()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transform_);
  }

  // .Protocol.AttackPoint attackPoint = 3;
  if (this->attackpoint() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_attackpoint());
  }

  // int32 attackedPlayerHealthPoint = 5;
  if (this->attackedplayerhealthpoint() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_attackedplayerhealthpoint());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_ATTACKED_PLAYER::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_ATTACKED_PLAYER)
  GOOGLE_DCHECK_NE(&from, this);
  const S_ATTACKED_PLAYER* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_ATTACKED_PLAYER>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_ATTACKED_PLAYER)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_ATTACKED_PLAYER)
    MergeFrom(*source);
  }
}

void S_ATTACKED_PLAYER::MergeFrom(const S_ATTACKED_PLAYER& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_ATTACKED_PLAYER)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_attackplayer()) {
    _internal_mutable_attackplayer()->::Protocol::Player::MergeFrom(from._internal_attackplayer());
  }
  if (from.has_attackedplayer()) {
    _internal_mutable_attackedplayer()->::Protocol::Player::MergeFrom(from._internal_attackedplayer());
  }
  if (from.has_transform()) {
    _internal_mutable_transform()->::Protocol::Transform::MergeFrom(from._internal_transform());
  }
  if (from.attackpoint() != 0) {
    _internal_set_attackpoint(from._internal_attackpoint());
  }
  if (from.attackedplayerhealthpoint() != 0) {
    _internal_set_attackedplayerhealthpoint(from._internal_attackedplayerhealthpoint());
  }
}

void S_ATTACKED_PLAYER::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_ATTACKED_PLAYER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_ATTACKED_PLAYER::CopyFrom(const S_ATTACKED_PLAYER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_ATTACKED_PLAYER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ATTACKED_PLAYER::IsInitialized() const {
  return true;
}

void S_ATTACKED_PLAYER::InternalSwap(S_ATTACKED_PLAYER* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_ATTACKED_PLAYER, attackedplayerhealthpoint_)
      + sizeof(S_ATTACKED_PLAYER::attackedplayerhealthpoint_)
      - PROTOBUF_FIELD_OFFSET(S_ATTACKED_PLAYER, attackplayer_)>(
          reinterpret_cast<char*>(&attackplayer_),
          reinterpret_cast<char*>(&other->attackplayer_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ATTACKED_PLAYER::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[29]);
}

// ===================================================================

class S_DEATH_PLAYER::_Internal {
 public:
  static const ::Protocol::Player& attackplayer(const S_DEATH_PLAYER* msg);
  static const ::Protocol::Player& attackedplayer(const S_DEATH_PLAYER* msg);
  static const ::Protocol::Transform& transform(const S_DEATH_PLAYER* msg);
};

const ::Protocol::Player&
S_DEATH_PLAYER::_Internal::attackplayer(const S_DEATH_PLAYER* msg) {
  return *msg->attackplayer_;
}
const ::Protocol::Player&
S_DEATH_PLAYER::_Internal::attackedplayer(const S_DEATH_PLAYER* msg) {
  return *msg->attackedplayer_;
}
const ::Protocol::Transform&
S_DEATH_PLAYER::_Internal::transform(const S_DEATH_PLAYER* msg) {
  return *msg->transform_;
}
void S_DEATH_PLAYER::clear_attackplayer() {
  if (GetArenaForAllocation() == nullptr && attackplayer_ != nullptr) {
    delete attackplayer_;
  }
  attackplayer_ = nullptr;
}
void S_DEATH_PLAYER::clear_attackedplayer() {
  if (GetArenaForAllocation() == nullptr && attackedplayer_ != nullptr) {
    delete attackedplayer_;
  }
  attackedplayer_ = nullptr;
}
void S_DEATH_PLAYER::clear_transform() {
  if (GetArenaForAllocation() == nullptr && transform_ != nullptr) {
    delete transform_;
  }
  transform_ = nullptr;
}
S_DEATH_PLAYER::S_DEATH_PLAYER(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_DEATH_PLAYER)
}
S_DEATH_PLAYER::S_DEATH_PLAYER(const S_DEATH_PLAYER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_attackplayer()) {
    attackplayer_ = new ::Protocol::Player(*from.attackplayer_);
  } else {
    attackplayer_ = nullptr;
  }
  if (from._internal_has_attackedplayer()) {
    attackedplayer_ = new ::Protocol::Player(*from.attackedplayer_);
  } else {
    attackedplayer_ = nullptr;
  }
  if (from._internal_has_transform()) {
    transform_ = new ::Protocol::Transform(*from.transform_);
  } else {
    transform_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.S_DEATH_PLAYER)
}

void S_DEATH_PLAYER::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&attackplayer_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&transform_) -
    reinterpret_cast<char*>(&attackplayer_)) + sizeof(transform_));
}

S_DEATH_PLAYER::~S_DEATH_PLAYER() {
  // @@protoc_insertion_point(destructor:Protocol.S_DEATH_PLAYER)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_DEATH_PLAYER::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete attackplayer_;
  if (this != internal_default_instance()) delete attackedplayer_;
  if (this != internal_default_instance()) delete transform_;
}

void S_DEATH_PLAYER::ArenaDtor(void* object) {
  S_DEATH_PLAYER* _this = reinterpret_cast< S_DEATH_PLAYER* >(object);
  (void)_this;
}
void S_DEATH_PLAYER::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_DEATH_PLAYER::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_DEATH_PLAYER::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_DEATH_PLAYER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && attackplayer_ != nullptr) {
    delete attackplayer_;
  }
  attackplayer_ = nullptr;
  if (GetArenaForAllocation() == nullptr && attackedplayer_ != nullptr) {
    delete attackedplayer_;
  }
  attackedplayer_ = nullptr;
  if (GetArenaForAllocation() == nullptr && transform_ != nullptr) {
    delete transform_;
  }
  transform_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_DEATH_PLAYER::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.Player attackPlayer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_attackplayer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Protocol.Player attackedPlayer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_attackedplayer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Protocol.Transform transform = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_transform(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_DEATH_PLAYER::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_DEATH_PLAYER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.Player attackPlayer = 1;
  if (this->has_attackplayer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::attackplayer(this), target, stream);
  }

  // .Protocol.Player attackedPlayer = 2;
  if (this->has_attackedplayer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::attackedplayer(this), target, stream);
  }

  // .Protocol.Transform transform = 3;
  if (this->has_transform()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::transform(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_DEATH_PLAYER)
  return target;
}

size_t S_DEATH_PLAYER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_DEATH_PLAYER)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.Player attackPlayer = 1;
  if (this->has_attackplayer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attackplayer_);
  }

  // .Protocol.Player attackedPlayer = 2;
  if (this->has_attackedplayer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attackedplayer_);
  }

  // .Protocol.Transform transform = 3;
  if (this->has_transform()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transform_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_DEATH_PLAYER::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_DEATH_PLAYER)
  GOOGLE_DCHECK_NE(&from, this);
  const S_DEATH_PLAYER* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_DEATH_PLAYER>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_DEATH_PLAYER)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_DEATH_PLAYER)
    MergeFrom(*source);
  }
}

void S_DEATH_PLAYER::MergeFrom(const S_DEATH_PLAYER& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_DEATH_PLAYER)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_attackplayer()) {
    _internal_mutable_attackplayer()->::Protocol::Player::MergeFrom(from._internal_attackplayer());
  }
  if (from.has_attackedplayer()) {
    _internal_mutable_attackedplayer()->::Protocol::Player::MergeFrom(from._internal_attackedplayer());
  }
  if (from.has_transform()) {
    _internal_mutable_transform()->::Protocol::Transform::MergeFrom(from._internal_transform());
  }
}

void S_DEATH_PLAYER::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_DEATH_PLAYER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_DEATH_PLAYER::CopyFrom(const S_DEATH_PLAYER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_DEATH_PLAYER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_DEATH_PLAYER::IsInitialized() const {
  return true;
}

void S_DEATH_PLAYER::InternalSwap(S_DEATH_PLAYER* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_DEATH_PLAYER, transform_)
      + sizeof(S_DEATH_PLAYER::transform_)
      - PROTOBUF_FIELD_OFFSET(S_DEATH_PLAYER, attackplayer_)>(
          reinterpret_cast<char*>(&attackplayer_),
          reinterpret_cast<char*>(&other->attackplayer_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_DEATH_PLAYER::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[30]);
}

// ===================================================================

class C_CHAT::_Internal {
 public:
};

C_CHAT::C_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_CHAT)
}
C_CHAT::C_CHAT(const C_CHAT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_CHAT)
}

void C_CHAT::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

C_CHAT::~C_CHAT() {
  // @@protoc_insertion_point(destructor:Protocol.C_CHAT)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C_CHAT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void C_CHAT::ArenaDtor(void* object) {
  C_CHAT* _this = reinterpret_cast< C_CHAT* >(object);
  (void)_this;
}
void C_CHAT::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_CHAT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_CHAT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_CHAT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_CHAT::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Protocol.C_CHAT.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C_CHAT::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_CHAT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1;
  if (!this->msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_CHAT.msg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_CHAT)
  return target;
}

size_t C_CHAT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_CHAT)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 1;
  if (!this->msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C_CHAT::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.C_CHAT)
  GOOGLE_DCHECK_NE(&from, this);
  const C_CHAT* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C_CHAT>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.C_CHAT)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.C_CHAT)
    MergeFrom(*source);
  }
}

void C_CHAT::MergeFrom(const C_CHAT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_CHAT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
}

void C_CHAT::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.C_CHAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_CHAT::CopyFrom(const C_CHAT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_CHAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_CHAT::IsInitialized() const {
  return true;
}

void C_CHAT::InternalSwap(C_CHAT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, GetArenaForAllocation(),
      &other->msg_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata C_CHAT::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[31]);
}

// ===================================================================

class S_CHAT::_Internal {
 public:
};

S_CHAT::S_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_CHAT)
}
S_CHAT::S_CHAT(const S_CHAT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  playerid_ = from.playerid_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_CHAT)
}

void S_CHAT::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
playerid_ = uint64_t{0u};
}

S_CHAT::~S_CHAT() {
  // @@protoc_insertion_point(destructor:Protocol.S_CHAT)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_CHAT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void S_CHAT::ArenaDtor(void* object) {
  S_CHAT* _this = reinterpret_cast< S_CHAT* >(object);
  (void)_this;
}
void S_CHAT::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_CHAT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_CHAT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_CHAT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  playerid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_CHAT::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Protocol.S_CHAT.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_CHAT::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_CHAT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 playerId = 1;
  if (this->playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_playerid(), target);
  }

  // string msg = 2;
  if (!this->msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_CHAT.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_CHAT)
  return target;
}

size_t S_CHAT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_CHAT)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (!this->msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // uint64 playerId = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_playerid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_CHAT::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_CHAT)
  GOOGLE_DCHECK_NE(&from, this);
  const S_CHAT* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_CHAT>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_CHAT)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_CHAT)
    MergeFrom(*source);
  }
}

void S_CHAT::MergeFrom(const S_CHAT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_CHAT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  if (from.playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
}

void S_CHAT::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_CHAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_CHAT::CopyFrom(const S_CHAT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_CHAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_CHAT::IsInitialized() const {
  return true;
}

void S_CHAT::InternalSwap(S_CHAT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, GetArenaForAllocation(),
      &other->msg_, other->GetArenaForAllocation()
  );
  swap(playerid_, other->playerid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_CHAT::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[32]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Protocol::C_LOGIN* Arena::CreateMaybeMessage< ::Protocol::C_LOGIN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_LOGIN >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_LOGIN* Arena::CreateMaybeMessage< ::Protocol::S_LOGIN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_LOGIN >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_CREATE_ROOM* Arena::CreateMaybeMessage< ::Protocol::C_CREATE_ROOM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_CREATE_ROOM >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_CREATE_ROOM* Arena::CreateMaybeMessage< ::Protocol::S_CREATE_ROOM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_CREATE_ROOM >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_ENTER_ROOM* Arena::CreateMaybeMessage< ::Protocol::C_ENTER_ROOM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_ENTER_ROOM >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_ENTER_ROOM* Arena::CreateMaybeMessage< ::Protocol::S_ENTER_ROOM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_ENTER_ROOM >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_ANOTHER_ENTER_ROOM* Arena::CreateMaybeMessage< ::Protocol::S_ANOTHER_ENTER_ROOM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_ANOTHER_ENTER_ROOM >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_LEAVE_ROOM* Arena::CreateMaybeMessage< ::Protocol::C_LEAVE_ROOM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_LEAVE_ROOM >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_ANOTHER_LEAVE_ROOM* Arena::CreateMaybeMessage< ::Protocol::S_ANOTHER_LEAVE_ROOM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_ANOTHER_LEAVE_ROOM >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_ROOM_SETTING* Arena::CreateMaybeMessage< ::Protocol::C_ROOM_SETTING >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_ROOM_SETTING >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_ROOM_SETTING* Arena::CreateMaybeMessage< ::Protocol::S_ROOM_SETTING >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_ROOM_SETTING >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_ROOM_START* Arena::CreateMaybeMessage< ::Protocol::C_ROOM_START >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_ROOM_START >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_ROOM_START* Arena::CreateMaybeMessage< ::Protocol::S_ROOM_START >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_ROOM_START >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_LOAD_COMPLETE* Arena::CreateMaybeMessage< ::Protocol::C_LOAD_COMPLETE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_LOAD_COMPLETE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_ROUND_START* Arena::CreateMaybeMessage< ::Protocol::S_ROUND_START >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_ROUND_START >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_SHOP_START* Arena::CreateMaybeMessage< ::Protocol::S_SHOP_START >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_SHOP_START >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_END_GAME* Arena::CreateMaybeMessage< ::Protocol::S_END_GAME >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_END_GAME >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_RESULT_START* Arena::CreateMaybeMessage< ::Protocol::S_RESULT_START >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_RESULT_START >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_PLAYER_TRANSFORM* Arena::CreateMaybeMessage< ::Protocol::C_PLAYER_TRANSFORM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_PLAYER_TRANSFORM >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_PLAYERS_TRANSFORM* Arena::CreateMaybeMessage< ::Protocol::S_PLAYERS_TRANSFORM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_PLAYERS_TRANSFORM >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_PLAYER_ANIM_STATE* Arena::CreateMaybeMessage< ::Protocol::C_PLAYER_ANIM_STATE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_PLAYER_ANIM_STATE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_PLAYER_ANIM_STATE* Arena::CreateMaybeMessage< ::Protocol::S_PLAYER_ANIM_STATE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_PLAYER_ANIM_STATE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_SELECT_PARTS* Arena::CreateMaybeMessage< ::Protocol::C_SELECT_PARTS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_SELECT_PARTS >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_SELECT_PARTS* Arena::CreateMaybeMessage< ::Protocol::S_SELECT_PARTS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_SELECT_PARTS >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_SELECT_PARTS_LIST* Arena::CreateMaybeMessage< ::Protocol::S_SELECT_PARTS_LIST >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_SELECT_PARTS_LIST >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_REROLL_PARTS* Arena::CreateMaybeMessage< ::Protocol::C_REROLL_PARTS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_REROLL_PARTS >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_RESPAWN_CLICK* Arena::CreateMaybeMessage< ::Protocol::C_RESPAWN_CLICK >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_RESPAWN_CLICK >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_SPAWN_POINT* Arena::CreateMaybeMessage< ::Protocol::S_SPAWN_POINT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_SPAWN_POINT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_ATTACK_PLAYER* Arena::CreateMaybeMessage< ::Protocol::C_ATTACK_PLAYER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_ATTACK_PLAYER >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_ATTACKED_PLAYER* Arena::CreateMaybeMessage< ::Protocol::S_ATTACKED_PLAYER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_ATTACKED_PLAYER >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_DEATH_PLAYER* Arena::CreateMaybeMessage< ::Protocol::S_DEATH_PLAYER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_DEATH_PLAYER >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_CHAT* Arena::CreateMaybeMessage< ::Protocol::C_CHAT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_CHAT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_CHAT* Arena::CreateMaybeMessage< ::Protocol::S_CHAT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_CHAT >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
